{"ast":null,"code":"/*!\n * @license :jsstore - V4.3.8 - 10/02/2022\n * https://github.com/ujjwalguptaofficial/JsStore\n * Copyright (c) 2022 @Ujjwal Gupta; Licensed MIT\n */\nmodule.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId]) {\n      /******/\n      return installedModules[moduleId].exports;\n      /******/\n    }\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n\n    var module = installedModules[moduleId] = {\n      /******/\n      i: moduleId,\n\n      /******/\n      l: false,\n\n      /******/\n      exports: {}\n      /******/\n\n    };\n    /******/\n\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.l = true;\n    /******/\n\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n\n  /******/\n\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n\n  /******/\n  // define getter function for harmony exports\n\n  /******/\n\n  __webpack_require__.d = function (exports, name, getter) {\n    /******/\n    if (!__webpack_require__.o(exports, name)) {\n      /******/\n      Object.defineProperty(exports, name, {\n        enumerable: true,\n        get: getter\n      });\n      /******/\n    }\n    /******/\n\n  };\n  /******/\n\n  /******/\n  // define __esModule on exports\n\n  /******/\n\n\n  __webpack_require__.r = function (exports) {\n    /******/\n    if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n      /******/\n      Object.defineProperty(exports, Symbol.toStringTag, {\n        value: 'Module'\n      });\n      /******/\n    }\n    /******/\n\n\n    Object.defineProperty(exports, '__esModule', {\n      value: true\n    });\n    /******/\n  };\n  /******/\n\n  /******/\n  // create a fake namespace object\n\n  /******/\n  // mode & 1: value is a module id, require it\n\n  /******/\n  // mode & 2: merge all properties of value into the ns\n\n  /******/\n  // mode & 4: return value when already ns object\n\n  /******/\n  // mode & 8|1: behave like require\n\n  /******/\n\n\n  __webpack_require__.t = function (value, mode) {\n    /******/\n    if (mode & 1) value = __webpack_require__(value);\n    /******/\n\n    if (mode & 8) return value;\n    /******/\n\n    if (mode & 4 && typeof value === 'object' && value && value.__esModule) return value;\n    /******/\n\n    var ns = Object.create(null);\n    /******/\n\n    __webpack_require__.r(ns);\n    /******/\n\n\n    Object.defineProperty(ns, 'default', {\n      enumerable: true,\n      value: value\n    });\n    /******/\n\n    if (mode & 2 && typeof value != 'string') for (var key in value) __webpack_require__.d(ns, key, function (key) {\n      return value[key];\n    }.bind(null, key));\n    /******/\n\n    return ns;\n    /******/\n  };\n  /******/\n\n  /******/\n  // getDefaultExport function for compatibility with non-harmony modules\n\n  /******/\n\n\n  __webpack_require__.n = function (module) {\n    /******/\n    var getter = module && module.__esModule ?\n    /******/\n    function getDefault() {\n      return module['default'];\n    } :\n    /******/\n    function getModuleExports() {\n      return module;\n    };\n    /******/\n\n    __webpack_require__.d(getter, 'a', getter);\n    /******/\n\n\n    return getter;\n    /******/\n  };\n  /******/\n\n  /******/\n  // Object.prototype.hasOwnProperty.call\n\n  /******/\n\n\n  __webpack_require__.o = function (object, property) {\n    return Object.prototype.hasOwnProperty.call(object, property);\n  };\n  /******/\n\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n\n  __webpack_require__.p = \"\";\n  /******/\n\n  /******/\n\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(__webpack_require__.s = 2);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  2:\n  /***/\n  function (module, __webpack_exports__, __webpack_require__) {\n    \"use strict\"; // ESM COMPAT FLAG\n\n    __webpack_require__.r(__webpack_exports__); // EXPORTS\n\n\n    __webpack_require__.d(__webpack_exports__, \"QueryManager\", function () {\n      return (\n        /* reexport */\n        query_manager_QueryManager\n      );\n    }); // CONCATENATED MODULE: ./src/common/utils/promise_resolve.ts\n\n\n    var promiseResolve = function (value) {\n      return Promise.resolve(value);\n    }; // CONCATENATED MODULE: ./src/common/utils/promise.ts\n\n\n    var promise = function (cb) {\n      return new Promise(cb);\n    }; // CONCATENATED MODULE: ./src/common/enums.ts\n\n\n    var ERROR_TYPE;\n\n    (function (ERROR_TYPE) {\n      ERROR_TYPE[\"InvalidUpdateColumn\"] = \"invalid_update_column\";\n      ERROR_TYPE[\"UndefinedColumn\"] = \"undefined_column\";\n      ERROR_TYPE[\"UndefinedValue\"] = \"undefined_value\";\n      ERROR_TYPE[\"UndefinedColumnName\"] = \"undefined_column_name\";\n      ERROR_TYPE[\"UndefinedDbName\"] = \"undefined_database_name\";\n      ERROR_TYPE[\"UndefinedColumnValue\"] = \"undefined_column_value\";\n      ERROR_TYPE[\"NotArray\"] = \"not_array\";\n      ERROR_TYPE[\"NoValueSupplied\"] = \"no_value_supplied\";\n      ERROR_TYPE[\"ColumnNotExist\"] = \"column_not_exist\";\n      ERROR_TYPE[\"EnableSearchOff\"] = \"enable_search_off\";\n      ERROR_TYPE[\"InvalidOp\"] = \"invalid_operator\";\n      ERROR_TYPE[\"NullValue\"] = \"null_value\";\n      ERROR_TYPE[\"WrongDataType\"] = \"wrong_data_type\";\n      ERROR_TYPE[\"TableNotExist\"] = \"table_not_exist\";\n      ERROR_TYPE[\"DbNotExist\"] = \"db_not_exist\";\n      ERROR_TYPE[\"ConnectionAborted\"] = \"connection_aborted\";\n      ERROR_TYPE[\"ConnectionClosed\"] = \"connection_closed\";\n      ERROR_TYPE[\"NotObject\"] = \"not_object\";\n      ERROR_TYPE[\"InvalidConfig\"] = \"invalid_config\";\n      ERROR_TYPE[\"DbBlocked\"] = \"Db_blocked\";\n      ERROR_TYPE[\"IndexedDbNotSupported\"] = \"indexeddb_not_supported\";\n      ERROR_TYPE[\"NullValueInWhere\"] = \"null_value_in_where\";\n      ERROR_TYPE[\"InvalidJoinQuery\"] = \"invalid_join_query\";\n      ERROR_TYPE[\"InvalidOrderQuery\"] = \"invalid_order_query\";\n      ERROR_TYPE[\"InvalidQuery\"] = \"invalid_query\";\n      ERROR_TYPE[\"InvalidGroupQuery\"] = \"invalid_group_query\";\n      ERROR_TYPE[\"ImportScriptsFailed\"] = \"import_scripts_failed\";\n      ERROR_TYPE[\"MethodNotExist\"] = \"method_not_exist\";\n      ERROR_TYPE[\"Unknown\"] = \"unknown\";\n      ERROR_TYPE[\"InvalidMiddleware\"] = \"invalid_middleware\";\n    })(ERROR_TYPE || (ERROR_TYPE = {}));\n\n    var WORKER_STATUS;\n\n    (function (WORKER_STATUS) {\n      WORKER_STATUS[\"Registered\"] = \"registerd\";\n      WORKER_STATUS[\"Failed\"] = \"failed\";\n      WORKER_STATUS[\"NotStarted\"] = \"not_started\";\n    })(WORKER_STATUS || (WORKER_STATUS = {}));\n\n    var DATA_TYPE;\n\n    (function (DATA_TYPE) {\n      DATA_TYPE[\"String\"] = \"string\";\n      DATA_TYPE[\"Object\"] = \"object\";\n      DATA_TYPE[\"Array\"] = \"array\";\n      DATA_TYPE[\"Number\"] = \"number\";\n      DATA_TYPE[\"Boolean\"] = \"boolean\";\n      DATA_TYPE[\"Null\"] = \"null\";\n      DATA_TYPE[\"DateTime\"] = \"date_time\";\n    })(DATA_TYPE || (DATA_TYPE = {}));\n\n    var API;\n\n    (function (API) {\n      API[\"InitDb\"] = \"init_db\";\n      API[\"Get\"] = \"get\";\n      API[\"Set\"] = \"set\";\n      API[\"Select\"] = \"select\";\n      API[\"Insert\"] = \"insert\";\n      API[\"Update\"] = \"update\";\n      API[\"Remove\"] = \"remove\";\n      API[\"OpenDb\"] = \"open_db\";\n      API[\"Clear\"] = \"clear\";\n      API[\"DropDb\"] = \"drop_db\";\n      API[\"Count\"] = \"count\";\n      API[\"ChangeLogStatus\"] = \"change_log_status\";\n      API[\"Terminate\"] = \"terminate\";\n      API[\"Transaction\"] = \"transaction\";\n      API[\"CloseDb\"] = \"close_db\";\n      API[\"Union\"] = \"union\";\n      API[\"Intersect\"] = \"intersect\";\n      API[\"ImportScripts\"] = \"import_scripts\";\n      API[\"Middleware\"] = \"middleware\";\n    })(API || (API = {}));\n\n    var EVENT;\n\n    (function (EVENT) {\n      EVENT[\"RequestQueueEmpty\"] = \"requestQueueEmpty\";\n      EVENT[\"RequestQueueFilled\"] = \"requestQueueFilled\";\n      EVENT[\"Upgrade\"] = \"upgrade\";\n      EVENT[\"Create\"] = \"create\";\n      EVENT[\"Open\"] = \"open\";\n    })(EVENT || (EVENT = {}));\n\n    var QUERY_OPTION;\n\n    (function (QUERY_OPTION) {\n      QUERY_OPTION[\"Where\"] = \"where\";\n      QUERY_OPTION[\"Like\"] = \"like\";\n      QUERY_OPTION[\"Regex\"] = \"regex\";\n      QUERY_OPTION[\"In\"] = \"in\";\n      QUERY_OPTION[\"Equal\"] = \"=\";\n      QUERY_OPTION[\"Between\"] = \"-\";\n      QUERY_OPTION[\"GreaterThan\"] = \">\";\n      QUERY_OPTION[\"LessThan\"] = \"<\";\n      QUERY_OPTION[\"GreaterThanEqualTo\"] = \">=\";\n      QUERY_OPTION[\"LessThanEqualTo\"] = \"<=\";\n      QUERY_OPTION[\"NotEqualTo\"] = \"!=\";\n      QUERY_OPTION[\"Aggregate\"] = \"aggregate\";\n      QUERY_OPTION[\"Max\"] = \"max\";\n      QUERY_OPTION[\"Min\"] = \"min\";\n      QUERY_OPTION[\"Avg\"] = \"avg\";\n      QUERY_OPTION[\"Count\"] = \"count\";\n      QUERY_OPTION[\"Sum\"] = \"sum\";\n      QUERY_OPTION[\"Or\"] = \"or\";\n      QUERY_OPTION[\"Skip\"] = \"skip\";\n      QUERY_OPTION[\"Limit\"] = \"limit\";\n      QUERY_OPTION[\"And\"] = \"and\";\n      QUERY_OPTION[\"IgnoreCase\"] = \"ignoreCase\";\n      QUERY_OPTION[\"Then\"] = \"then\";\n    })(QUERY_OPTION || (QUERY_OPTION = {}));\n\n    var IDB_MODE;\n\n    (function (IDB_MODE) {\n      IDB_MODE[\"ReadOnly\"] = \"readonly\";\n      IDB_MODE[\"ReadWrite\"] = \"readwrite\";\n    })(IDB_MODE || (IDB_MODE = {}));\n\n    var OCCURENCE;\n\n    (function (OCCURENCE) {\n      OCCURENCE[\"First\"] = \"f\";\n      OCCURENCE[\"Last\"] = \"l\";\n      OCCURENCE[\"Any\"] = \"a\";\n    })(OCCURENCE || (OCCURENCE = {}));\n\n    var CONNECTION_STATUS;\n\n    (function (CONNECTION_STATUS) {\n      CONNECTION_STATUS[\"Connected\"] = \"connected\";\n      CONNECTION_STATUS[\"Closed\"] = \"closed\";\n      CONNECTION_STATUS[\"NotStarted\"] = \"not_started\";\n      CONNECTION_STATUS[\"UnableToStart\"] = \"unable_to_start\";\n      CONNECTION_STATUS[\"ClosedByJsStore\"] = \"closed_by_jsstore\";\n    })(CONNECTION_STATUS || (CONNECTION_STATUS = {})); // CONCATENATED MODULE: ./src/worker/model/table_meta.ts\n\n\n    var TableMeta =\n    /** @class */\n    function () {\n      function TableMeta(table) {\n        this.columns = [];\n        this.autoIncColumnValue = {};\n        this.columns = this.setColumn(table.columns);\n        this.name = table.name;\n        this.alter = table.alter || {};\n      }\n\n      TableMeta.prototype.setColumn = function (tableColumns) {\n        var columns = [];\n\n        var _loop_1 = function (columnName) {\n          var column = tableColumns[columnName];\n          column.name = columnName;\n\n          if (column.autoIncrement) {\n            this_1.autoIncColumnValue[columnName] = 0;\n          }\n\n          if (column.primaryKey) {\n            this_1.primaryKey = columnName;\n          }\n\n          column.enableSearch = column.enableSearch == null ? true : column.enableSearch;\n          var existingColumnIndex = this_1.columns.indexOf(function (q) {\n            return q.name === columnName;\n          });\n\n          if (existingColumnIndex < 0) {\n            columns.push(column);\n          } else {\n            var existingColumn = this_1.columns[existingColumnIndex];\n            Object.assign(existingColumn, column);\n          }\n        };\n\n        var this_1 = this;\n\n        for (var columnName in tableColumns) {\n          _loop_1(columnName);\n        }\n\n        return columns;\n      };\n\n      return TableMeta;\n    }(); // CONCATENATED MODULE: ./src/worker/meta_helper.ts\n\n\n    var meta_helper_MetaHelper =\n    /** @class */\n    function () {\n      function MetaHelper() {}\n\n      MetaHelper.autoIncrementKey = function (tableName, columnName) {\n        return \"JsStore_\" + tableName + \"_\" + columnName + \"_Value\";\n      };\n\n      MetaHelper.set = function (key, value, util) {\n        if (!util.tx) {\n          util.createTransaction([MetaHelper.tableName]);\n        }\n\n        var store = util.objectStore(MetaHelper.tableName);\n        return promise(function (res, rej) {\n          var req = store.put({\n            key: key,\n            value: value\n          });\n\n          req.onsuccess = function () {\n            res();\n          };\n\n          req.onerror = rej;\n        });\n      };\n\n      MetaHelper.get = function (key, util) {\n        if (!util.tx) {\n          util.createTransaction([MetaHelper.tableName]);\n        }\n\n        var store = util.objectStore(MetaHelper.tableName);\n        return promise(function (res, rej) {\n          var req = store.get(util.keyRange(key));\n\n          req.onsuccess = function () {\n            var result = req.result;\n            res(result && result.value);\n          };\n\n          req.onerror = rej;\n        });\n      };\n\n      MetaHelper.remove = function (key, util) {\n        if (!util.tx) {\n          util.createTransaction([MetaHelper.tableName]);\n        }\n\n        var store = util.objectStore(MetaHelper.tableName);\n        return promise(function (res, rej) {\n          var req = store.delete(util.keyRange(key));\n          req.onsuccess = res;\n          req.onerror = rej;\n        });\n      };\n\n      MetaHelper.tableName = \"JsStore_Meta\";\n      MetaHelper.dbSchema = \"JsStore_DbSchema\";\n      return MetaHelper;\n    }(); // CONCATENATED MODULE: ./src/worker/model/db_meta.ts\n\n\n    var db_meta_DbMeta =\n    /** @class */\n    function () {\n      function DbMeta(db) {\n        this.name = db.name;\n        this.version = db.version || 1;\n        db.tables.push({\n          name: meta_helper_MetaHelper.tableName,\n          columns: {\n            key: {\n              primaryKey: true\n            },\n            value: {\n              enableSearch: false\n            }\n          }\n        });\n        this.tables = db.tables.map(function (table) {\n          return new TableMeta(table);\n        });\n      }\n\n      return DbMeta;\n    }(); // CONCATENATED MODULE: ./src/common/utils/for_obj.ts\n\n\n    var forObj = function (obj, cb) {\n      for (var key in obj) {\n        cb(key, obj[key]);\n      }\n    }; // CONCATENATED MODULE: ./src/worker/utils/log_helper.ts\n\n\n    var log_helper_LogHelper =\n    /** @class */\n    function () {\n      function LogHelper(type, info) {\n        this.type = type;\n        this.info_ = info;\n        this.message = this.getMsg_();\n      }\n\n      LogHelper.prototype.log = function (msg) {\n        if (this.status) {\n          console.log(msg);\n        }\n      };\n\n      LogHelper.prototype.throw = function () {\n        throw this.get();\n      };\n\n      LogHelper.prototype.logError = function () {\n        console.error(this.get());\n      };\n\n      LogHelper.prototype.get = function () {\n        return {\n          message: this.message,\n          type: this.type\n        };\n      };\n\n      LogHelper.prototype.getMsg_ = function () {\n        var errMsg;\n\n        switch (this.type) {\n          case ERROR_TYPE.NotArray:\n            errMsg = \"Supplied value is not an array\";\n            break;\n\n          case ERROR_TYPE.UndefinedColumn:\n            errMsg = \"Column is undefined in Where\";\n            break;\n\n          case ERROR_TYPE.UndefinedValue:\n            errMsg = \"Value is undefined in Where\";\n            break;\n\n          case ERROR_TYPE.UndefinedColumnName:\n            errMsg = \"Column name is undefined '\" + this.info_['TableName'] + \"'\";\n            break;\n\n          case ERROR_TYPE.UndefinedDbName:\n            errMsg = \"Database name is not supplied\";\n            break;\n\n          case ERROR_TYPE.UndefinedColumnValue:\n            errMsg = \"Column value is undefined\";\n            break;\n\n          case ERROR_TYPE.NoValueSupplied:\n            errMsg = \"No value is supplied\";\n            break;\n\n          case ERROR_TYPE.InvalidOp:\n            errMsg = \"Invalid Op Value '\" + this.info_['Op'] + \"'\";\n            break;\n\n          case ERROR_TYPE.ColumnNotExist:\n            errMsg = this.info_['isOrder'] ? \"Column '\" + this.info_['column'] + \"' in order query does not exist\" : \"Column '\" + this.info_['column'] + \"' does not exist\";\n            break;\n\n          case ERROR_TYPE.EnableSearchOff:\n            errMsg = \"Search is turned off for the Column '\" + this.info_['column'] + \"'\";\n            break;\n\n          case ERROR_TYPE.NullValue:\n            errMsg = \"Null value is not allowed for column '\" + this.info_['ColumnName'] + \"'\";\n            break;\n\n          case ERROR_TYPE.WrongDataType:\n            errMsg = \"Supplied value for column '\" + this.info_['column'] + \"' have wrong data type\";\n            break;\n\n          case ERROR_TYPE.TableNotExist:\n            errMsg = \"Table '\" + this.info_['tableName'] + \"' does not exist\";\n            break;\n\n          case ERROR_TYPE.DbNotExist:\n            errMsg = \"Database with name \" + this.info_['dbName'] + \" does not exist\";\n            break;\n\n          case ERROR_TYPE.NotObject:\n            errMsg = \"supplied value is not object\";\n            break;\n\n          case ERROR_TYPE.InvalidOp:\n            errMsg = \"Invalid Config '\" + this.info_['Config'] + \" '\";\n            break;\n\n          case ERROR_TYPE.DbBlocked:\n            errMsg = \"database is blocked, cant be deleted right now\";\n            break;\n\n          case ERROR_TYPE.NullValueInWhere:\n            errMsg = \"Null/undefined is not allowed in where. Column '\" + this.info_['column'] + \"' has null\";\n            break;\n\n          case ERROR_TYPE.MethodNotExist:\n            errMsg = \"method '\" + this.info_ + \"' does not exist.\";\n            break;\n\n          case ERROR_TYPE.IndexedDbNotSupported:\n            errMsg = \"Browser does not support indexeddb\";\n            break;\n\n          case ERROR_TYPE.InvalidJoinQuery:\n          case ERROR_TYPE.InvalidGroupQuery:\n          case ERROR_TYPE.InvalidOrderQuery:\n          case ERROR_TYPE.ImportScriptsFailed:\n            errMsg = this.info_;\n            break;\n\n          case ERROR_TYPE.InvalidMiddleware:\n            errMsg = \"No function \" + this.info_ + \" is found.\";\n            break;\n\n          default:\n            if (!this.type) {\n              this.type = ERROR_TYPE.Unknown;\n            }\n\n            errMsg = this.message;\n            break;\n        }\n\n        return errMsg;\n      };\n\n      return LogHelper;\n    }(); // CONCATENATED MODULE: ./src/worker/idbutil/index.ts\n\n\n    var idbutil_IDBUtil =\n    /** @class */\n    function () {\n      function IDBUtil() {\n        this.logger = new log_helper_LogHelper(null);\n      }\n\n      IDBUtil.prototype.emptyTx = function () {\n        if (!this.tx) return;\n        this.tx.oncomplete = null;\n        this.tx.onabort = null;\n        this.tx.onerror = null;\n        this.tx = null;\n      };\n\n      IDBUtil.prototype.createTransactionIfNotExist = function (tables, mode) {\n        if (!this.tx) {\n          this.createTransaction(tables, mode);\n        }\n      };\n\n      IDBUtil.prototype.createTransaction = function (tables, mode) {\n        var _this = this;\n\n        if (mode === void 0) {\n          mode = IDB_MODE.ReadWrite;\n        }\n\n        this.tx = this.con.transaction(tables, mode);\n        return promise(function (res, rej) {\n          _this.tx.oncomplete = res;\n          _this.tx.onabort = res;\n          _this.tx.onerror = rej;\n        });\n      };\n\n      IDBUtil.prototype.keyRange = function (value, op) {\n        var keyRange;\n\n        switch (op) {\n          case QUERY_OPTION.Between:\n            keyRange = IDBKeyRange.bound(value.low, value.high, false, false);\n            break;\n\n          case QUERY_OPTION.GreaterThan:\n            keyRange = IDBKeyRange.lowerBound(value, true);\n            break;\n\n          case QUERY_OPTION.GreaterThanEqualTo:\n            keyRange = IDBKeyRange.lowerBound(value);\n            break;\n\n          case QUERY_OPTION.LessThan:\n            keyRange = IDBKeyRange.upperBound(value, true);\n            break;\n\n          case QUERY_OPTION.LessThanEqualTo:\n            keyRange = IDBKeyRange.upperBound(value);\n            break;\n\n          default:\n            keyRange = IDBKeyRange.only(value);\n            break;\n        }\n\n        return keyRange;\n      };\n\n      IDBUtil.prototype.objectStore = function (name) {\n        return this.tx.objectStore(name);\n      };\n\n      IDBUtil.prototype.abortTransaction = function () {\n        if (this.tx) {\n          this.tx.abort();\n        }\n      };\n\n      IDBUtil.prototype.close = function () {\n        var _this = this;\n\n        if (this.con) {\n          this.con.close();\n        } // wait for 100 ms before success\n\n\n        return promise(function (res) {\n          _this.con = null;\n          setTimeout(res, 100);\n        });\n      };\n\n      IDBUtil.prototype.initDb = function (db) {\n        var _this = this;\n\n        var isDbCreated = false;\n        var dbVersion = db.version;\n        var oldVersion;\n\n        var initLogic = function (res, rej) {\n          var dbOpenRequest = indexedDB.open(db.name, dbVersion);\n\n          dbOpenRequest.onsuccess = function () {\n            _this.con = dbOpenRequest.result;\n\n            _this.con.onversionchange = function (e) {\n              // if (e.newVersion === null) { // An attempt is made to delete the db\n              e.target.close(); // Manually close our connection to the db\n              // }\n            };\n\n            res({\n              isCreated: isDbCreated,\n              oldVersion: oldVersion,\n              newVersion: dbVersion\n            });\n          };\n\n          dbOpenRequest.onerror = function (e) {\n            console.error(\"error\", e);\n            rej(e);\n          };\n\n          dbOpenRequest.onupgradeneeded = function (e) {\n            oldVersion = e.oldVersion;\n            var target = e.target;\n            var upgradeConnection = target.result;\n            isDbCreated = true;\n            var transaction = target.transaction;\n            var storeNames = upgradeConnection.objectStoreNames;\n\n            var createObjectStore = function (table) {\n              var option = table.primaryKey ? {\n                keyPath: table.primaryKey\n              } : {\n                autoIncrement: true\n              };\n              var store = upgradeConnection.createObjectStore(table.name, option);\n              table.columns.forEach(function (column) {\n                addColumn(store, column);\n              });\n            };\n\n            var addColumn = function (store, column) {\n              var columnName = column.name;\n\n              if (column.enableSearch && !store.indexNames.contains(columnName)) {\n                var options = column.primaryKey ? {\n                  unique: true\n                } : {\n                  unique: column.unique\n                };\n                options['multiEntry'] = column.multiEntry;\n                var keyPath = column.keyPath == null ? columnName : column.keyPath;\n                store.createIndex(columnName, keyPath, options);\n              }\n            };\n\n            var deleteColumn = function (store, table, columnName) {\n              var index = table.columns.findIndex(function (q) {\n                return q.name === columnName;\n              });\n\n              if (index >= 0) {\n                table.columns.splice(index, 1);\n                store.deleteIndex(columnName);\n              }\n            };\n\n            db.tables.forEach(function (table) {\n              if (!storeNames.contains(table.name)) {\n                return createObjectStore(table);\n              }\n\n              var store = transaction.objectStore(table.name);\n\n              for (var i = oldVersion + 1; i <= dbVersion; i++) {\n                var alterQuery = table.alter[i];\n\n                if (alterQuery) {\n                  if (alterQuery.add) {\n                    var newColumns = table.setColumn(alterQuery.add);\n                    newColumns.forEach(function (column) {\n                      addColumn(store, column);\n                      table.columns.push(column);\n                    });\n                  }\n\n                  forObj(alterQuery.drop || {}, function (columnName) {\n                    deleteColumn(store, table, columnName);\n                  });\n                  forObj(alterQuery.modify || {}, function (columnName, column) {\n                    var shouldDelete = column.multiEntry || column.keyPath || column.unique;\n                    var targetColumn = table.columns.find(function (q) {\n                      return q.name === columnName;\n                    });\n                    var newColumn = Object.assign(targetColumn, column);\n                    newColumn.name = columnName;\n\n                    if (shouldDelete) {\n                      deleteColumn(store, table, columnName);\n                      addColumn(store, newColumn);\n                      table.columns.push(newColumn);\n                    }\n                  });\n                }\n              }\n            });\n\n            var _loop_1 = function (i, length_1) {\n              var storeName = storeNames.item(i);\n              var tableIndex = db.tables.findIndex(function (qry) {\n                return qry.name === storeName;\n              });\n\n              if (tableIndex < 0) {\n                upgradeConnection.deleteObjectStore(storeName);\n              }\n            };\n\n            for (var i = 0, length_1 = storeNames.length; i < length_1; i++) {\n              _loop_1(i, length_1);\n            }\n          };\n        };\n\n        return promise(initLogic);\n      };\n\n      return IDBUtil;\n    }(); // CONCATENATED MODULE: ./src/common/utils/promise_all.ts\n\n\n    var promiseAll = function (promises) {\n      return Promise.all(promises);\n    }; // CONCATENATED MODULE: ./src/worker/utils/promise_reject.ts\n\n\n    var promiseReject = function (value) {\n      return Promise.reject(value);\n    }; // CONCATENATED MODULE: ./src/worker/utils/get_error.ts\n\n\n    var getError = function (e) {\n      var customError = e instanceof log_helper_LogHelper;\n\n      if (customError) {\n        e.logError();\n        return e.get();\n      } else {\n        var error = void 0;\n\n        if (e.name) {\n          error = new log_helper_LogHelper(e.name);\n          error.message = e.message;\n        } else {\n          error = new log_helper_LogHelper(e.target.error.name);\n          error.message = e.target.error.message;\n        }\n\n        if (true) {\n          error.logError();\n        }\n\n        return error.get();\n      }\n    }; // CONCATENATED MODULE: ./src/worker/utils/get_error_from_exception.ts\n\n\n    var getErrorFromException = function (ex, type) {\n      if (type === void 0) {\n        type = ERROR_TYPE.InvalidQuery;\n      }\n\n      ex.name = type;\n      return getError(ex);\n    }; // CONCATENATED MODULE: ./src/worker/executors/base.ts\n\n\n    var base_Base =\n    /** @class */\n    function () {\n      function Base() {\n        // db: DbMeta;\n        this.rowAffected = 0;\n        this.isTxQuery = false;\n        this.results = [];\n      }\n\n      Object.defineProperty(Base.prototype, \"db\", {\n        get: function () {\n          return this.util.db;\n        },\n        enumerable: false,\n        configurable: true\n      }); // get tableName() {\n      //     return (this.query as SelectQuery).from || (this.query as InsertQuery).into\n      // }\n\n      Base.prototype.table = function (name) {\n        var tableName = name || this.tableName;\n        return this.db.tables.find(function (q) {\n          return q.name === tableName;\n        });\n      };\n\n      Base.prototype.primaryKey = function (tableName) {\n        return this.table(tableName).primaryKey;\n      };\n\n      Base.prototype.getColumnInfo = function (columnName, tableName) {\n        return this.table(tableName).columns.find(function (column) {\n          return column.name === columnName;\n        });\n      };\n\n      Base.prototype.onException = function (ex, type) {\n        console.error(ex);\n        this.util.abortTransaction();\n        return promiseReject(getErrorFromException(ex, type));\n      };\n\n      return Base;\n    }(); // CONCATENATED MODULE: ./src/worker/utils/get_data_type.ts\n\n\n    var getDataType = function (value) {\n      if (value == null) {\n        return DATA_TYPE.Null;\n      }\n\n      var type = typeof value;\n\n      switch (type) {\n        case 'object':\n          if (Array.isArray(value)) {\n            return DATA_TYPE.Array;\n          }\n\n          if (value instanceof Date) {\n            return DATA_TYPE.DateTime;\n          }\n\n      }\n\n      return type;\n    }; // CONCATENATED MODULE: ./src/worker/utils/is_null.ts\n\n\n    var isNull = function (value) {\n      if (value == null) {\n        return true;\n      } else {\n        switch (typeof value) {\n          // case 'string': return value.length === 0;\n          case 'number':\n            return isNaN(value);\n        }\n      }\n\n      return false;\n    }; // CONCATENATED MODULE: ./src/worker/executors/insert/values_checker.ts\n\n\n    var values_checker_ValuesChecker =\n    /** @class */\n    function () {\n      function ValuesChecker(table, autoIncValues) {\n        this.table = table;\n        this.autoIncrementValue = autoIncValues;\n      }\n\n      ValuesChecker.prototype.checkAndModifyValues = function (query) {\n        var _this = this;\n\n        var err;\n        this.query = query;\n        var values = query.values;\n        var ignoreIndexes = [];\n        values.every(function (item, index) {\n          err = _this.checkAndModifyValue(item);\n\n          if (query.ignore && err) {\n            ignoreIndexes.push(index);\n            err = null;\n          }\n\n          return err ? false : true;\n        });\n        ignoreIndexes.forEach(function (index) {\n          values.splice(index, 1);\n        });\n        return {\n          err: err,\n          values: values\n        };\n      };\n\n      ValuesChecker.prototype.checkAndModifyValue = function (value) {\n        var _this = this;\n\n        var error;\n        this.table.columns.every(function (column) {\n          error = _this.checkAndModifyColumnValue_(column, value);\n          return error ? false : true;\n        });\n        return error;\n      };\n\n      ValuesChecker.prototype.checkNotNullAndDataType_ = function (column, value) {\n        // check not null schema\n        if (column.notNull && isNull(value[column.name])) {\n          return this.getError(ERROR_TYPE.NullValue, {\n            ColumnName: column.name\n          });\n        } // check datatype\n        else if (column.dataType && !isNull(value[column.name]) && getDataType(value[column.name]) !== column.dataType) {\n          return this.getError(ERROR_TYPE.WrongDataType, {\n            column: column.name\n          });\n        }\n      };\n\n      ValuesChecker.prototype.checkAndModifyColumnValue_ = function (column, value) {\n        var columnValue = value[column.name]; // check auto increment scheme\n\n        if (column.autoIncrement) {\n          // if value is null, then create the autoincrement value\n          if (isNull(columnValue)) {\n            value[column.name] = ++this.autoIncrementValue[column.name];\n          } else {\n            if (getDataType(columnValue) === DATA_TYPE.Number) {\n              // if column value is greater than autoincrement value saved, then make the\n              // column value as autoIncrement value\n              if (columnValue > this.autoIncrementValue[column.name]) {\n                this.autoIncrementValue[column.name] = columnValue;\n              }\n            }\n          }\n        } // check Default Schema\n        else if (column.default !== undefined && isNull(columnValue)) {\n          value[column.name] = column.default;\n        }\n\n        var query = this.query;\n\n        if (query.validation) {\n          return this.checkNotNullAndDataType_(column, value);\n        }\n      };\n\n      ValuesChecker.prototype.getError = function (error, details) {\n        return new log_helper_LogHelper(error, details);\n      };\n\n      return ValuesChecker;\n    }(); // CONCATENATED MODULE: ./src/worker/executors/update/schema_checker.ts\n\n\n    var schema_checker_SchemaChecker =\n    /** @class */\n    function () {\n      function SchemaChecker(table) {\n        this.table = table;\n      }\n\n      SchemaChecker.prototype.check = function (setValue, tblName) {\n        var _this = this;\n\n        var log;\n\n        if (typeof setValue === DATA_TYPE.Object) {\n          if (this.table) {\n            // loop through table column and find data is valid\n            this.table.columns.every(function (column) {\n              if (column.name in setValue) {\n                log = _this.checkByColumn_(column, setValue[column.name]);\n              }\n\n              return log ? false : true;\n            });\n          } else {\n            log = new log_helper_LogHelper(ERROR_TYPE.TableNotExist, {\n              tableName: tblName\n            });\n          }\n        } else {\n          log = new log_helper_LogHelper(ERROR_TYPE.NotObject);\n        }\n\n        return log;\n      };\n\n      SchemaChecker.prototype.checkByColumn_ = function (column, value) {\n        // check not null schema\n        if (column.notNull === true && isNull(value)) {\n          return new log_helper_LogHelper(ERROR_TYPE.NullValue, {\n            ColumnName: column.name\n          });\n        } // check datatype\n\n\n        var type = getDataType(value);\n        var checkFurther = value != null;\n\n        if (column.dataType && checkFurther) {\n          if (type !== column.dataType && type !== 'object') {\n            return new log_helper_LogHelper(ERROR_TYPE.WrongDataType, {\n              column: column.name\n            });\n          }\n        } // check allowed operators\n\n\n        if (checkFurther && type === 'object') {\n          var allowedOp = ['+', '-', '*', '/', '{push}'];\n\n          for (var prop in value) {\n            if (allowedOp.indexOf(prop) < 0 && column.dataType && type !== column.dataType) {\n              return new log_helper_LogHelper(ERROR_TYPE.WrongDataType, {\n                column: column.name\n              });\n            }\n          }\n        }\n      };\n\n      return SchemaChecker;\n    }(); // CONCATENATED MODULE: ./src/worker/executors/query_helper.ts\n\n\n    var query_helper_QueryHelper =\n    /** @class */\n    function () {\n      function QueryHelper(dbSchema) {\n        this.db = dbSchema;\n      }\n\n      QueryHelper.prototype.validate = function (api, query) {\n        switch (api) {\n          case API.Select:\n          case API.Remove:\n          case API.Count:\n            return this.checkSelect(query);\n\n          case API.Insert:\n            return this.checkInsertQuery(query);\n\n          case API.Update:\n            return this.checkUpdate(query);\n        }\n      };\n\n      QueryHelper.prototype.getTable_ = function (tableName) {\n        return this.db.tables.find(function (q) {\n          return q.name === tableName;\n        });\n      };\n\n      QueryHelper.prototype.isInsertQryValid = function (query) {\n        var table = this.getTable_(query.into);\n        var log;\n\n        if (table) {\n          switch (getDataType(query.values)) {\n            case DATA_TYPE.Array:\n              break;\n\n            case DATA_TYPE.Null:\n              log = new log_helper_LogHelper(ERROR_TYPE.NoValueSupplied);\n              break;\n\n            default:\n              log = new log_helper_LogHelper(ERROR_TYPE.NotArray);\n          }\n        } else {\n          log = new log_helper_LogHelper(ERROR_TYPE.TableNotExist, {\n            tableName: query.into\n          });\n        }\n\n        return {\n          table: table,\n          log: log\n        };\n      };\n\n      QueryHelper.prototype.checkUpdate = function (query) {\n        var err = new schema_checker_SchemaChecker(this.getTable_(query.in)).check(query.set, query.in);\n        if (err) return err;\n\n        if (query.where != null) {\n          err = this.checkForNullInWhere_(query);\n          if (err) return err;\n          this.addGreatAndLessToNotOp_(query);\n        }\n      };\n\n      QueryHelper.prototype.checkSelect = function (query) {\n        var table = this.getTable_(query.from);\n\n        if (!table) {\n          return new log_helper_LogHelper(ERROR_TYPE.TableNotExist, {\n            tableName: query.from\n          });\n        }\n\n        if (query.where) {\n          var err = this.checkForNullInWhere_(query);\n          if (err) return err;\n          this.addGreatAndLessToNotOp_(query);\n        }\n      };\n\n      QueryHelper.prototype.checkForNullInWhere_ = function (query) {\n        for (var columnName in query.where) {\n          if (query.where[columnName] == null) {\n            return new log_helper_LogHelper(ERROR_TYPE.NullValueInWhere, {\n              column: columnName\n            });\n          }\n        }\n      };\n\n      QueryHelper.prototype.addGreatAndLessToNotOp_ = function (query) {\n        var whereQuery = query.where;\n\n        var containsNot = function (qry, keys) {\n          return keys.findIndex(function (key) {\n            return qry[key][QUERY_OPTION.NotEqualTo] != null;\n          }) >= 0;\n        };\n\n        var addToSingleQry = function (qry, keys) {\n          var value;\n          keys.forEach(function (prop) {\n            value = qry[prop];\n\n            if (value[QUERY_OPTION.NotEqualTo] != null) {\n              qry[prop][QUERY_OPTION.GreaterThan] = value[QUERY_OPTION.NotEqualTo];\n\n              if (qry[QUERY_OPTION.Or] === undefined) {\n                qry[QUERY_OPTION.Or] = {};\n                qry[QUERY_OPTION.Or][prop] = {};\n              } else if (qry[QUERY_OPTION.Or][prop] === undefined) {\n                qry[QUERY_OPTION.Or][prop] = {};\n              }\n\n              qry[QUERY_OPTION.Or][prop][QUERY_OPTION.LessThan] = value[QUERY_OPTION.NotEqualTo];\n              delete qry[prop][QUERY_OPTION.NotEqualTo];\n            }\n          });\n          return qry;\n        };\n\n        switch (getDataType(whereQuery)) {\n          case DATA_TYPE.Object:\n            var queryKeys = Object.keys(whereQuery);\n\n            if (containsNot(whereQuery, queryKeys)) {\n              if (queryKeys.length === 1) {\n                query.where = addToSingleQry(whereQuery, queryKeys);\n              } else {\n                var whereTmpQry_1 = [];\n                queryKeys.forEach(function (prop) {\n                  var _a;\n\n                  whereTmpQry_1.push(addToSingleQry((_a = {}, _a[prop] = whereQuery[prop], _a), [prop]));\n                });\n                query.where = whereTmpQry_1;\n              }\n            }\n\n            break;\n\n          default:\n            var whereTmp_1 = [];\n            whereQuery.forEach(function (qry) {\n              var qryKeys = Object.keys(qry);\n\n              if (containsNot(qry, qryKeys)) {\n                qry = addToSingleQry(qry, qryKeys);\n              }\n\n              whereTmp_1.push(qry);\n            });\n            query.where = whereTmp_1;\n        }\n      };\n\n      QueryHelper.prototype.checkInsertQuery = function (query) {\n        var validResult = this.isInsertQryValid(query);\n        var table = validResult.table;\n        var error = validResult.log;\n        if (error) return error;\n        if (query.skipDataCheck) return;\n        var valueCheckerInstance = new values_checker_ValuesChecker(table, table.autoIncColumnValue);\n\n        var _a = valueCheckerInstance.checkAndModifyValues(query),\n            values = _a.values,\n            err = _a.err;\n\n        query.values = values;\n        return err;\n      };\n\n      return QueryHelper;\n    }(); // CONCATENATED MODULE: ./src/worker/executors/insert/index.ts\n\n\n    var __extends = undefined && undefined.__extends || function () {\n      var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n        };\n\n        return extendStatics(d, b);\n      };\n\n      return function (d, b) {\n        if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n\n        function __() {\n          this.constructor = d;\n        }\n\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n\n    var insert_Insert =\n    /** @class */\n    function (_super) {\n      __extends(Insert, _super);\n\n      function Insert(query, util) {\n        var _this = _super.call(this) || this;\n\n        _this.valuesAffected_ = [];\n\n        if (query.validation == null) {\n          query.validation = true;\n        }\n\n        _this.query = query;\n        _this.util = util;\n        _this.tableName = query.into;\n        return _this;\n      }\n\n      Insert.prototype.execute = function (beforeInsert) {\n        var _this = this;\n\n        var db = this.db;\n        var err = new query_helper_QueryHelper(db).validate(API.Insert, this.query);\n        if (err) return promiseReject(err);\n        return beforeInsert().then(function (_) {\n          return _this.insertData_(db).then(function (_) {\n            return _this.query.return ? _this.valuesAffected_ : _this.rowAffected;\n          });\n        }).catch(function (err) {\n          _this.util.abortTransaction();\n\n          return promiseReject(err);\n        });\n      };\n\n      Insert.prototype.insertData_ = function (db) {\n        var _this = this;\n\n        var onInsertData;\n        var addMethod;\n        var query = this.query;\n\n        if (query.return) {\n          onInsertData = function (value) {\n            _this.valuesAffected_.push(value);\n          };\n        } else {\n          onInsertData = function (value) {\n            ++_this.rowAffected;\n          };\n        }\n\n        addMethod = function () {\n          var idbMethod = query.upsert ? \"put\" : \"add\";\n\n          if (query.ignore && !_this.isTxQuery) {\n            return function (value) {\n              var tx = _this.util.con.transaction(query.into, IDB_MODE.ReadWrite);\n\n              var objectStore = tx.objectStore(query.into);\n              return objectStore[idbMethod](value);\n            };\n          }\n\n          if (!_this.isTxQuery) {\n            _this.util.createTransaction([query.into, meta_helper_MetaHelper.tableName]);\n          }\n\n          _this.objectStore = _this.util.objectStore(_this.tableName);\n          return function (value) {\n            return _this.objectStore[idbMethod](value);\n          };\n        }();\n\n        return promiseAll(query.values.map(function (value) {\n          return promise(function (res, rej) {\n            var addResult = addMethod(value);\n\n            addResult.onerror = function (err) {\n              if (query.ignore) {\n                res();\n              } else {\n                rej(err);\n              }\n            };\n\n            addResult.onsuccess = function () {\n              onInsertData(value);\n              res();\n            };\n          });\n        })).then(function () {\n          meta_helper_MetaHelper.set(meta_helper_MetaHelper.dbSchema, db, _this.util);\n        });\n      };\n\n      return Insert;\n    }(base_Base); // CONCATENATED MODULE: ./src/worker/utils/set_cross_browser_idb.ts\n\n\n    var setCrossBrowserIndexedDb = function () {\n      try {\n        if (!indexedDB) {\n          indexedDB = self.mozIndexedDB || self.webkitIndexedDB || self.msIndexedDB;\n        }\n\n        if (indexedDB) {\n          IDBTransaction = IDBTransaction || self.webkitIDBTransaction || self.msIDBTransaction;\n          self.IDBKeyRange = self.IDBKeyRange || self.webkitIDBKeyRange || self.msIDBKeyRange;\n        } else {\n          return false;\n        }\n      } catch (ex) {\n        return false;\n      }\n\n      return true;\n    }; // CONCATENATED MODULE: ./src/worker/constants/index.ts\n\n\n    var IS_WORKER = typeof self.alert === 'undefined' && typeof ServiceWorkerGlobalScope === 'undefined';\n    var IS_IDB_SUPPORTED = setCrossBrowserIndexedDb(); // CONCATENATED MODULE: ./src/worker/utils/get_keys.ts\n\n    var getKeys = function (value) {\n      return Object.keys(value);\n    }; // CONCATENATED MODULE: ./src/worker/utils/is_array.ts\n\n\n    var isArray = function (value) {\n      return Array.isArray(value);\n    }; // CONCATENATED MODULE: ./src/worker/utils/is_object.ts\n\n\n    var isObject = function (value) {\n      return typeof value === 'object';\n    }; // CONCATENATED MODULE: ./src/worker/utils/get_length.ts\n\n\n    var getLength = function (value) {\n      return getKeys(value).length;\n    }; // CONCATENATED MODULE: ./src/worker/utils/get_object_first_key.ts\n\n\n    var getObjectFirstKey = function (value) {\n      for (var key in value) {\n        return key;\n      }\n    }; // CONCATENATED MODULE: ./src/worker/executors/select/base_select.ts\n\n\n    var setPushResult = function () {\n      var _this = this;\n\n      if (this.query.case) {\n        this.pushResult = function (value) {\n          var columnName;\n\n          _this.thenEvaluator.setCaseAndValue(_this.query.case, value);\n\n          for (columnName in _this.query.case) {\n            value[columnName] = _this.thenEvaluator.setColumn(columnName).evaluate();\n          }\n\n          _this.results.push(value);\n        };\n      } else {\n        this.pushResult = function (value) {\n          _this.results.push(value);\n        };\n      }\n    };\n\n    var setLimitAndSkipEvaluationAtEnd = function () {\n      if (this.query.limit) {\n        this.shouldEvaluateLimitAtEnd = true;\n      }\n\n      if (this.query.skip) {\n        this.shouldEvaluateSkipAtEnd = true;\n      }\n    };\n\n    var removeDuplicates = function () {\n      var datas = this.results; // free results memory\n\n      this.results = null;\n      var key = this.primaryKey();\n      var lookupObject = {};\n\n      for (var i = 0, len = datas.length; i < len; i++) {\n        lookupObject[datas[i][key]] = datas[i];\n      }\n\n      datas = [];\n\n      for (var i in lookupObject) {\n        datas.push(lookupObject[i]);\n      }\n\n      this.results = datas;\n    }; // CONCATENATED MODULE: ./src/worker/executors/select/then_evaluator.ts\n\n\n    var then_evaluator_ThenEvaluator =\n    /** @class */\n    function () {\n      function ThenEvaluator() {}\n\n      ThenEvaluator.prototype.setCaseAndValue = function (caseQuery, value) {\n        this.caseQuery_ = caseQuery;\n        this.setValue(value);\n      };\n\n      ThenEvaluator.prototype.setCaseAndColumn = function (caseQuery, columnName) {\n        this.caseQuery_ = caseQuery;\n        this.setColumn(columnName);\n        return this;\n      };\n\n      ThenEvaluator.prototype.setColumn = function (columnName) {\n        this.columnName_ = columnName;\n        this.caseColumnQuery_ = this.caseQuery_[this.columnName_];\n        this.length_ = this.caseColumnQuery_.length;\n        return this;\n      };\n\n      ThenEvaluator.prototype.setValue = function (value) {\n        this.value = value;\n        return this;\n      };\n\n      ThenEvaluator.prototype.evaluate = function () {\n        for (var i = 0; i < this.length_; i++) {\n          if (this.checkCase_(this.caseColumnQuery_[i]) === true) {\n            return this.caseColumnQuery_[i].then;\n          }\n        }\n\n        var lastThen = this.caseColumnQuery_[this.length_ - 1].then;\n        return lastThen == null ? this.value[this.columnName_] : lastThen;\n      };\n\n      ThenEvaluator.prototype.checkCase_ = function (cond) {\n        var queryOption;\n\n        for (queryOption in cond) {\n          switch (queryOption) {\n            case QUERY_OPTION.GreaterThan:\n              if (this.value[this.columnName_] > cond[queryOption]) {\n                return true;\n              }\n\n              break;\n\n            case QUERY_OPTION.Equal:\n              if (this.value[this.columnName_] === cond[queryOption]) {\n                return true;\n              }\n\n              break;\n\n            case QUERY_OPTION.LessThan:\n              if (this.value[this.columnName_] < cond[queryOption]) {\n                return true;\n              }\n\n              break;\n\n            case QUERY_OPTION.GreaterThanEqualTo:\n              if (this.value[this.columnName_] >= cond[queryOption]) {\n                return true;\n              }\n\n              break;\n\n            case QUERY_OPTION.LessThanEqualTo:\n              if (this.value[this.columnName_] <= cond[queryOption]) {\n                return true;\n              }\n\n              break;\n\n            case QUERY_OPTION.NotEqualTo:\n              if (this.value[this.columnName_] !== cond[queryOption]) {\n                return true;\n              }\n\n              break;\n\n            case QUERY_OPTION.Between:\n              if (this.value[this.columnName_] > cond[queryOption].low && this.value[this.columnName_] < cond[queryOption].high) {\n                return true;\n              }\n\n              break;\n          }\n\n          return false;\n        }\n      };\n\n      return ThenEvaluator;\n    }(); // CONCATENATED MODULE: ./src/worker/executors/select/not_where.ts\n\n\n    var executeWhereUndefinedLogic = function () {\n      var _this = this;\n\n      var cursorRequest;\n\n      if (this.query.order && this.query.order.idbSorting !== false && this.query.order.by) {\n        if (this.objectStore.indexNames.contains(this.query.order.by)) {\n          var orderType = this.query.order.type && this.query.order.type.toLowerCase() === 'desc' ? 'prev' : 'next';\n          this.sorted = true;\n          cursorRequest = this.objectStore.index(this.query.order.by).openCursor(null, orderType);\n        } else {\n          return promiseReject(new log_helper_LogHelper(ERROR_TYPE.ColumnNotExist, {\n            column: this.query.order.by,\n            isOrder: true\n          }));\n        }\n      } else {\n        cursorRequest = this.objectStore.openCursor();\n      }\n\n      var onSuccess = function () {\n        if (_this.shouldEvaluateLimitAtEnd === false && _this.shouldEvaluateSkipAtEnd === false) {\n          if (_this.skipRecord && _this.limitRecord) {\n            return executeSkipAndLimit;\n          } else if (_this.skipRecord) {\n            return executeSkip;\n          } else if (_this.limitRecord) {\n            return executeLimit;\n          }\n        }\n\n        return executeSimple;\n      }();\n\n      return promise(function (res, rej) {\n        cursorRequest.onerror = rej;\n        cursorRequest.onsuccess = onSuccess.call(_this, res);\n      });\n    };\n\n    var executeSkipAndLimit = function (onFinished) {\n      var _this = this;\n\n      var recordSkipped = false,\n          cursor;\n      return function (e) {\n        cursor = e.target.result;\n\n        if (cursor) {\n          if (recordSkipped && _this.results.length !== _this.limitRecord) {\n            _this.pushResult(cursor.value);\n\n            cursor.continue();\n          } else {\n            recordSkipped = true;\n            cursor.advance(_this.skipRecord);\n          }\n        } else {\n          onFinished();\n        }\n      };\n    };\n\n    var executeSkip = function (onFinished) {\n      var _this = this;\n\n      var recordSkipped = false,\n          cursor;\n      return function (e) {\n        cursor = e.target.result;\n\n        if (cursor) {\n          if (recordSkipped) {\n            _this.pushResult(cursor.value);\n\n            cursor.continue();\n          } else {\n            recordSkipped = true;\n            cursor.advance(_this.skipRecord);\n          }\n        } else {\n          onFinished();\n        }\n      };\n    };\n\n    var executeSimple = function (onFinished) {\n      var _this = this;\n\n      var cursor;\n      return function (e) {\n        cursor = e.target.result;\n\n        if (cursor) {\n          _this.pushResult(cursor.value);\n\n          cursor.continue();\n        } else {\n          onFinished();\n        }\n      };\n    };\n\n    var executeLimit = function (onFinished) {\n      var _this = this;\n\n      var cursor;\n      return function (e) {\n        cursor = e.target.result;\n\n        if (cursor && _this.results.length !== _this.limitRecord) {\n          _this.pushResult(cursor.value);\n\n          cursor.continue();\n        } else {\n          onFinished();\n        }\n      };\n    }; // CONCATENATED MODULE: ./src/worker/utils/remove_space.ts\n\n\n    var removeSpace = function (value) {\n      return value.replace(/\\s/g, '');\n    }; // CONCATENATED MODULE: ./src/worker/executors/select/order_by.ts\n\n\n    var processGroupDistinctAggr = function () {\n      if (this.query.distinct) {\n        var groupBy = [];\n        var result = this.results[0];\n\n        for (var key in result) {\n          groupBy.push(key);\n        }\n\n        var primaryKey = this.primaryKey(),\n            index = groupBy.indexOf(primaryKey);\n        groupBy.splice(index, 1);\n        this.query.groupBy = groupBy.length > 0 ? groupBy : null;\n      }\n\n      if (this.query.groupBy) {\n        if (this.query.aggregate) {\n          this.executeAggregateGroupBy();\n        } else {\n          this.processGroupBy();\n        }\n      } else if (this.query.aggregate) {\n        this.processAggregateQry();\n      }\n    };\n\n    var getOrderColumnInfo = function (orderColumn) {\n      var column;\n\n      if (this.query.join == null) {\n        column = this.getColumnInfo(orderColumn);\n      } else {\n        var splittedByDot = removeSpace(orderColumn).split(\".\");\n        orderColumn = splittedByDot[1];\n        column = this.getColumnInfo(orderColumn, splittedByDot[0]);\n      }\n\n      if (column == null) {\n        var valueFromFirstColumn = this.results[0][orderColumn];\n\n        if (valueFromFirstColumn) {\n          return {\n            dataType: getDataType(valueFromFirstColumn),\n            name: orderColumn\n          };\n        }\n\n        throw new log_helper_LogHelper(ERROR_TYPE.ColumnNotExist, {\n          column: orderColumn,\n          isOrder: true\n        });\n      }\n\n      return column;\n    };\n\n    var compareStringInDesc_ = function (a, b) {\n      return b.localeCompare(a);\n    };\n\n    var compareStringinAsc_ = function (a, b) {\n      return a.localeCompare(b);\n    };\n\n    var compareDefaultInDesc_ = function (a, b) {\n      return new String(b).localeCompare(a);\n    };\n\n    var compareDefaultinAsc_ = function (a, b) {\n      return new String(a).localeCompare(b);\n    };\n\n    var compareNumberInDesc_ = function (a, b) {\n      return b - a;\n    };\n\n    var compareNumberinAsc_ = function (a, b) {\n      return a - b;\n    };\n\n    var compareDateInDesc_ = function (a, b) {\n      return b.getTime() - a.getTime();\n    };\n\n    var compareDateInAsc_ = function (a, b) {\n      return a.getTime() - b.getTime();\n    };\n\n    var getValInDesc_ = function (value1, value2, caseQuery) {\n      for (var columnName in caseQuery) {\n        this.thenEvaluator.setCaseAndValue(caseQuery, value1);\n        var column1 = this.thenEvaluator.setColumn(columnName).evaluate();\n        this.thenEvaluator.setCaseAndValue(caseQuery, value2);\n        var column2 = this.thenEvaluator.setColumn(columnName).evaluate();\n\n        switch (typeof value1[column1]) {\n          case DATA_TYPE.String:\n            return compareStringInDesc_(value1[column1], value2[column2]);\n\n          default:\n            return compareNumberInDesc_(value1[column1], value2[column2]);\n        }\n      }\n    };\n\n    var getValInAsc_ = function (value1, value2, caseQuery) {\n      for (var columnName in caseQuery) {\n        this.thenEvaluator.setCaseAndValue(caseQuery, value1);\n        var column1 = this.thenEvaluator.setColumn(columnName).evaluate();\n        this.thenEvaluator.setCaseAndValue(caseQuery, value2);\n        var column2 = this.thenEvaluator.setColumn(columnName).evaluate();\n\n        switch (typeof value1[column1]) {\n          case DATA_TYPE.String:\n            return compareStringinAsc_(value1[column1], value2[column2]);\n\n          default:\n            return compareNumberinAsc_(value1[column1], value2[column2]);\n        }\n      }\n    };\n\n    var getValueComparer_ = function (column, order) {\n      switch (column.dataType) {\n        case DATA_TYPE.String:\n          return order.type === 'asc' ? compareStringinAsc_ : compareStringInDesc_;\n\n        case DATA_TYPE.Number:\n          return order.type === 'asc' ? compareNumberinAsc_ : compareNumberInDesc_;\n\n        case DATA_TYPE.DateTime:\n          return order.type === 'asc' ? compareDateInAsc_ : compareDateInDesc_;\n\n        default:\n          return order.type === 'asc' ? compareDefaultinAsc_ : compareDefaultInDesc_;\n      }\n    };\n\n    var orderBy_ = function (order) {\n      var _a;\n\n      var _this = this;\n\n      order.type = getOrderType_(order.type);\n      var orderColumn = order.by;\n\n      if (orderColumn != null && typeof orderColumn === DATA_TYPE.Object) {\n        if (order.type === \"asc\") {\n          this.results.sort(function (a, b) {\n            return getValInAsc_.call(_this, a, b, orderColumn);\n          });\n        } else {\n          this.results.sort(function (a, b) {\n            return getValInDesc_.call(_this, a, b, orderColumn);\n          });\n        }\n      } else {\n        var columnInfo = getOrderColumnInfo.call(this, orderColumn);\n\n        if (columnInfo != null) {\n          var orderMethod_1 = getValueComparer_(columnInfo, order);\n          orderColumn = columnInfo.name;\n\n          if (order.case == null) {\n            this.results.sort(function (a, b) {\n              return orderMethod_1(a[orderColumn], b[orderColumn]);\n            });\n          } else {\n            this.thenEvaluator.setCaseAndColumn((_a = {}, _a[orderColumn] = order.case, _a), orderColumn);\n            this.results.sort(function (a, b) {\n              return orderMethod_1(_this.thenEvaluator.setValue(a).evaluate(), _this.thenEvaluator.setValue(b).evaluate());\n            });\n          }\n        }\n      }\n    };\n\n    var getOrderType_ = function (type) {\n      return type == null ? 'asc' : type.toLowerCase();\n    };\n\n    var processOrderBy = function () {\n      var order = this.query.order;\n\n      if (order && this.results.length > 0 && !this.sorted) {\n        var orderQueryType = getDataType(order);\n\n        if (orderQueryType === DATA_TYPE.Object) {\n          orderBy_.call(this, order);\n        } else if (orderQueryType === DATA_TYPE.Array) {\n          orderBy_.call(this, order[0]);\n\n          var _loop_1 = function (i, length_1) {\n            // if (this.error == null) {\n            var prevOrderQueryBy = order[i - 1].by;\n            var currentOrderQuery = order[i];\n            var currentorderQueryBy = currentOrderQuery.by;\n            var orderColumnDetail = getOrderColumnInfo.call(this_1, currentorderQueryBy);\n\n            if (orderColumnDetail != null) {\n              currentorderQueryBy = orderColumnDetail.name;\n              currentOrderQuery.type = getOrderType_(currentOrderQuery.type);\n              var orderMethod_2 = getValueComparer_(orderColumnDetail, currentOrderQuery);\n              this_1.results.sort(function (a, b) {\n                if (a[prevOrderQueryBy] === b[prevOrderQueryBy]) {\n                  return orderMethod_2(a[currentorderQueryBy], b[currentorderQueryBy]);\n                }\n\n                return 0;\n              });\n            }\n          };\n\n          var this_1 = this;\n\n          for (var i = 1, length_1 = order.length; i < length_1; i++) {\n            _loop_1(i, length_1);\n          }\n        }\n      }\n    };\n\n    var processAggregateQry = function () {\n      var datas = this.results;\n      var datasLength = datas.length;\n      var results = {};\n      var columnToAggregate; // free results memory\n\n      this.results = undefined;\n\n      var getCount = function () {\n        var result = 0;\n\n        for (var i in datas) {\n          result += datas[i][columnToAggregate] ? 1 : 0;\n        }\n\n        return result;\n      };\n\n      var getMax = function () {\n        var result = 0;\n\n        for (var i in datas) {\n          result = result > datas[i][columnToAggregate] ? result : datas[i][columnToAggregate];\n        }\n\n        return result;\n      };\n\n      var getMin = function () {\n        var result = Infinity,\n            value = Infinity;\n\n        for (var i in datas) {\n          value = datas[i][columnToAggregate] ? datas[i][columnToAggregate] : Infinity;\n          result = result < value ? result : value;\n        }\n\n        return result;\n      };\n\n      var getSum = function () {\n        var result = 0;\n\n        for (var i in datas) {\n          result += datas[i][columnToAggregate];\n        }\n\n        return result;\n      };\n\n      var getAvg = function () {\n        var result = 0;\n\n        for (var i in datas) {\n          result += datas[i][columnToAggregate];\n        }\n\n        return result / datasLength;\n      };\n\n      for (var prop in this.query.aggregate) {\n        var aggregateColumn = this.query.aggregate[prop];\n        var aggregateValType = getDataType(aggregateColumn);\n        var aggregateCalculator = void 0;\n\n        switch (prop) {\n          case 'count':\n            aggregateCalculator = getCount;\n            break;\n\n          case 'max':\n            aggregateCalculator = getMax;\n            break;\n\n          case 'min':\n            aggregateCalculator = getMin;\n            break;\n\n          case 'sum':\n            aggregateCalculator = getSum;\n            break;\n\n          case 'avg':\n            aggregateCalculator = getAvg;\n            break;\n        }\n\n        switch (aggregateValType) {\n          case DATA_TYPE.String:\n            columnToAggregate = aggregateColumn;\n            results[prop + \"(\" + columnToAggregate + \")\"] = aggregateCalculator();\n            break;\n\n          case DATA_TYPE.Array:\n            for (var key in aggregateColumn) {\n              columnToAggregate = aggregateColumn[key];\n              results[prop + \"(\" + columnToAggregate + \")\"] = aggregateCalculator();\n            }\n\n        }\n      } // add results to the first index of result\n\n\n      for (var prop in results) {\n        datas[0][prop] = results[prop];\n      }\n\n      this.results = [datas[0]];\n    }; // CONCATENATED MODULE: ./src/worker/executors/select/group_by.ts\n\n\n    var processGroupBy = function () {\n      var groupBy = this.query.groupBy;\n      var datas = this.results;\n      var lookUpObj = {}; // free results memory\n\n      this.results = this.query.groupBy = null;\n\n      if (getDataType(groupBy) !== DATA_TYPE.Object) {\n        if (getDataType(groupBy) === DATA_TYPE.String) {\n          for (var i in datas) {\n            lookUpObj[datas[i][groupBy]] = datas[i];\n          }\n        } else {\n          var objKey = void 0;\n\n          for (var i in datas) {\n            objKey = \"\";\n\n            for (var column in groupBy) {\n              objKey += datas[i][groupBy[column]];\n            }\n\n            lookUpObj[objKey] = datas[i];\n          }\n        }\n      } else {\n        var caseQueryLength = Object.keys(groupBy).length;\n\n        if (caseQueryLength === 1) {\n          var groupByColumn = getObjectFirstKey(groupBy);\n          this.thenEvaluator.setCaseAndColumn(groupBy, groupByColumn);\n\n          for (var i in datas) {\n            lookUpObj[this.thenEvaluator.setValue(datas[i]).evaluate()] = datas[i];\n          }\n        } else {\n          var objKey = void 0;\n\n          for (var i in datas) {\n            objKey = \"\";\n            this.thenEvaluator.setCaseAndValue(groupBy, datas[i]);\n\n            for (var column in groupBy) {\n              objKey += this.thenEvaluator.setColumn(column).evaluate();\n            }\n\n            lookUpObj[objKey] = datas[i];\n          }\n        }\n      } // free datas memory\n\n\n      datas = [];\n\n      for (var i in lookUpObj) {\n        datas.push(lookUpObj[i]);\n      }\n\n      this.results = datas;\n    };\n\n    var executeAggregateGroupBy = function () {\n      var grpQry = this.query.groupBy;\n      var datas = this.results; // free results memory\n\n      this.results = undefined;\n      var lookUpObj = {}; // assign aggregate\n\n      var aggregateQry = this.query.aggregate;\n      var index;\n      var objKey;\n      var value;\n      var columnToAggregate;\n\n      var calculateAggregate = function () {\n        var getCount = function () {\n          value = lookUpObj[objKey]; // get old value\n\n          value = value ? value[\"count(\" + columnToAggregate + \")\"] : 0; // add with old value if data exist\n\n          value += datas[index][columnToAggregate] ? 1 : 0;\n          return value;\n        };\n\n        var getMax = function () {\n          value = lookUpObj[objKey]; // get old value\n\n          value = value ? value[\"max(\" + columnToAggregate + \")\"] : 0;\n          datas[index][columnToAggregate] = datas[index][columnToAggregate] ? datas[index][columnToAggregate] : 0; // compare between old value and new value\n\n          return value > datas[index][columnToAggregate] ? value : datas[index][columnToAggregate];\n        };\n\n        var getMin = function () {\n          value = lookUpObj[objKey]; // get old value\n\n          value = value ? value[\"min(\" + columnToAggregate + \")\"] : Infinity;\n          datas[index][columnToAggregate] = datas[index][columnToAggregate] ? datas[index][columnToAggregate] : Infinity; // compare between old value and new value\n\n          return value < datas[index][columnToAggregate] ? value : datas[index][columnToAggregate];\n        };\n\n        var getSum = function () {\n          value = lookUpObj[objKey]; // get old value\n\n          value = value ? value[\"sum(\" + columnToAggregate + \")\"] : 0; // add with old value if data exist\n\n          value += datas[index][columnToAggregate] ? datas[index][columnToAggregate] : 0;\n          return value;\n        };\n\n        var getAvg = function () {\n          value = lookUpObj[objKey]; // get old sum value\n\n          var sumOfColumn = value ? value[\"sum(\" + columnToAggregate + \")\"] : 0; // add with old value if data exist\n\n          sumOfColumn += datas[index][columnToAggregate] ? datas[index][columnToAggregate] : 0;\n          datas[index][\"sum(\" + columnToAggregate + \")\"] = sumOfColumn; // get old count value\n\n          value = value ? value[\"count(\" + columnToAggregate + \")\"] : 0; // add with old value if data exist\n\n          value += datas[index][columnToAggregate] ? 1 : 0;\n          datas[index][\"count(\" + columnToAggregate + \")\"] = value;\n        };\n\n        for (var prop in aggregateQry) {\n          var aggregateColumn = aggregateQry[prop];\n          var aggregateValType = getDataType(aggregateColumn);\n          var aggregateCalculator = void 0;\n\n          switch (prop) {\n            case QUERY_OPTION.Count:\n              aggregateCalculator = getCount;\n              break;\n\n            case QUERY_OPTION.Max:\n              aggregateCalculator = getMax;\n              break;\n\n            case QUERY_OPTION.Min:\n              aggregateCalculator = getMin;\n              break;\n\n            case QUERY_OPTION.Sum:\n              aggregateCalculator = getSum;\n              break;\n\n            case QUERY_OPTION.Avg:\n              aggregateCalculator = getAvg;\n              break;\n          }\n\n          switch (aggregateValType) {\n            case DATA_TYPE.String:\n              columnToAggregate = aggregateColumn;\n              datas[index][prop + \"(\" + columnToAggregate + \")\"] = aggregateCalculator();\n              break;\n\n            case DATA_TYPE.Array:\n              for (var item in aggregateColumn) {\n                columnToAggregate = aggregateColumn[item];\n                datas[index][prop + \"(\" + columnToAggregate + \")\"] = aggregateCalculator();\n              }\n\n          }\n        }\n      };\n\n      if (getDataType(grpQry) === DATA_TYPE.String) {\n        for (index in datas) {\n          objKey = datas[index][grpQry];\n          calculateAggregate();\n          lookUpObj[objKey] = datas[index];\n        }\n      } else {\n        for (index in datas) {\n          objKey = \"\";\n\n          for (var column in grpQry) {\n            objKey += datas[index][grpQry[column]];\n          }\n\n          calculateAggregate();\n          lookUpObj[objKey] = datas[index];\n        }\n      } // free datas memory\n\n\n      datas = [];\n\n      for (var i in lookUpObj) {\n        datas.push(lookUpObj[i]);\n      } // Checking for avg and if exist then fill the datas;\n\n\n      if (aggregateQry.avg) {\n        if (getDataType(aggregateQry.avg) === DATA_TYPE.String) {\n          for (index in datas) {\n            var sumForAvg = datas[index][\"sum(\" + aggregateQry.avg + \")\"],\n                countForAvg = datas[index][\"count(\" + aggregateQry.avg + \")\"];\n            datas[index][\"avg(\" + aggregateQry.avg + \")\"] = sumForAvg / countForAvg;\n\n            if (aggregateQry.count !== aggregateQry.avg) {\n              delete datas[index][\"count(\" + aggregateQry.avg + \")\"];\n            }\n\n            if (aggregateQry.sum !== aggregateQry.avg) {\n              delete datas[index][\"sum(\" + aggregateQry.avg + \")\"];\n            }\n          }\n        } else {\n          var isCountTypeString = getDataType(aggregateQry.count) === DATA_TYPE.String;\n          var isSumTypeString = getDataType(aggregateQry.sum) === DATA_TYPE.String;\n\n          for (index in datas) {\n            for (var column in aggregateQry.avg) {\n              var avgColumn = aggregateQry.avg[column],\n                  sum = datas[index][\"sum(\" + avgColumn + \")\"],\n                  count = datas[index][\"count(\" + avgColumn + \")\"];\n              datas[index][\"avg(\" + avgColumn + \")\"] = sum / count;\n\n              if (isCountTypeString) {\n                if (aggregateQry.count !== avgColumn) {\n                  delete datas[index][\"count(\" + avgColumn + \")\"];\n                } else if (aggregateQry.count.indexOf(avgColumn) === -1) {\n                  delete datas[index][\"count(\" + avgColumn + \")\"];\n                }\n              }\n\n              if (isSumTypeString) {\n                if (aggregateQry.sum !== avgColumn) {\n                  delete datas[index][\"sum(\" + avgColumn + \")\"];\n                } else if (aggregateQry.sum.indexOf(avgColumn) === -1) {\n                  delete datas[index][\"sum(\" + avgColumn + \")\"];\n                }\n              }\n            }\n          }\n        }\n      }\n\n      this.results = datas;\n    }; // CONCATENATED MODULE: ./src/worker/executors/select/where.ts\n\n\n    var executeWhereLogic = function (column, value, op, dir) {\n      var _this = this;\n\n      value = op ? value[op] : value;\n      var cursorRequest = this.objectStore.index(column).openCursor(this.util.keyRange(value, op), dir);\n\n      var onSuccess = function () {\n        if (_this.shouldEvaluateLimitAtEnd === false && _this.shouldEvaluateSkipAtEnd === false) {\n          if (_this.skipRecord && _this.limitRecord) {\n            return executeSkipAndLimitForWhere_;\n          } else if (_this.skipRecord) {\n            return executeSkipForWhere_;\n          } else if (_this.limitRecord) {\n            return executeLimitForWhere_;\n          }\n        }\n\n        return executeSimpleForWhere_;\n      }();\n\n      return promise(function (res, rej) {\n        cursorRequest.onerror = rej;\n        cursorRequest.onsuccess = onSuccess.call(_this, res);\n      });\n    };\n\n    var executeSkipAndLimitForWhere_ = function (onFinish) {\n      var _this = this;\n\n      var recordSkipped = false;\n      return function (e) {\n        var cursor = e.target.result;\n\n        if (cursor) {\n          if (recordSkipped && _this.results.length !== _this.limitRecord) {\n            var value = cursor.value;\n\n            if (_this.shouldAddValue(value)) {\n              _this.pushResult(value);\n            }\n\n            cursor.continue();\n          } else {\n            recordSkipped = true;\n            cursor.advance(_this.skipRecord);\n          }\n        } else {\n          onFinish();\n        }\n      };\n    };\n\n    var executeSkipForWhere_ = function (onFinish) {\n      var _this = this;\n\n      var recordSkipped = false;\n      return function (e) {\n        var cursor = e.target.result;\n\n        if (cursor) {\n          if (recordSkipped) {\n            var value = cursor.value;\n\n            if (_this.shouldAddValue(value)) {\n              _this.pushResult(value);\n            }\n\n            cursor.continue();\n          } else {\n            recordSkipped = true;\n            cursor.advance(_this.skipRecord);\n          }\n        } else {\n          onFinish();\n        }\n      };\n    };\n\n    var executeLimitForWhere_ = function (onFinish) {\n      var _this = this;\n\n      return function (e) {\n        var cursor = e.target.result;\n\n        if (cursor && _this.results.length !== _this.limitRecord) {\n          var value = cursor.value;\n\n          if (_this.shouldAddValue(value)) {\n            _this.pushResult(value);\n          }\n\n          cursor.continue();\n        } else {\n          onFinish();\n        }\n      };\n    };\n\n    var executeSimpleForWhere_ = function (onFinish) {\n      var _this = this;\n\n      return function (e) {\n        var cursor = e.target.result;\n\n        if (cursor) {\n          var value = cursor.value;\n\n          if (_this.shouldAddValue(value)) {\n            _this.pushResult(value);\n          }\n\n          cursor.continue();\n        } else {\n          onFinish();\n        }\n      };\n    }; // CONCATENATED MODULE: ./src/worker/utils/get_regex_from_like.ts\n\n\n    var getRegexFromLikeExpression = function (likeExpression) {\n      var filterValues = likeExpression.split('%');\n      var filterValue;\n      var occurence;\n\n      if (filterValues[1]) {\n        filterValue = filterValues[1];\n        occurence = filterValues.length > 2 ? OCCURENCE.Any : OCCURENCE.Last;\n      } else {\n        filterValue = filterValues[0];\n        occurence = OCCURENCE.First;\n      }\n\n      switch (occurence) {\n        case OCCURENCE.First:\n          return new RegExp(\"^\" + filterValue, 'i');\n\n        case OCCURENCE.Last:\n          return new RegExp(filterValue + \"$\", 'i');\n\n        default:\n          return new RegExp(\"\" + filterValue, 'i');\n      }\n    }; // CONCATENATED MODULE: ./src/worker/utils/clone.ts\n\n\n    var clone_isObject = function (value) {\n      return getDataType(value) === 'object' && !(value instanceof RegExp);\n    };\n\n    var clone = function (obj) {\n      if (clone_isObject(obj)) {\n        var copy = {};\n\n        for (var i in obj) {\n          copy[i] = obj[i] != null && clone_isObject(obj[i]) ? clone(obj[i]) : obj[i];\n        }\n\n        return copy;\n      }\n\n      return obj;\n    }; // CONCATENATED MODULE: ./src/worker/utils/compare.ts\n\n\n    var compare = function (value, compareValue, symbol) {\n      var type1 = getDataType(value);\n      var type2 = getDataType(compareValue);\n      if (type1 !== type2) return false;\n\n      if (type1 === DATA_TYPE.DateTime) {\n        value = value.getTime();\n        compareValue = compareValue.getTime();\n      }\n\n      switch (symbol) {\n        // greater than\n        case QUERY_OPTION.GreaterThan:\n          return value > compareValue;\n        // less than\n\n        case QUERY_OPTION.LessThan:\n          return value < compareValue;\n        // less than equal\n\n        case QUERY_OPTION.LessThanEqualTo:\n          return value <= compareValue;\n        // greather than equal\n\n        case QUERY_OPTION.GreaterThanEqualTo:\n          return value >= compareValue;\n        // Not equal to\n\n        case QUERY_OPTION.NotEqualTo:\n          return value !== compareValue;\n\n        default:\n          return value === compareValue;\n      }\n    }; // CONCATENATED MODULE: ./src/worker/executors/where_checker.ts\n\n    /**\n     * For matching the different column value existance for where option\n     *\n     * @export\n     * @class WhereChecker\n     */\n\n\n    var where_checker_WhereChecker =\n    /** @class */\n    function () {\n      function WhereChecker(where, checkFlag) {\n        this.where = clone(where);\n        this.checkFlag = checkFlag;\n      }\n\n      WhereChecker.prototype.remove = function (props) {\n        var last = props.pop();\n        var value = props.reduce(function (prev, curr) {\n          return prev && prev[curr];\n        }, this.where);\n        delete value[last];\n      };\n\n      WhereChecker.prototype.check = function (rowValue) {\n        var status = true;\n        if (!this.checkFlag) return status;\n\n        for (var columnName in this.where) {\n          if (!status) {\n            return status;\n          }\n\n          var whereColumnValue = this.where[columnName];\n          var columnValue = rowValue[columnName];\n\n          if (getDataType(whereColumnValue) === \"object\") {\n            for (var key in whereColumnValue) {\n              if (!status) {\n                return status;\n              }\n\n              switch (key) {\n                case QUERY_OPTION.In:\n                  status = this.checkIn(columnName, columnValue);\n                  break;\n\n                case QUERY_OPTION.Like:\n                  status = this.checkLike_(columnName, columnValue);\n                  break;\n\n                case QUERY_OPTION.Regex:\n                  status = this.checkRegex(columnName, columnValue);\n                  break;\n\n                case QUERY_OPTION.Between:\n                case QUERY_OPTION.GreaterThan:\n                case QUERY_OPTION.LessThan:\n                case QUERY_OPTION.GreaterThanEqualTo:\n                case QUERY_OPTION.LessThanEqualTo:\n                case QUERY_OPTION.NotEqualTo:\n                  status = this.checkComparisionOp_(columnName, columnValue, key);\n                  break;\n\n                default:\n                  status = false;\n              }\n            }\n          } else {\n            status = compare(whereColumnValue, columnValue);\n          }\n        }\n\n        return status;\n      };\n\n      WhereChecker.prototype.checkIn = function (column, value) {\n        return this.where[column][QUERY_OPTION.In].find(function (q) {\n          return compare(q, value);\n        }) != null;\n      };\n\n      WhereChecker.prototype.checkLike_ = function (column, value) {\n        return getRegexFromLikeExpression(this.where[column][QUERY_OPTION.Like]).test(value);\n      };\n\n      WhereChecker.prototype.checkRegex = function (column, value) {\n        return this.where[column][QUERY_OPTION.Regex].test(value);\n      };\n\n      WhereChecker.prototype.checkComparisionOp_ = function (column, value, symbol) {\n        var compareValue = this.where[column][symbol];\n\n        if (symbol != QUERY_OPTION.Between) {\n          return compare(value, compareValue, symbol);\n        }\n\n        return compare(value, compareValue.low, '>=') && compare(value, compareValue.high, '<=');\n      };\n\n      return WhereChecker;\n    }(); // CONCATENATED MODULE: ./src/worker/executors/base_fetch.ts\n\n\n    var base_fetch_extends = undefined && undefined.__extends || function () {\n      var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n        };\n\n        return extendStatics(d, b);\n      };\n\n      return function (d, b) {\n        if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n\n        function __() {\n          this.constructor = d;\n        }\n\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n\n    var base_fetch_BaseFetch =\n    /** @class */\n    function (_super) {\n      base_fetch_extends(BaseFetch, _super);\n\n      function BaseFetch() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n\n        _this.shouldEvaluateLimitAtEnd = false;\n        _this.shouldEvaluateSkipAtEnd = false;\n        return _this;\n      }\n\n      BaseFetch.prototype.goToWhereLogic = function () {\n        var query = this.query;\n        var firstColumn = getObjectFirstKey(query.where);\n\n        if (this.objectStore.indexNames.contains(firstColumn)) {\n          var value = query.where[firstColumn];\n\n          if (getDataType(value) === 'object') {\n            var checkFlag = getLength(value) > 1 || getLength(query.where) > 1;\n            this.whereCheckerInstance = new where_checker_WhereChecker(query.where, checkFlag);\n            var key = getObjectFirstKey(value);\n            this.whereCheckerInstance.remove([firstColumn, key]);\n\n            switch (key) {\n              case QUERY_OPTION.Like:\n                {\n                  var regexVal = getRegexFromLikeExpression(value[QUERY_OPTION.Like]);\n                  return this.executeRegexLogic(firstColumn, regexVal);\n                }\n\n              case QUERY_OPTION.Regex:\n                return this.executeRegexLogic(firstColumn, value[QUERY_OPTION.Regex]);\n\n              case QUERY_OPTION.In:\n                return this.executeInLogic(firstColumn, value[QUERY_OPTION.In]);\n\n              case QUERY_OPTION.Between:\n              case QUERY_OPTION.GreaterThan:\n              case QUERY_OPTION.LessThan:\n              case QUERY_OPTION.GreaterThanEqualTo:\n              case QUERY_OPTION.LessThanEqualTo:\n                return this.executeWhereLogic(firstColumn, value, key, \"next\");\n\n              case QUERY_OPTION.Aggregate:\n                break;\n\n              default:\n                return this.executeWhereLogic(firstColumn, value, null, \"next\");\n            }\n          } else {\n            var checkFlag = getLength(query.where) > 1;\n            this.whereCheckerInstance = new where_checker_WhereChecker(query.where, checkFlag);\n            this.whereCheckerInstance.remove([firstColumn]);\n            return this.executeWhereLogic(firstColumn, value, null, \"next\");\n          }\n        } else {\n          var column = this.getColumnInfo(firstColumn);\n          var error = column == null ? new log_helper_LogHelper(ERROR_TYPE.ColumnNotExist, {\n            column: firstColumn\n          }) : new log_helper_LogHelper(ERROR_TYPE.EnableSearchOff, {\n            column: firstColumn\n          });\n          return promiseReject(error);\n        }\n      };\n\n      return BaseFetch;\n    }(base_Base); // CONCATENATED MODULE: ./src/worker/executors/select/in.ts\n\n\n    var executeInLogic = function (column, values) {\n      var _this = this;\n\n      var skip = this.skipRecord;\n\n      var skipOrPush = function (val) {\n        if (skip === 0) {\n          _this.pushResult(val);\n        } else {\n          --skip;\n        }\n      };\n\n      var onSuccess = function () {\n        if (_this.shouldEvaluateLimitAtEnd === false && _this.shouldEvaluateSkipAtEnd === false) {\n          if (_this.skipRecord && _this.limitRecord) {\n            return executeSkipAndLimitForIn_;\n          } else if (_this.skipRecord) {\n            return executeSkipForIn_;\n          } else if (_this.limitRecord) {\n            return executeLimitForIn_;\n          }\n        }\n\n        return executeSimpleForIn_;\n      }();\n\n      var columnStore = this.objectStore.index(column);\n\n      var runInLogic = function (value) {\n        return promise(function (res, rej) {\n          var cursorRequest = columnStore.openCursor(_this.util.keyRange(value));\n          cursorRequest.onsuccess = onSuccess.call(_this, res, skipOrPush);\n          cursorRequest.onerror = rej;\n        });\n      };\n\n      return promiseAll(values.map(function (val) {\n        return runInLogic(val);\n      }));\n    };\n\n    var executeSkipAndLimitForIn_ = function (onFinish, skipOrPush) {\n      var _this = this;\n\n      return function (e) {\n        var cursor = e.target.result;\n\n        if (_this.results.length !== _this.limitRecord && cursor) {\n          var value = cursor.value;\n\n          if (_this.shouldAddValue(value)) {\n            skipOrPush(value);\n          }\n\n          cursor.continue();\n        } else {\n          onFinish();\n        }\n      };\n    };\n\n    var executeSkipForIn_ = function (onFinish, skipOrPush) {\n      var _this = this;\n\n      return function (e) {\n        var cursor = e.target.result;\n\n        if (cursor) {\n          var value = cursor.value;\n\n          if (_this.shouldAddValue(value)) {\n            skipOrPush(value);\n          }\n\n          cursor.continue();\n        } else {\n          onFinish();\n        }\n      };\n    };\n\n    var executeLimitForIn_ = function (onFinish) {\n      var _this = this;\n\n      return function (e) {\n        var cursor = e.target.result;\n\n        if (cursor && _this.results.length !== _this.limitRecord) {\n          var value = cursor.value;\n\n          if (_this.shouldAddValue(value)) {\n            _this.pushResult(cursor.value);\n          }\n\n          cursor.continue();\n        } else {\n          onFinish();\n        }\n      };\n    };\n\n    var executeSimpleForIn_ = function (onFinish) {\n      var _this = this;\n\n      return function (e) {\n        var cursor = e.target.result;\n\n        if (cursor) {\n          var value = cursor.value;\n\n          if (_this.shouldAddValue(value)) {\n            _this.pushResult(value);\n          }\n\n          cursor.continue();\n        } else {\n          onFinish();\n        }\n      };\n    }; // CONCATENATED MODULE: ./src/worker/executors/select/regex.ts\n\n\n    var executeRegexLogic = function (column, exp) {\n      var _this = this;\n\n      var skip = this.skipRecord;\n\n      var skipOrPush = function (val) {\n        if (skip === 0) {\n          _this.pushResult(val);\n        } else {\n          --skip;\n        }\n      };\n\n      this.shouldAddValue = function (cursor) {\n        return exp.test(cursor.key) && _this.whereCheckerInstance.check(cursor.value);\n      };\n\n      var cursorRequest = this.objectStore.index(column).openCursor();\n\n      var onSuccess = function () {\n        if (_this.shouldEvaluateLimitAtEnd === false && _this.shouldEvaluateSkipAtEnd === false) {\n          if (_this.skipRecord && _this.limitRecord) {\n            return executeSkipAndLimitForRegex_;\n          } else if (_this.skipRecord) {\n            return executeSkipForRegex_;\n          } else if (_this.limitRecord) {\n            return executeLimitForRegex_;\n          }\n        }\n\n        return executeSimpleForRegex_;\n      }();\n\n      return promise(function (res, rej) {\n        cursorRequest.onerror = rej;\n        cursorRequest.onsuccess = onSuccess.call(_this, res, skipOrPush);\n      });\n    };\n\n    var executeSkipAndLimitForRegex_ = function (onFinish, skipOrPush) {\n      var _this = this;\n\n      return function (e) {\n        var cursor = e.target.result;\n\n        if (_this.results.length !== _this.limitRecord && cursor) {\n          if (_this.shouldAddValue(cursor)) {\n            skipOrPush(cursor.value);\n          }\n\n          cursor.continue();\n        } else {\n          onFinish();\n        }\n      };\n    };\n\n    var executeSkipForRegex_ = function (onFinish, skipOrPush) {\n      var _this = this;\n\n      return function (e) {\n        var cursor = e.target.result;\n\n        if (cursor) {\n          if (_this.shouldAddValue(cursor)) {\n            skipOrPush(cursor.value);\n          }\n\n          cursor.continue();\n        } else {\n          onFinish();\n        }\n      };\n    };\n\n    var executeLimitForRegex_ = function (onFinish) {\n      var _this = this;\n\n      return function (e) {\n        var cursor = e.target.result;\n\n        if (_this.results.length !== _this.limitRecord && cursor) {\n          if (_this.shouldAddValue(cursor)) {\n            _this.pushResult(cursor.value);\n          }\n\n          cursor.continue();\n        } else {\n          onFinish();\n        }\n      };\n    };\n\n    var executeSimpleForRegex_ = function (onFinish) {\n      var _this = this;\n\n      return function (e) {\n        var cursor = e.target.result;\n\n        if (cursor) {\n          if (_this.shouldAddValue(cursor)) {\n            _this.pushResult(cursor.value);\n          }\n\n          cursor.continue();\n        } else {\n          onFinish();\n        }\n      };\n    }; // CONCATENATED MODULE: ./src/worker/executors/select/join.ts\n\n\n    var __assign = undefined && undefined.__assign || function () {\n      __assign = Object.assign || function (t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n\n        return t;\n      };\n\n      return __assign.apply(this, arguments);\n    };\n\n    var executeJoinQuery = function () {\n      return new join_Join(this).execute();\n    };\n\n    var join_Join =\n    /** @class */\n    function () {\n      function Join(select) {\n        this.joinQueryStack_ = [];\n        this.currentQueryStackIndex_ = 0;\n        this.tablesFetched = [];\n        this.results = [];\n        this.select = select;\n      }\n\n      Object.defineProperty(Join.prototype, \"query\", {\n        get: function () {\n          return this.select.query;\n        },\n        enumerable: false,\n        configurable: true\n      });\n\n      Join.prototype.getTable = function (name) {\n        return this.select.table(name);\n      };\n\n      Join.prototype.executeSelect = function (query) {\n        // this.select.util.emptyTx();\n        return new select_Select(query, this.select.util).execute();\n      };\n\n      Join.prototype.execute = function () {\n        var _this = this;\n\n        var query = this.query;\n        this.joinQueryStack_ = getDataType(query.join) === DATA_TYPE.Object ? [query.join] : query.join; // get the data for first table\n\n        var tableName = query.from;\n        var tablesToFetch = [tableName];\n\n        for (var i = 0, length_1 = this.joinQueryStack_.length; i < length_1; i++) {\n          var item = this.joinQueryStack_[i];\n          var jointblInfo = this.getJoinTableInfo_(item.on); // table 1 is fetched & table2 needs to be fetched for join\n\n          if (item.with === jointblInfo.table1.table) {\n            jointblInfo = {\n              table1: jointblInfo.table2,\n              table2: jointblInfo.table1\n            };\n          }\n\n          var err = this.checkJoinQuery_(jointblInfo, item);\n\n          if (err) {\n            return promiseReject(err);\n          }\n\n          this.joinQueryStack_[i].joinTableInfo = jointblInfo;\n          tablesToFetch.push(item.with);\n        }\n\n        if (!this.select.isTxQuery) {\n          this.select.util.createTransaction(tablesToFetch);\n        }\n\n        return this.executeSelect({\n          from: tableName,\n          where: query.where,\n          case: query.case,\n          flatten: query.flatten\n        }).then(function (results) {\n          _this.results = results.map(function (item) {\n            var _a;\n\n            return _a = {}, _a[_this.currentQueryStackIndex_] = item, _a;\n          });\n\n          _this.tablesFetched.push(tableName);\n\n          return _this.startExecutingJoinLogic_();\n        });\n      };\n\n      Join.prototype.onJoinQueryFinished_ = function () {\n        var _this = this; // const query = this.query;\n\n\n        if (this.results.length > 0) {\n          try {\n            var results_1 = [];\n            var tables = Object.keys(this.results[0]);\n            var tablesLength_1 = tables.length;\n\n            var mapWithAlias_1 = function (query, value) {\n              if (query.as != null) {\n                for (var key in query.as) {\n                  if (value[query.as[key]] === undefined) {\n                    value[query.as[key]] = value[key];\n                    delete value[key];\n                  }\n                }\n              }\n\n              return value;\n            };\n\n            this.results.forEach(function (result) {\n              var data = result[\"0\"]; // first table data\n\n              for (var i = 1; i < tablesLength_1; i++) {\n                var query = _this.joinQueryStack_[i - 1];\n                data = __assign(__assign({}, data), mapWithAlias_1(query, result[i]));\n              }\n\n              results_1.push(data);\n            });\n            this.select['results'] = results_1;\n            this.select.setLimitAndSkipEvaluationAtEnd_();\n            this.select.query.flatten = null;\n\n            if (true) {\n              try {\n                this.select.processOrderBy();\n              } catch (ex) {\n                return promiseReject(new log_helper_LogHelper(ERROR_TYPE.InvalidOrderQuery, ex.message));\n              }\n            } else {}\n\n            if (true) {\n              try {\n                this.select.processGroupDistinctAggr();\n              } catch (ex) {\n                return promiseReject(new log_helper_LogHelper(ERROR_TYPE.InvalidGroupQuery, ex.message));\n              }\n            } else {}\n          } catch (ex) {\n            return promiseReject(new log_helper_LogHelper(ERROR_TYPE.InvalidJoinQuery, ex.message));\n          }\n        }\n\n        return;\n      };\n\n      Join.prototype.startExecutingJoinLogic_ = function () {\n        var _this = this;\n\n        var joinQuery = this.joinQueryStack_[this.currentQueryStackIndex_];\n\n        if (joinQuery) {\n          try {\n            var jointblInfo_1 = joinQuery.joinTableInfo;\n            return this.executeSelect({\n              from: joinQuery.with,\n              where: joinQuery.where,\n              case: joinQuery.case,\n              flatten: joinQuery.flatten\n            }).then(function (results) {\n              _this.jointables(joinQuery.type, jointblInfo_1, results);\n\n              _this.tablesFetched.push(jointblInfo_1.table2.table);\n\n              ++_this.currentQueryStackIndex_;\n              return _this.startExecutingJoinLogic_();\n            });\n          } catch (ex) {\n            return promiseReject(new log_helper_LogHelper(ERROR_TYPE.InvalidJoinQuery, ex.message));\n          }\n        } else {\n          return this.onJoinQueryFinished_();\n        }\n      };\n\n      Join.prototype.jointables = function (joinType, jointblInfo, secondtableData) {\n        var _this = this;\n\n        var results = [];\n        var column1 = jointblInfo.table1.column;\n        var column2 = jointblInfo.table2.column;\n        var table1Index = this.tablesFetched.indexOf(jointblInfo.table1.table);\n        var table2Index = this.currentQueryStackIndex_ + 1;\n\n        var performInnerJoin = function () {\n          var index = 0;\n\n          _this.results.forEach(function (valueFromFirstTable) {\n            secondtableData.forEach(function (valueFromSecondTable) {\n              if (valueFromFirstTable[table1Index][column1] === valueFromSecondTable[column2]) {\n                results[index] = __assign({}, valueFromFirstTable);\n                results[index++][table2Index] = valueFromSecondTable;\n              }\n            });\n          });\n        };\n\n        var performleftJoin = function () {\n          var index = 0;\n          var valueMatchedFromSecondTable;\n          var callBack;\n          var columnDefaultValue = {};\n\n          _this.getTable(jointblInfo.table2.table).columns.forEach(function (col) {\n            columnDefaultValue[col.name] = null;\n          });\n\n          _this.results.forEach(function (valueFromFirstTable) {\n            valueMatchedFromSecondTable = [];\n\n            if (table2Index === 1) {\n              callBack = function (valueFromSecondTable) {\n                if (valueFromFirstTable[table1Index][column1] === valueFromSecondTable[column2]) {\n                  valueMatchedFromSecondTable.push(valueFromSecondTable);\n                }\n              };\n            } else {\n              callBack = function (valueFromSecondTable) {\n                var value = valueFromFirstTable[table1Index];\n\n                if (value != null && value[column1] === valueFromSecondTable[column2]) {\n                  valueMatchedFromSecondTable.push(valueFromSecondTable);\n                }\n              };\n            }\n\n            secondtableData.forEach(callBack);\n\n            if (valueMatchedFromSecondTable.length === 0) {\n              valueMatchedFromSecondTable = [columnDefaultValue];\n            }\n\n            valueMatchedFromSecondTable.forEach(function (value) {\n              results[index] = __assign({}, valueFromFirstTable);\n              results[index++][table2Index] = value;\n            });\n          });\n        };\n\n        switch (joinType) {\n          case \"left\":\n            performleftJoin();\n            break;\n\n          default:\n            performInnerJoin();\n        }\n\n        this.results = results;\n      };\n\n      Join.prototype.getJoinTableInfo_ = function (joinOn) {\n        joinOn = removeSpace(joinOn);\n        var splittedjoinOn = joinOn.split(\"=\");\n        var splittedjoinOnbydotFirst = splittedjoinOn[0].split(\".\");\n        var splittedjoinOnbydotSecond = splittedjoinOn[1].split(\".\");\n        var info = {\n          table1: {\n            table: splittedjoinOnbydotFirst[0],\n            column: splittedjoinOnbydotFirst[1]\n          },\n          table2: {\n            table: splittedjoinOnbydotSecond[0],\n            column: splittedjoinOnbydotSecond[1]\n          }\n        };\n        return info;\n      };\n\n      Join.prototype.checkJoinQuery_ = function (jointblInfo, qry) {\n        var table1 = jointblInfo.table1;\n        var table2 = jointblInfo.table2;\n        var tableSchemaOf1stTable = this.getTable(table1.table);\n        var tableSchemaOf2ndTable = this.getTable(table2.table);\n        var err; // check on info & with info \n\n        if (qry.with !== table2.table) {\n          err = new log_helper_LogHelper(ERROR_TYPE.InvalidJoinQuery, \"on value should contains value of with\");\n        } // check for column existance\n\n\n        if (tableSchemaOf1stTable.columns.find(function (q) {\n          return q.name === table1.column;\n        }) == null) {\n          err = new log_helper_LogHelper(ERROR_TYPE.InvalidJoinQuery, \"column \" + table1.column + \" does not exist in table \" + table1.table);\n        } else if (tableSchemaOf2ndTable.columns.find(function (q) {\n          return q.name === table2.column;\n        }) == null) {\n          err = new log_helper_LogHelper(ERROR_TYPE.InvalidJoinQuery, \"column \" + table2.column + \" does not exist in table \" + table2.table);\n        } // check for column match in both table\n\n\n        if (qry.as == null) {\n          qry.as = {};\n        }\n\n        tableSchemaOf1stTable.columns.every(function (column) {\n          var columnFound = tableSchemaOf2ndTable.columns.find(function (q) {\n            return q.name === column.name && q.name !== table1.column;\n          });\n\n          if (columnFound != null && qry.as[columnFound.name] == null) {\n            err = new log_helper_LogHelper(ERROR_TYPE.InvalidJoinQuery, \"column \" + column.name + \" exist in both table \" + table1.table + \" & \" + table2.table);\n            return false;\n          }\n\n          return true;\n        });\n        return err;\n      };\n\n      return Join;\n    }(); // CONCATENATED MODULE: ./src/worker/executors/select/index.ts\n\n\n    var select_extends = undefined && undefined.__extends || function () {\n      var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n        };\n\n        return extendStatics(d, b);\n      };\n\n      return function (d, b) {\n        if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n\n        function __() {\n          this.constructor = d;\n        }\n\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n\n    var select_assign = undefined && undefined.__assign || function () {\n      select_assign = Object.assign || function (t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n\n        return t;\n      };\n\n      return select_assign.apply(this, arguments);\n    };\n\n    var __spreadArray = undefined && undefined.__spreadArray || function (to, from) {\n      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n      return to;\n    };\n\n    var select_Select =\n    /** @class */\n    function (_super) {\n      select_extends(Select, _super);\n\n      function Select(query, util) {\n        var _this = _super.call(this) || this;\n\n        _this.sorted = false;\n        _this.isSubQuery = false;\n        _this.thenEvaluator = new then_evaluator_ThenEvaluator();\n\n        _this.returnResult_ = function () {\n          if (_this.results.length > 0) {\n            if (_this.query.flatten) {\n              var flattendData_1 = [];\n              var indexToDelete_1 = {};\n\n              _this.query.flatten.forEach(function (column) {\n                _this.results.forEach(function (data, i) {\n                  data[column].forEach(function (item) {\n                    var _a;\n\n                    flattendData_1.push(select_assign(select_assign({}, data), (_a = {}, _a[column] = item, _a)));\n                  });\n                  indexToDelete_1[i] = true;\n                });\n              });\n\n              var itemsDeleted_1 = 0;\n              getKeys(indexToDelete_1).forEach(function (key) {\n                _this.results.splice(Number(key) - itemsDeleted_1, 1);\n\n                ++itemsDeleted_1;\n              });\n              _this.results = _this.results.concat(flattendData_1);\n            }\n\n            _this.processGroupDistinctAggr();\n\n            _this.processOrderBy();\n\n            if (_this.shouldEvaluateSkipAtEnd) {\n              _this.results.splice(0, _this.query.skip);\n            }\n\n            if (_this.shouldEvaluateLimitAtEnd) {\n              _this.results = _this.results.slice(0, _this.query.limit);\n            }\n          }\n\n          return _this.results;\n        };\n\n        _this.query = query;\n        _this.util = util;\n        _this.tableName = query.from;\n\n        _this.setPushResult();\n\n        if (isArray(_this.query.where)) {\n          _this.isArrayQry = true;\n\n          _this.setLimitAndSkipEvaluationAtEnd_();\n        } else {\n          _this.skipRecord = query.skip;\n          _this.limitRecord = query.limit;\n        }\n\n        if (query.order) {\n          if (isArray(query.order) || query.order.case || isObject(query.order.by)) {\n            _this.query.order.idbSorting = false;\n          }\n\n          _this.setLimitAndSkipEvaluationAtEnd_();\n        } else if (query.groupBy) {\n          _this.setLimitAndSkipEvaluationAtEnd_();\n        }\n\n        return _this;\n      }\n\n      Select.prototype.execute = function (beforeExecute) {\n        var _this = this;\n\n        var pResult;\n\n        if (!beforeExecute) {\n          beforeExecute = function () {\n            return promiseResolve(null);\n          };\n        }\n\n        try {\n          var err = new query_helper_QueryHelper(this.db).validate(API.Select, this.query);\n          if (err) return promiseReject(err);\n          return beforeExecute().then(function (_) {\n            _this.initTransaction_();\n\n            if (_this.query.join == null) {\n              if (_this.query.where != null) {\n                if (isArray(_this.query.where)) {\n                  pResult = _this.processWhereArrayQry();\n                } else {\n                  pResult = _this.processWhere_();\n                }\n              } else {\n                pResult = _this.executeWhereUndefinedLogic();\n              }\n            } else {\n              pResult = _this.executeJoinQuery();\n            }\n\n            return pResult.then(_this.returnResult_.bind(_this));\n          });\n        } catch (ex) {\n          return this.onException(ex);\n        }\n      };\n\n      Select.prototype.processWhereArrayQry = function () {\n        var _this = this;\n\n        this.isArrayQry = true;\n        var whereQuery = this.query.where;\n        var pKey = this.primaryKey();\n        var isFirstWhere = true,\n            output = [],\n            operation;\n\n        var isItemExist = function (keyValue) {\n          return output.findIndex(function (item) {\n            return item[pKey] === keyValue;\n          }) >= 0;\n        };\n\n        var onSuccess = function () {\n          if (operation === QUERY_OPTION.And) {\n            var doAnd = function () {\n              var andResults = [];\n\n              _this.results.forEach(function (item) {\n                if (isItemExist(item[pKey])) {\n                  andResults.push(item);\n                }\n              });\n\n              output = andResults;\n              andResults = null;\n            };\n\n            if (isFirstWhere === true) {\n              output = _this.results;\n            } else if (output.length > 0) {\n              doAnd();\n            }\n          } else {\n            if (output.length > 0) {\n              _this.results = __spreadArray(__spreadArray([], output), _this.results);\n\n              _this.removeDuplicates();\n\n              output = _this.results;\n            } else {\n              output = _this.results;\n            }\n          }\n\n          isFirstWhere = false;\n\n          if (whereQuery.length > 0) {\n            _this.results = [];\n            return processFirstQry();\n          } else {\n            _this.results = output;\n          }\n        };\n\n        var processFirstQry = function () {\n          _this.query.where = whereQuery.shift();\n\n          if (_this.query.where[QUERY_OPTION.Or]) {\n            if (getLength(_this.query.where) === 1) {\n              operation = QUERY_OPTION.Or;\n              _this.query.where = _this.query.where[QUERY_OPTION.Or];\n            } else {\n              operation = QUERY_OPTION.And;\n            }\n          } else {\n            operation = QUERY_OPTION.And;\n          }\n\n          return _this.processWhere_().then(onSuccess);\n        };\n\n        return processFirstQry();\n      };\n\n      Select.prototype.initTransaction_ = function () {\n        if (!this.isTxQuery) {\n          this.util.createTransactionIfNotExist([this.tableName], IDB_MODE.ReadOnly);\n        }\n\n        this.objectStore = this.util.objectStore(this.tableName);\n      };\n\n      Select.prototype.processWhere_ = function () {\n        var _this = this;\n\n        this.shouldAddValue = function (value) {\n          return _this.whereCheckerInstance.check(value);\n        };\n\n        if (this.query.where.or) {\n          this.processOrLogic_();\n        }\n\n        return this.goToWhereLogic().then(function () {\n          return _this.onWhereEvaluated();\n        });\n      };\n\n      Select.prototype.onWhereEvaluated = function () {\n        if (this.isOr) {\n          return this.orQuerySuccess_();\n        }\n      };\n\n      Select.prototype.orQueryFinish_ = function () {\n        this.isOr = false;\n        this.results = this.orInfo.results; // free or info memory\n\n        this.orInfo = null;\n        this.removeDuplicates(); // this.onQueryFinished();\n      };\n\n      Select.prototype.orQuerySuccess_ = function () {\n        this.orInfo.results = __spreadArray(__spreadArray([], this.orInfo.results), this.results);\n\n        if (!this.query.limit || this.query.limit > this.orInfo.results.length) {\n          this.results = [];\n          var key = getObjectFirstKey(this.orInfo.orQuery);\n\n          if (key != null) {\n            var where = {};\n            where[key] = this.orInfo.orQuery[key];\n            delete this.orInfo.orQuery[key];\n            this.query.where = where;\n            return this.goToWhereLogic().then(this.onWhereEvaluated.bind(this));\n          }\n        }\n\n        return this.orQueryFinish_();\n      };\n\n      Select.prototype.processOrLogic_ = function () {\n        this.isOr = true;\n        var where = this.query.where;\n        this.orInfo = {\n          orQuery: where.or,\n          results: []\n        }; // free or memory\n\n        delete where.or;\n      };\n\n      return Select;\n    }(base_fetch_BaseFetch);\n\n    select_Select.prototype.executeInLogic = executeInLogic;\n    select_Select.prototype.executeWhereUndefinedLogic = executeWhereUndefinedLogic;\n    select_Select.prototype.executeWhereLogic = executeWhereLogic;\n    select_Select.prototype.executeRegexLogic = executeRegexLogic;\n    select_Select.prototype.setLimitAndSkipEvaluationAtEnd_ = setLimitAndSkipEvaluationAtEnd;\n    select_Select.prototype.setPushResult = setPushResult;\n    select_Select.prototype.removeDuplicates = removeDuplicates;\n    select_Select.prototype.executeJoinQuery = executeJoinQuery;\n    select_Select.prototype.processGroupDistinctAggr = processGroupDistinctAggr;\n    select_Select.prototype.processOrderBy = processOrderBy;\n    select_Select.prototype.processAggregateQry = processAggregateQry;\n    select_Select.prototype.executeAggregateGroupBy = executeAggregateGroupBy;\n    select_Select.prototype.processGroupBy = processGroupBy; // CONCATENATED MODULE: ./src/worker/executors/count/not_where.ts\n\n    var not_where_executeWhereUndefinedLogic = function () {\n      var _this = this;\n\n      var countRequest;\n\n      var onSuccess = function () {\n        if (_this.objectStore.count) {\n          countRequest = _this.objectStore.count();\n          return function (onFinish) {\n            return function () {\n              _this.resultCount = countRequest.result;\n              onFinish();\n            };\n          };\n        } else {\n          var cursor_1;\n          countRequest = _this.objectStore.openCursor();\n          return function (onFinish) {\n            return function (e) {\n              cursor_1 = e.target.result;\n\n              if (cursor_1) {\n                ++_this.resultCount;\n                cursor_1.continue();\n              } else {\n                onFinish();\n              }\n            };\n          };\n        }\n      }();\n\n      return promise(function (res, rej) {\n        countRequest.onerror = rej;\n        countRequest.onsuccess = onSuccess(res);\n      });\n    }; // CONCATENATED MODULE: ./src/worker/executors/count/where.ts\n\n\n    var where_executeWhereLogic = function (column, value, op) {\n      var _this = this;\n\n      value = op ? value[op] : value;\n      var cursorRequest;\n      var cursor;\n      return promise(function (res, rej) {\n        if (getLength(_this.query.where) === 1 && _this.objectStore.count) {\n          cursorRequest = _this.objectStore.index(column).count(_this.util.keyRange(value, op));\n\n          cursorRequest.onsuccess = function () {\n            _this.resultCount = cursorRequest.result;\n            res();\n          };\n        } else {\n          cursorRequest = _this.objectStore.index(column).openCursor(_this.util.keyRange(value, op));\n\n          cursorRequest.onsuccess = function (e) {\n            cursor = e.target.result;\n\n            if (cursor) {\n              if (_this.whereCheckerInstance.check(cursor.value)) {\n                ++_this.resultCount;\n              }\n\n              cursor.continue();\n            } else {\n              res();\n            }\n          };\n        }\n\n        cursorRequest.onerror = rej;\n      });\n    }; // CONCATENATED MODULE: ./src/worker/executors/count/regex.ts\n\n\n    var regex_executeRegexLogic = function (column, exp) {\n      var _this = this;\n\n      var cursor;\n      var cursorRequest = this.objectStore.index(column).openCursor();\n\n      this.shouldAddValue = function (cursor) {\n        return exp.test(cursor.key) && _this.whereCheckerInstance.check(cursor.value);\n      };\n\n      return promise(function (res, rej) {\n        cursorRequest.onerror = rej;\n\n        cursorRequest.onsuccess = function (e) {\n          cursor = e.target.result;\n\n          if (cursor) {\n            if (_this.shouldAddValue(cursor)) {\n              ++_this.resultCount;\n            }\n\n            cursor.continue();\n          } else {\n            res();\n          }\n        };\n      });\n    }; // CONCATENATED MODULE: ./src/worker/executors/count/in.ts\n\n\n    var in_executeInLogic = function (column, values) {\n      var _this = this;\n\n      var cursor;\n      var columnStore = this.objectStore.index(column);\n\n      var runInLogic = function (value) {\n        var keyRange = _this.util.keyRange(value);\n\n        if (_this.objectStore.count) {\n          return promise(function (res, rej) {\n            var cursorRequest = columnStore.count(keyRange);\n\n            cursorRequest.onsuccess = function (e) {\n              _this.resultCount += e.target.result;\n              res();\n            };\n\n            cursorRequest.onerror = rej;\n          });\n        }\n\n        return promise(function (res, rej) {\n          var cursorRequest = columnStore.openCursor(keyRange);\n\n          cursorRequest.onsuccess = function (e) {\n            cursor = e.target.result;\n\n            if (cursor) {\n              if (_this.whereCheckerInstance.check(cursor.value)) {\n                ++_this.resultCount;\n              }\n\n              cursor.continue();\n            } else {\n              res();\n            }\n          };\n\n          cursorRequest.onerror = rej;\n        });\n      };\n\n      return promiseAll(values.map(function (val) {\n        return runInLogic(val);\n      }));\n    }; // CONCATENATED MODULE: ./src/worker/executors/count/index.ts\n\n\n    var count_extends = undefined && undefined.__extends || function () {\n      var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n        };\n\n        return extendStatics(d, b);\n      };\n\n      return function (d, b) {\n        if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n\n        function __() {\n          this.constructor = d;\n        }\n\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n\n    var count_Count =\n    /** @class */\n    function (_super) {\n      count_extends(Count, _super);\n\n      function Count(query, util) {\n        var _this = _super.call(this) || this;\n\n        _this.resultCount = 0;\n        _this.query = query;\n        _this.util = util;\n        _this.tableName = query.from;\n        return _this;\n      }\n\n      Count.prototype.execute = function (beforeExecute) {\n        var _this = this;\n\n        var queryHelper = new query_helper_QueryHelper(this.db);\n        var query = this.query;\n        var err = queryHelper.validate(API.Count, query);\n\n        if (err) {\n          return promiseReject(err);\n        }\n\n        return beforeExecute().then(function (_) {\n          var result;\n\n          try {\n            var getDataFromSelect = function () {\n              var selectInstance = new select_Select(_this.query, _this.util);\n              selectInstance.isTxQuery = _this.isTxQuery;\n              return selectInstance.execute().then(function (results) {\n                _this.resultCount = results.length;\n              });\n            };\n\n            _this.initTransaction_();\n\n            if (query.join == null) {\n              if (query.where != null) {\n                if (query.where.or || isArray(_this.query.where)) {\n                  result = getDataFromSelect();\n                } else {\n                  result = _this.goToWhereLogic();\n                }\n              } else {\n                result = _this.executeWhereUndefinedLogic();\n              }\n            } else {\n              result = getDataFromSelect();\n            }\n          } catch (ex) {\n            _this.onException(ex);\n          }\n\n          return result.then(function (_) {\n            return _this.resultCount;\n          });\n        });\n      };\n\n      Count.prototype.initTransaction_ = function () {\n        if (!this.isTxQuery) {\n          this.util.createTransaction([this.query.from], IDB_MODE.ReadOnly);\n        }\n\n        this.objectStore = this.util.objectStore(this.query.from);\n      };\n\n      return Count;\n    }(base_fetch_BaseFetch);\n\n    count_Count.prototype.executeWhereUndefinedLogic = not_where_executeWhereUndefinedLogic;\n    count_Count.prototype.executeWhereLogic = where_executeWhereLogic;\n    count_Count.prototype.executeRegexLogic = regex_executeRegexLogic;\n    count_Count.prototype.executeInLogic = in_executeInLogic; // CONCATENATED MODULE: ./src/worker/utils/resolve.ts\n\n    var variableFromPath = function (path) {\n      var properties = isArray(path) ? path : path.split(\".\");\n      return properties.reduce(function (prev, curr) {\n        return prev && prev[curr];\n      }, self);\n    }; // CONCATENATED MODULE: ./src/worker/executors/update/update_value.ts\n\n\n    var updateValue = function (query, storedValue) {\n      var setValue = query.set;\n      var mapSet = query.mapSet;\n\n      if (mapSet) {\n        var result = mapSet(setValue, storedValue);\n\n        if (result != null) {\n          setValue = result;\n        }\n      }\n\n      for (var key in setValue) {\n        var columnSetValue = setValue[key];\n\n        if (getDataType(columnSetValue) !== DATA_TYPE.Object) {\n          storedValue[key] = columnSetValue;\n        } else {\n          for (var op in columnSetValue) {\n            var value = columnSetValue[op];\n\n            switch (op) {\n              case '+':\n                storedValue[key] += value;\n                break;\n\n              case '-':\n                storedValue[key] -= value;\n                break;\n\n              case '*':\n                storedValue[key] *= value;\n                break;\n\n              case '/':\n                storedValue[key] /= value;\n                break;\n\n              case '{push}':\n                storedValue[key].push(value);\n                break;\n\n              default:\n                storedValue[key] = columnSetValue;\n            }\n\n            break;\n          }\n        }\n      }\n\n      return storedValue;\n    }; // CONCATENATED MODULE: ./src/worker/executors/update/not_where.ts\n\n\n    var update_not_where_executeWhereUndefinedLogic = function () {\n      var _this = this;\n\n      var cursorRequest = this.objectStore.openCursor();\n      return promise(function (res, rej) {\n        cursorRequest.onsuccess = function (e) {\n          var cursor = e.target.result;\n\n          if (cursor) {\n            try {\n              var cursorUpdateRequest = cursor.update(updateValue(_this.query, cursor.value));\n\n              cursorUpdateRequest.onsuccess = function () {\n                ++_this.rowAffected;\n                cursor.continue();\n              };\n\n              cursorUpdateRequest.onerror = rej;\n            } catch (ex) {\n              rej(ex);\n            }\n          } else {\n            res();\n          }\n        };\n\n        cursorRequest.onerror = rej;\n      });\n    }; // CONCATENATED MODULE: ./src/worker/executors/update/in.ts\n\n\n    var update_in_executeInLogic = function (column, values) {\n      var _this = this;\n\n      var columnStore = this.objectStore.index(column);\n      var query = this.query;\n\n      var runInLogic = function (value) {\n        return promise(function (res, rej) {\n          var cursorRequest = columnStore.openCursor(_this.util.keyRange(value));\n\n          cursorRequest.onsuccess = function (e) {\n            var cursor = e.target.result;\n\n            if (cursor) {\n              var value_1 = cursor.value;\n\n              if (_this.whereCheckerInstance.check(value_1)) {\n                try {\n                  var cursorUpdateRequest = cursor.update(updateValue(query, value_1));\n\n                  cursorUpdateRequest.onsuccess = function () {\n                    ++_this.rowAffected;\n                    cursor.continue();\n                  };\n\n                  cursorUpdateRequest.onerror = rej;\n                } catch (ex) {\n                  rej(ex);\n                }\n              } else {\n                cursor.continue();\n              }\n            } else {\n              res();\n            }\n          };\n\n          cursorRequest.onerror = rej;\n        });\n      };\n\n      return promiseAll(values.map(function (val) {\n        return runInLogic(val);\n      }));\n    }; // CONCATENATED MODULE: ./src/worker/executors/update/regex.ts\n\n\n    var update_regex_executeRegexLogic = function (column, exp) {\n      var _this = this;\n\n      var cursor;\n      var cursorOpenRequest = this.objectStore.index(column).openCursor();\n\n      this.shouldAddValue = function (cursor) {\n        return exp.test(cursor.key) && _this.whereCheckerInstance.check(cursor.value);\n      };\n\n      return promise(function (res, rej) {\n        cursorOpenRequest.onsuccess = function (e) {\n          cursor = e.target.result;\n\n          if (cursor) {\n            if (_this.shouldAddValue(cursor)) {\n              try {\n                var cursorUpdateRequest = cursor.update(updateValue(_this.query, cursor.value));\n\n                cursorUpdateRequest.onsuccess = function () {\n                  ++_this.rowAffected;\n                  cursor.continue();\n                };\n\n                cursorUpdateRequest.onerror = rej;\n              } catch (ex) {\n                rej(ex);\n              }\n            } else {\n              cursor.continue();\n            }\n          } else {\n            res();\n          }\n        };\n\n        cursorOpenRequest.onerror = rej;\n      });\n    }; // CONCATENATED MODULE: ./src/worker/executors/update/where.ts\n\n\n    var update_where_executeWhereLogic = function (column, value, op) {\n      var _this = this;\n\n      var query = this.query;\n      value = op ? value[op] : value;\n      var cursorRequest = this.objectStore.index(column).openCursor(this.util.keyRange(value, op));\n      return promise(function (res, rej) {\n        cursorRequest.onsuccess = function (e) {\n          var cursor = e.target.result;\n\n          if (cursor) {\n            if (_this.whereCheckerInstance.check(cursor.value)) {\n              try {\n                var cursorUpdateRequest = cursor.update(updateValue(query, cursor.value));\n\n                cursorUpdateRequest.onsuccess = function () {\n                  ++_this.rowAffected;\n                  cursor.continue();\n                };\n\n                cursorUpdateRequest.onerror = rej;\n              } catch (ex) {\n                rej(ex);\n              }\n            } else {\n              cursor.continue();\n            }\n          } else {\n            res();\n          }\n        };\n\n        cursorRequest.onerror = rej;\n      });\n    }; // CONCATENATED MODULE: ./src/worker/executors/update/index.ts\n\n\n    var update_extends = undefined && undefined.__extends || function () {\n      var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n        };\n\n        return extendStatics(d, b);\n      };\n\n      return function (d, b) {\n        if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n\n        function __() {\n          this.constructor = d;\n        }\n\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n\n    var update_Update =\n    /** @class */\n    function (_super) {\n      update_extends(Update, _super);\n\n      function Update(query, util) {\n        var _this = _super.call(this) || this;\n\n        _this.query = query;\n        _this.util = util;\n        _this.tableName = query.in;\n        var mapSet = query.mapSet;\n\n        if (mapSet) {\n          var method = getDataType(mapSet) === DATA_TYPE.String ? variableFromPath(mapSet) : mapSet;\n\n          if (!method) {\n            throw new log_helper_LogHelper(ERROR_TYPE.MethodNotExist, mapSet);\n          }\n\n          query.mapSet = method;\n        }\n\n        return _this;\n      }\n\n      Update.prototype.execute = function (beforeExecute) {\n        var _this = this;\n\n        var query = this.query;\n\n        try {\n          var queryHelper = new query_helper_QueryHelper(this.db);\n          var err = queryHelper.validate(API.Update, query);\n          if (err) return promiseReject(err);\n          return beforeExecute().then(function (_) {\n            _this.initTransaction();\n\n            var pResult;\n\n            if (query.where != null) {\n              if (query.where.or || isArray(query.where)) {\n                pResult = _this.executeComplexLogic_();\n              } else {\n                pResult = _this.goToWhereLogic();\n              }\n            } else {\n              pResult = _this.executeWhereUndefinedLogic();\n            }\n\n            return pResult.then(function () {\n              return _this.rowAffected;\n            });\n          });\n        } catch (ex) {\n          return this.onException(ex);\n        }\n      };\n\n      Update.prototype.executeComplexLogic_ = function () {\n        var _this = this;\n\n        var query = this.query;\n        var selectObject = new select_Select({\n          from: query.in,\n          where: query.where,\n          ignoreCase: query.ignoreCase\n        }, this.util);\n        selectObject.isTxQuery = this.isTxQuery;\n        return selectObject.execute().then(function (results) {\n          var _a, _b;\n\n          var key = _this.primaryKey(query.in);\n\n          var inQuery = [];\n          results.forEach(function (value) {\n            inQuery.push(value[key]);\n          });\n          results = null;\n          var whereQry = (_a = {}, _a[key] = (_b = {}, _b[QUERY_OPTION.In] = inQuery, _b), _a);\n          _this.query.where = whereQry;\n\n          _this.initTransaction();\n\n          return _this.goToWhereLogic();\n        });\n      };\n\n      Update.prototype.initTransaction = function () {\n        var tableName = this.query.in;\n\n        if (!this.isTxQuery) {\n          this.util.createTransaction([tableName]);\n        }\n\n        this.objectStore = this.util.objectStore(tableName);\n      };\n\n      return Update;\n    }(base_fetch_BaseFetch);\n\n    update_Update.prototype.executeWhereUndefinedLogic = update_not_where_executeWhereUndefinedLogic;\n    update_Update.prototype.executeWhereLogic = update_where_executeWhereLogic;\n    update_Update.prototype.executeRegexLogic = update_regex_executeRegexLogic;\n    update_Update.prototype.executeInLogic = update_in_executeInLogic; // CONCATENATED MODULE: ./src/worker/intersect/index.ts\n\n    var intersect_extends = undefined && undefined.__extends || function () {\n      var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n        };\n\n        return extendStatics(d, b);\n      };\n\n      return function (d, b) {\n        if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n\n        function __() {\n          this.constructor = d;\n        }\n\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n\n    var intersect_assign = undefined && undefined.__assign || function () {\n      intersect_assign = Object.assign || function (t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n\n        return t;\n      };\n\n      return intersect_assign.apply(this, arguments);\n    };\n\n    var intersect_Intersect =\n    /** @class */\n    function (_super) {\n      intersect_extends(Intersect, _super);\n\n      function Intersect(intersectQry, util) {\n        var _this = _super.call(this) || this;\n\n        _this.query = intersectQry;\n        _this.util = util;\n        return _this;\n      }\n\n      Intersect.prototype.execute = function () {\n        var _this = this;\n\n        var intersectQry = this.query;\n        var index = 0;\n        var hashMap = {};\n        var hashMapTemp = {};\n        var isQueryForSameTable = true;\n        var queries = intersectQry.queries;\n        var queryLength = queries.length;\n        queries.every(function (qry, i) {\n          if (i + 1 < queryLength && qry.from !== queries[i + 1].from) {\n            isQueryForSameTable = false;\n            return false;\n          }\n\n          return true;\n        });\n        var getHashKey;\n\n        if (isQueryForSameTable) {\n          var pKey_1 = this.primaryKey(queries[0].from);\n\n          getHashKey = function (val) {\n            return val[pKey_1];\n          };\n        } else {\n          getHashKey = function (val) {\n            var columnValKey = \"\";\n\n            for (var key in val) {\n              columnValKey += val[key];\n            }\n\n            return columnValKey;\n          };\n        }\n\n        var select;\n\n        var fetchData = function () {\n          if (index < queryLength) {\n            select = new select_Select(queries[index], _this.util);\n            return select.execute().then(function (selectResult) {\n              hashMap = {};\n              selectResult.forEach(function (val) {\n                var columnValKey = getHashKey(val);\n\n                if (index === 0) {\n                  hashMapTemp[columnValKey] = val;\n                } else if (hashMapTemp[columnValKey] != null) {\n                  hashMap[columnValKey] = val;\n                }\n              });\n\n              if (index > 0) {\n                hashMapTemp = intersect_assign({}, hashMap);\n              }\n\n              ++index;\n              return fetchData();\n            });\n          } else {\n            var results_1 = [];\n            var resultPusher = void 0;\n            var skip_1 = intersectQry.skip;\n            var limit_1 = intersectQry.limit;\n\n            var onFinished = function () {\n              select['results'] = results_1;\n              Object.assign(select.query, {\n                order: intersectQry.order,\n                join: {}\n              });\n              select.processOrderBy();\n              select.processGroupDistinctAggr();\n              return select['results'];\n            };\n\n            var shouldStopLoop_1 = false;\n            var key_1;\n\n            var pushResult_1 = function () {\n              results_1.push(hashMap[key_1]);\n            };\n\n            var checkLimitAndPush_1 = function () {\n              if (results_1.length < limit_1) {\n                pushResult_1();\n              } else {\n                shouldStopLoop_1 = true;\n              }\n            };\n\n            var skipChecker_1 = function (callBack) {\n              if (skip_1 === 0) {\n                callBack();\n              } else {\n                --skip_1;\n              }\n            };\n\n            if (intersectQry.skip && intersectQry.limit) {\n              resultPusher = function () {\n                skipChecker_1(function () {\n                  checkLimitAndPush_1();\n                });\n              };\n            } else if (intersectQry.limit) {\n              resultPusher = checkLimitAndPush_1;\n            } else if (intersectQry.skip) {\n              resultPusher = function () {\n                skipChecker_1(function () {\n                  pushResult_1();\n                });\n              };\n            } else {\n              resultPusher = function () {\n                pushResult_1();\n              };\n            }\n\n            if (limit_1) {\n              for (key_1 in hashMap) {\n                resultPusher(key_1);\n\n                if (shouldStopLoop_1) {\n                  break;\n                }\n              }\n            } else {\n              for (key_1 in hashMap) {\n                resultPusher(key_1);\n              }\n            }\n\n            return onFinished();\n          }\n        };\n\n        return fetchData();\n      };\n\n      return Intersect;\n    }(base_Base); // CONCATENATED MODULE: ./src/worker/executors/drop_db.ts\n\n\n    var drop_db_DropDb =\n    /** @class */\n    function () {\n      function DropDb() {}\n\n      DropDb.prototype.execute = function (dbName) {\n        return promise(function (res, rej) {\n          var dropDbRequest = indexedDB.deleteDatabase(dbName);\n\n          dropDbRequest.onblocked = function () {\n            var err = new log_helper_LogHelper(ERROR_TYPE.DbBlocked);\n            return rej(getError(err));\n          };\n\n          dropDbRequest.onerror = function (e) {\n            return rej(getError(e));\n          };\n\n          dropDbRequest.onsuccess = function () {\n            res();\n          };\n        });\n      };\n\n      return DropDb;\n    }(); // CONCATENATED MODULE: ./src/worker/union/index.ts\n\n\n    var union_extends = undefined && undefined.__extends || function () {\n      var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n        };\n\n        return extendStatics(d, b);\n      };\n\n      return function (d, b) {\n        if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n\n        function __() {\n          this.constructor = d;\n        }\n\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n\n    var union_Union =\n    /** @class */\n    function (_super) {\n      union_extends(Union, _super);\n\n      function Union(query, util) {\n        var _this = _super.call(this) || this;\n\n        _this.query = query;\n        _this.util = util;\n        return _this;\n      }\n\n      Union.prototype.execute = function () {\n        var _this = this;\n\n        var query = this.query;\n        var index = 0;\n        var hashMap = {};\n        var isQueryForSameTable = true;\n        var queryLength = query.length;\n        query.every(function (qry, i) {\n          if (i + 1 < queryLength && qry.from !== query[i + 1].from) {\n            isQueryForSameTable = false;\n            return false;\n          }\n\n          return true;\n        });\n        var getHashKey;\n\n        if (isQueryForSameTable) {\n          var pKey_1 = this.primaryKey(query[0].from);\n\n          getHashKey = function (val) {\n            return val[pKey_1];\n          };\n        } else {\n          getHashKey = function (val) {\n            var columnValKey = \"\";\n\n            for (var key in val) {\n              columnValKey += val[key];\n            }\n\n            return columnValKey;\n          };\n        }\n\n        var select;\n\n        var fetchData = function () {\n          if (index < query.length) {\n            select = new select_Select(query[index++], _this.util);\n            return select.execute().then(function (selectResult) {\n              selectResult.forEach(function (val) {\n                hashMap[getHashKey(val)] = val;\n              });\n              return fetchData();\n            });\n          } else {\n            var results = [];\n\n            for (var key in hashMap) {\n              results.push(hashMap[key]);\n            }\n\n            return results;\n          }\n        };\n\n        return fetchData();\n      };\n\n      return Union;\n    }(base_Base); // CONCATENATED MODULE: ./src/worker/executors/remove/not_where.ts\n\n\n    var remove_not_where_executeWhereUndefinedLogic = function () {\n      var _this = this;\n\n      var cursor;\n      var cursorRequest = this.objectStore.openCursor();\n      return promise(function (res, rej) {\n        cursorRequest.onsuccess = function (e) {\n          cursor = e.target.result;\n\n          if (cursor) {\n            cursor.delete();\n            ++_this.rowAffected;\n            cursor.continue();\n          } else {\n            res();\n          }\n        };\n\n        cursorRequest.onerror = rej;\n      });\n    }; // CONCATENATED MODULE: ./src/worker/executors/remove/in.ts\n\n\n    var remove_in_executeInLogic = function (column, values) {\n      var _this = this;\n\n      var columnIndex = this.objectStore.index(column);\n\n      var runInLogic = function (value) {\n        return promise(function (res, rej) {\n          var cursorRequest = columnIndex.openCursor(_this.util.keyRange(value));\n\n          cursorRequest.onsuccess = function (e) {\n            var cursor = e.target.result;\n\n            if (cursor) {\n              if (_this.whereCheckerInstance.check(cursor.value)) {\n                cursor.delete();\n                ++_this.rowAffected;\n              }\n\n              cursor.continue();\n            } else {\n              res();\n            }\n          };\n\n          cursorRequest.onerror = rej;\n        });\n      };\n\n      return promiseAll(values.map(function (val) {\n        return runInLogic(val);\n      }));\n    }; // CONCATENATED MODULE: ./src/worker/executors/remove/where.ts\n\n\n    var remove_where_executeWhereLogic = function (column, value, op) {\n      var _this = this;\n\n      var cursor, cursorRequest;\n      value = op ? value[op] : value;\n      cursorRequest = this.objectStore.index(column).openCursor(this.util.keyRange(value, op));\n      return promise(function (res, rej) {\n        cursorRequest.onsuccess = function (e) {\n          cursor = e.target.result;\n\n          if (cursor) {\n            if (_this.whereCheckerInstance.check(cursor.value)) {\n              cursor.delete();\n              ++_this.rowAffected;\n            }\n\n            cursor.continue();\n          } else {\n            res();\n          }\n        };\n\n        cursorRequest.onerror = rej;\n      });\n    }; // CONCATENATED MODULE: ./src/worker/executors/remove/regex.ts\n\n\n    var remove_regex_executeRegexLogic = function (column, exp) {\n      var _this = this;\n\n      var cursor;\n      var cursorRequest = this.objectStore.index(column).openCursor();\n\n      this.shouldAddValue = function (cursor) {\n        return exp.test(cursor.key) && _this.whereCheckerInstance.check(cursor.value);\n      };\n\n      return promise(function (res, rej) {\n        cursorRequest.onsuccess = function (e) {\n          cursor = e.target.result;\n\n          if (cursor) {\n            if (_this.shouldAddValue(cursor)) {\n              cursor.delete();\n              ++_this.rowAffected;\n            }\n\n            cursor.continue();\n          } else {\n            res();\n          }\n        };\n\n        cursorRequest.onerror = rej;\n      });\n    }; // CONCATENATED MODULE: ./src/worker/executors/remove/index.ts\n\n\n    var remove_extends = undefined && undefined.__extends || function () {\n      var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n        };\n\n        return extendStatics(d, b);\n      };\n\n      return function (d, b) {\n        if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n\n        function __() {\n          this.constructor = d;\n        }\n\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n\n    var remove_Remove =\n    /** @class */\n    function (_super) {\n      remove_extends(Remove, _super);\n\n      function Remove(query, util) {\n        var _this = _super.call(this) || this;\n\n        _this.query = query;\n        _this.util = util;\n        _this.tableName = query.from;\n        return _this;\n      }\n\n      Remove.prototype.execute = function (beforeExecute) {\n        var _this = this;\n\n        var queryHelper = new query_helper_QueryHelper(this.db);\n        var query = this.query;\n        var err = queryHelper.validate(API.Remove, query);\n        if (err) return promiseReject(err);\n        var pResult;\n        return beforeExecute().then(function (_) {\n          try {\n            _this.initTransaction_();\n\n            if (query.where != null) {\n              if (isArray(query.where)) {\n                pResult = _this.processWhereArrayQry();\n              } else {\n                pResult = _this.processWhere_();\n              }\n            } else {\n              pResult = _this.executeWhereUndefinedLogic();\n            }\n          } catch (ex) {\n            return _this.onException(ex);\n          }\n\n          return pResult.then(function () {\n            return _this.rowAffected;\n          });\n        });\n      };\n\n      Remove.prototype.processWhereArrayQry = function () {\n        var _this = this;\n\n        var selectObject = new select_Select(this.query, this.util);\n        selectObject.isTxQuery = this.isTxQuery;\n        return selectObject.execute().then(function (results) {\n          var _a, _b;\n\n          var keyList = [];\n\n          var pkey = _this.primaryKey(_this.query.from);\n\n          results.forEach(function (item) {\n            keyList.push(item[pkey]);\n          });\n          results = null;\n          var whereQry = (_a = {}, _a[pkey] = (_b = {}, _b[QUERY_OPTION.In] = keyList, _b), _a);\n          _this.query[QUERY_OPTION.Where] = whereQry;\n          return _this.processWhere_();\n        });\n      };\n\n      Remove.prototype.processWhere_ = function () {\n        var _this = this;\n\n        if (this.query.where.or) {\n          this.processOrLogic();\n        }\n\n        return this.goToWhereLogic().then(function () {\n          return _this.onWhereEvaluated();\n        });\n      };\n\n      Remove.prototype.initTransaction_ = function () {\n        if (!this.isTxQuery) {\n          this.util.createTransaction([this.query.from]);\n        }\n\n        this.objectStore = this.util.objectStore(this.query.from);\n      };\n\n      Remove.prototype.onWhereEvaluated = function () {\n        if (this.isOr) {\n          return this.orQuerySuccess_();\n        }\n      };\n\n      Remove.prototype.orQuerySuccess_ = function () {\n        var _this = this;\n\n        var key = getObjectFirstKey(this._orInfo.OrQuery);\n\n        if (key != null) {\n          var where = {};\n          where[key] = this._orInfo.OrQuery[key];\n          delete this._orInfo.OrQuery[key];\n          this.query.where = where;\n          return this.goToWhereLogic().then(function () {\n            return _this.onWhereEvaluated();\n          });\n        } else {\n          this.isOr = true;\n        }\n      };\n\n      Remove.prototype.processOrLogic = function () {\n        this.isOr = true;\n        var where = this.query.where;\n        this._orInfo = {\n          OrQuery: where.or\n        }; // free or memory\n\n        delete where.or;\n      };\n\n      return Remove;\n    }(base_fetch_BaseFetch);\n\n    remove_Remove.prototype.executeInLogic = remove_in_executeInLogic;\n    remove_Remove.prototype.executeWhereUndefinedLogic = remove_not_where_executeWhereUndefinedLogic;\n    remove_Remove.prototype.executeWhereLogic = remove_where_executeWhereLogic;\n    remove_Remove.prototype.executeRegexLogic = remove_regex_executeRegexLogic; // CONCATENATED MODULE: ./src/worker/executors/clear/index.ts\n\n    var clear_extends = undefined && undefined.__extends || function () {\n      var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n        };\n\n        return extendStatics(d, b);\n      };\n\n      return function (d, b) {\n        if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n\n        function __() {\n          this.constructor = d;\n        }\n\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n\n    var clear_Clear =\n    /** @class */\n    function (_super) {\n      clear_extends(Clear, _super);\n\n      function Clear(tableName, util) {\n        var _this = _super.call(this) || this;\n\n        _this.query = tableName;\n        _this.util = util;\n        _this.tableName = tableName;\n        return _this;\n      }\n\n      Clear.prototype.execute = function (beforeExecute) {\n        var _this = this;\n\n        var tableName = this.query;\n\n        if (!this.isTxQuery) {\n          this.util.createTransaction([tableName, meta_helper_MetaHelper.tableName]);\n        }\n\n        return beforeExecute().then(function (_) {\n          var clearRequest = _this.util.objectStore(tableName).clear();\n\n          try {\n            return promise(function (res, rej) {\n              clearRequest.onsuccess = function (e) {\n                var currentTable = _this.table(tableName);\n\n                for (var columnName in currentTable.autoIncColumnValue) {\n                  currentTable.autoIncColumnValue[columnName] = 0;\n                }\n\n                meta_helper_MetaHelper.set(meta_helper_MetaHelper.dbSchema, _this.util.db, _this.util).then(function () {\n                  res();\n                }).catch(rej);\n              };\n\n              clearRequest.onerror = rej;\n            });\n          } catch (ex) {\n            return _this.onException(ex);\n          }\n        });\n      };\n\n      return Clear;\n    }(base_Base); // CONCATENATED MODULE: ./src/worker/executors/transaction/index.ts\n\n\n    var transaction_extends = undefined && undefined.__extends || function () {\n      var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n        };\n\n        return extendStatics(d, b);\n      };\n\n      return function (d, b) {\n        if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n\n        function __() {\n          this.constructor = d;\n        }\n\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n\n    var transaction_Transaction =\n    /** @class */\n    function (_super) {\n      transaction_extends(Transaction, _super);\n\n      function Transaction(qry, util) {\n        var _this = _super.call(this) || this;\n\n        _this.results = {};\n        _this.reqQueue = [];\n        _this.isQueryExecuting = false;\n        _this.isTxStarted_ = false;\n        _this.query = qry;\n        _this.util = util;\n        return _this;\n      }\n\n      Transaction.prototype.execute = function (cb) {\n        var _this = this;\n\n        this.beforeExecute = cb;\n        var err = this.validate();\n        if (err) return promiseReject(err);\n        this.startExecution_();\n        return promise(function (res, rej) {\n          _this.onSuccess = res;\n          _this.onError = rej;\n        }).then(function (result) {\n          _this.beforeExecute = null;\n\n          _this.log(\"transaction finished\");\n\n          return result;\n        });\n      };\n\n      Transaction.prototype.validate = function () {\n        var query = this.query;\n        var notExistingTable = this.notExistingTable_(query.tables);\n\n        if (notExistingTable) {\n          return new log_helper_LogHelper(ERROR_TYPE.TableNotExist, {\n            tableName: notExistingTable\n          });\n        }\n\n        var methodName = query.method;\n        var txLogic = variableFromPath(methodName);\n\n        if (!txLogic) {\n          return new log_helper_LogHelper(ERROR_TYPE.MethodNotExist, methodName);\n        }\n      };\n\n      Transaction.prototype.startExecution_ = function () {\n        var _this = this;\n\n        var query = this.query;\n\n        var select = function (qry) {\n          return _this.pushReq_({\n            name: API.Select,\n            query: qry\n          });\n        };\n\n        var insert = function (qry) {\n          return _this.pushReq_({\n            name: API.Insert,\n            query: qry\n          });\n        };\n\n        var update = function (qry) {\n          return _this.pushReq_({\n            name: API.Update,\n            query: qry\n          });\n        };\n\n        var remove = function (qry) {\n          return _this.pushReq_({\n            name: API.Remove,\n            query: qry\n          });\n        };\n\n        var count = function (qry) {\n          return _this.pushReq_({\n            name: API.Count,\n            query: qry\n          });\n        };\n\n        var setResult = function (key, value) {\n          _this.results[key] = value;\n        };\n\n        var getResult = function (key) {\n          return _this.results[key];\n        };\n\n        var abort = function (msg) {\n          _this.abortTx_(msg);\n        };\n\n        var start = function () {\n          _this.startTx_();\n        };\n\n        var methodName = query.method;\n        var txLogic = variableFromPath(methodName);\n        this.log(\"transaction query started\");\n        return txLogic.call(this, {\n          data: query.data,\n          insert: insert,\n          select: select,\n          update: update,\n          remove: remove,\n          count: count,\n          setResult: setResult,\n          getResult: getResult,\n          abort: abort,\n          start: start\n        });\n      };\n\n      Transaction.prototype.log = function (message) {\n        this.util.logger.log(message);\n      };\n\n      Transaction.prototype.startTx_ = function () {\n        var _this = this;\n\n        try {\n          this.isTxStarted_ = true;\n          var tableNames = this.query.tables;\n          tableNames = tableNames.concat(meta_helper_MetaHelper.tableName);\n          this.util.createTransaction(tableNames).then(function (_) {\n            _this.onSuccess(_this.results);\n          }).catch(function (err) {\n            _this.onError(err);\n          });\n          return this.processExecutionOfQry_();\n        } catch (ex) {\n          this.onError(this.onException(ex));\n        }\n      };\n\n      Transaction.prototype.onReqFinished_ = function (result) {\n        var finisehdRequest = this.reqQueue.shift();\n        this.log(\"finished request : \" + finisehdRequest.name + \" \");\n\n        if (finisehdRequest) {\n          if (result.error) {\n            this.abortTx_(\"automatic abort of transaction due to error occured\");\n            this.log(\"transaction aborted due to error occured\");\n            this.onError(result.error);\n          } else {\n            this.isQueryExecuting = false;\n\n            if (finisehdRequest.onSuccess) {\n              finisehdRequest.onSuccess(result);\n            }\n\n            this.processExecutionOfQry_();\n          }\n        }\n      };\n\n      Transaction.prototype.abortTx_ = function (msg) {\n        this.reqQueue = [];\n        this.util.abortTransaction();\n        this.log(\"transaction aborted. Msg : \" + msg);\n      };\n\n      Transaction.prototype.executeRequest_ = function (request) {\n        this.isQueryExecuting = true;\n        var requestObj;\n        this.log(\"executing request : \" + request.name + \" \");\n        var onReqFinished = this.onReqFinished_.bind(this);\n        var query = request.query;\n\n        switch (request.name) {\n          case API.Select:\n            requestObj = new select_Select(query, this.util);\n            break;\n\n          case API.Insert:\n            requestObj = new insert_Insert(query, this.util);\n            break;\n\n          case API.Update:\n            requestObj = new update_Update(query, this.util);\n            break;\n\n          case API.Remove:\n            requestObj = new remove_Remove(query, this.util);\n            break;\n\n          case API.Count:\n            requestObj = new count_Count(query, this.util);\n            break;\n        }\n\n        requestObj.isTxQuery = true;\n        requestObj.execute(this.beforeExecute).then(onReqFinished).catch(function (err) {\n          var result = {\n            error: err\n          };\n          onReqFinished(result);\n        });\n      };\n\n      Transaction.prototype.pushReq_ = function (request) {\n        var _this = this;\n\n        var push = function () {\n          _this.reqQueue.push(request);\n        };\n\n        var promiseObj = promise(function (resolve, reject) {\n          request.onSuccess = function (result) {\n            resolve(result);\n          };\n\n          request.onError = function (error) {\n            reject(error);\n          };\n        });\n\n        if (this.isTxStarted_ === true) {\n          push();\n          this.processExecutionOfQry_();\n        } else {\n          push();\n        }\n\n        this.log(\"request pushed : \" + request.name);\n        return promiseObj;\n      };\n\n      Transaction.prototype.processExecutionOfQry_ = function () {\n        if (this.isQueryExecuting === false) {\n          if (this.reqQueue.length > 0) {\n            this.executeRequest_(this.reqQueue[0]);\n          }\n        }\n      };\n\n      Transaction.prototype.notExistingTable_ = function (tables) {\n        var _this = this;\n\n        var invalidTable = null;\n        tables.every(function (tableName) {\n          var table = _this.table(tableName);\n\n          if (table == null) {\n            invalidTable = tableName;\n            return false;\n          }\n\n          return true;\n        });\n        return invalidTable;\n      };\n\n      return Transaction;\n    }(base_Base); // CONCATENATED MODULE: ./src/worker/utils/db_schema.ts\n\n\n    var userDbSchema = function (db) {\n      var database = {\n        name: db.name,\n        version: db.version,\n        tables: []\n      };\n      db.tables.forEach(function (table) {\n        var tableAsObj = {\n          name: table.name,\n          columns: {}\n        };\n        table.columns.forEach(function (column) {\n          tableAsObj.columns[column.name] = column;\n        });\n        database.tables.push(tableAsObj);\n      });\n      return database;\n    }; // CONCATENATED MODULE: ./src/worker/query_manager.ts\n\n\n    var query_manager_QueryManager =\n    /** @class */\n    function () {\n      function QueryManager(fn) {\n        this.middlewares = [];\n        this.util = new idbutil_IDBUtil();\n        this.onQryFinished = IS_WORKER ? function (result) {\n          self.postMessage(result);\n        } : fn;\n      }\n\n      Object.defineProperty(QueryManager.prototype, \"db\", {\n        get: function () {\n          return this.util.db;\n        },\n        enumerable: false,\n        configurable: true\n      });\n      Object.defineProperty(QueryManager.prototype, \"logger\", {\n        get: function () {\n          return this.util.logger;\n        },\n        enumerable: false,\n        configurable: true\n      });\n\n      QueryManager.prototype.executeMiddleware_ = function (request) {\n        var _this = this;\n\n        var lastIndex = getLength(this.middlewares) - 1;\n\n        if (lastIndex < 0) {\n          return promiseResolve();\n        }\n\n        var middlewareContext = {};\n        var db = this.db;\n        Object.defineProperty(middlewareContext, 'database', {\n          get: function () {\n            return userDbSchema(db);\n          }\n        });\n        return promise(function (res) {\n          var index = 0;\n\n          var callNextMiddleware = function () {\n            if (index <= lastIndex) {\n              var promiseResult = variableFromPath(_this.middlewares[index++])(request, middlewareContext);\n\n              if (!promiseResult || !promiseResult.then) {\n                promiseResult = Promise.resolve(promiseResult);\n              }\n\n              promiseResult.then(function (_) {\n                callNextMiddleware();\n              });\n            } else {\n              res();\n            }\n          };\n\n          callNextMiddleware();\n        });\n      };\n\n      QueryManager.prototype.executeQuery = function (request, cb) {\n        var queryResult;\n        var query = request.query;\n\n        switch (request.name) {\n          case API.OpenDb:\n            cb();\n            queryResult = this.openDb(query);\n            break;\n\n          case API.InitDb:\n            cb();\n            queryResult = this.initDb(query);\n            break;\n\n          case API.CloseDb:\n            cb();\n            queryResult = this.closeDb();\n            break;\n\n          case API.Insert:\n            queryResult = new insert_Insert(query, this.util).execute(cb);\n            break;\n\n          case API.Select:\n            queryResult = new select_Select(query, this.util).execute(cb);\n            break;\n\n          case API.Count:\n            queryResult = new count_Count(query, this.util).execute(cb);\n            break;\n\n          case API.Update:\n            queryResult = new update_Update(query, this.util).execute(cb);\n            break;\n\n          case API.Intersect:\n            cb();\n            queryResult = new intersect_Intersect(query, this.util).execute();\n            break;\n\n          case API.DropDb:\n            cb();\n            queryResult = this.dropDb();\n            break;\n\n          case API.Terminate:\n            cb();\n            queryResult = this.terminate();\n            break;\n\n          case API.Union:\n            cb();\n            queryResult = new union_Union(query, this.util).execute();\n            break;\n\n          case API.Remove:\n            queryResult = new remove_Remove(query, this.util).execute(cb);\n            break;\n\n          case API.Clear:\n            queryResult = new clear_Clear(query, this.util).execute(cb);\n            break;\n\n          case API.Transaction:\n            queryResult = new transaction_Transaction(query, this.util).execute(cb);\n            break;\n\n          case API.Get:\n            cb();\n            queryResult = meta_helper_MetaHelper.get(query, this.util);\n            break;\n\n          case API.Set:\n            cb();\n            queryResult = meta_helper_MetaHelper.set(query.key, query.value, this.util);\n            break;\n\n          case API.ImportScripts:\n            cb();\n            queryResult = this.importScripts_(request);\n            break;\n\n          case API.ChangeLogStatus:\n            cb();\n            this.logger.status = query;\n            queryResult = Promise.resolve();\n            break;\n\n          case API.Middleware:\n            cb();\n            var value = variableFromPath(query);\n\n            if (!value) {\n              return promiseReject(new log_helper_LogHelper(ERROR_TYPE.InvalidMiddleware, query));\n            }\n\n            this.middlewares.push(query);\n            return promiseResolve();\n\n          default:\n            if (true) {\n              console.error('The Api:-' + request.name + ' does not support.');\n            }\n\n            queryResult = promiseResolve();\n        }\n\n        this.logger.log(\"Executing query \" + request.name + \" in web worker\");\n        return queryResult;\n      };\n\n      QueryManager.prototype.callResultMiddleware = function (middlewares, result) {\n        return promise(function (res) {\n          var index = 0;\n          var lastIndex = getLength(middlewares) - 1;\n\n          var callNextMiddleware = function () {\n            if (index <= lastIndex) {\n              var promiseResult = middlewares[index++](result);\n\n              if (!(promiseResult instanceof Promise)) {\n                promiseResult = promiseResolve(promiseResult);\n              }\n\n              promiseResult.then(function (modifiedResult) {\n                result = modifiedResult;\n                callNextMiddleware();\n              });\n            } else {\n              res(result);\n            }\n          };\n\n          callNextMiddleware();\n        });\n      };\n\n      QueryManager.prototype.callBeforeMiddleware = function (middlewares) {\n        return promise(function (res) {\n          var index = 0;\n          var lastIndex = getLength(middlewares) - 1;\n\n          var callNextMiddleware = function () {\n            if (index <= lastIndex) {\n              var promiseResult = middlewares[index++]();\n\n              if (!(promiseResult instanceof Promise)) {\n                promiseResult = promiseResolve(promiseResult);\n              }\n\n              promiseResult.then(callNextMiddleware);\n            } else {\n              res();\n            }\n          };\n\n          callNextMiddleware();\n        });\n      };\n\n      QueryManager.prototype.run = function (request) {\n        var _this = this;\n\n        var onResultCallback = [];\n        var beforeExecuteCallback = [];\n\n        request.onResult = function (cb) {\n          onResultCallback.push(function (result) {\n            return cb(result);\n          });\n        };\n\n        request.beforeExecute = function (cb) {\n          beforeExecuteCallback.push(function (result) {\n            return cb(result);\n          });\n        };\n\n        this.executeMiddleware_(request).then(function (_) {\n          return _this.executeQuery(request, function () {\n            return _this.callBeforeMiddleware(beforeExecuteCallback);\n          }).then(function (result) {\n            return _this.callResultMiddleware(onResultCallback, result).then(function (modifiedResult) {\n              _this.returnResult_({\n                result: modifiedResult\n              });\n            });\n          });\n        }).catch(function (ex) {\n          onResultCallback = [];\n          var err = getError(ex);\n          var result = {\n            error: err\n          };\n\n          _this.returnResult_(result);\n        });\n      };\n\n      QueryManager.prototype.importScripts_ = function (request) {\n        return promise(function (res, rej) {\n          try {\n            importScripts.apply(void 0, request.query);\n            res();\n          } catch (e) {\n            var err = new log_helper_LogHelper(ERROR_TYPE.ImportScriptsFailed, e.message);\n            rej(err);\n          }\n        });\n      };\n\n      QueryManager.prototype.returnResult_ = function (result) {\n        this.logger.log(\"Query finished inside web worker\");\n\n        if (this.util) {\n          this.util.emptyTx();\n        }\n\n        this.onQryFinished(result);\n      };\n\n      QueryManager.prototype.dropDb = function () {\n        var dbName = this.db.name;\n        return this.terminate().then(function () {\n          return new drop_db_DropDb().execute(dbName);\n        });\n      };\n\n      QueryManager.prototype.closeDb = function () {\n        return this.util.close();\n      };\n\n      QueryManager.prototype.terminate = function () {\n        var _this = this;\n\n        return this.closeDb().then(function () {\n          _this.util.db = null;\n        });\n      };\n\n      QueryManager.prototype.openDb = function (query) {\n        var _this = this;\n\n        return this.closeDb().then(function (_) {\n          var pResult;\n\n          if (_this.db && query.name === _this.db.name) {\n            pResult = _this.initDb();\n          } else {\n            pResult = _this.initDb({\n              name: query.name,\n              tables: [],\n              version: query.version\n            });\n          }\n\n          return pResult.then(function () {\n            return _this.db;\n          });\n        });\n      };\n\n      QueryManager.prototype.initDb = function (dataBase) {\n        var _this = this;\n\n        if (!IS_IDB_SUPPORTED) {\n          return promiseReject(new log_helper_LogHelper(ERROR_TYPE.IndexedDbNotSupported));\n        }\n\n        var dbMeta = dataBase ? new db_meta_DbMeta(dataBase) : this.db;\n        this.util = new idbutil_IDBUtil();\n        return promise(function (res, rej) {\n          _this.util.initDb(dbMeta).then(function (dbInfo) {\n            if (dbInfo.isCreated) {\n              meta_helper_MetaHelper.get(meta_helper_MetaHelper.dbSchema, _this.util).then(function (value) {\n                if (value) {\n                  value.tables.forEach(function (table, index) {\n                    var targetTable = dbMeta.tables[index];\n\n                    if (targetTable) {\n                      targetTable.autoIncColumnValue = table.autoIncColumnValue;\n                    }\n                  });\n                }\n\n                _this.util.db = dbMeta;\n                dbInfo.database = userDbSchema(_this.db);\n                meta_helper_MetaHelper.set(meta_helper_MetaHelper.dbSchema, dbMeta, _this.util).then(function () {\n                  res(dbInfo);\n                });\n              });\n            } else {\n              meta_helper_MetaHelper.get(meta_helper_MetaHelper.dbSchema, _this.util).then(function (value) {\n                _this.util.db = value;\n                dbInfo.database = userDbSchema(_this.db);\n                res(dbInfo);\n              });\n            }\n          }).catch(rej);\n        });\n      };\n\n      return QueryManager;\n    }(); // CONCATENATED MODULE: ./src/worker/index.ts\n\n\n    if (IS_WORKER) {\n      var manager_1 = new query_manager_QueryManager();\n\n      self.onmessage = function (e) {\n        manager_1.run(e.data);\n      };\n    }\n    /***/\n\n  }\n  /******/\n\n});","map":{"version":3,"mappings":"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","names":["i","l","exports","modules","module","__webpack_require__","Object","enumerable","get","value","bind","key","promiseResolve","Promise","resolve","promise","cb","ERROR_TYPE","WORKER_STATUS","DATA_TYPE","API","EVENT","QUERY_OPTION","IDB_MODE","OCCURENCE","CONNECTION_STATUS","table","columns","setColumn","name","alter","TableMeta","tableColumns","columnName","column","autoIncrement","this_1","autoIncColumnValue","primaryKey","enableSearch","existingColumnIndex","indexOf","push","existingColumn","assign","MetaHelper","tableName","util","tx","createTransaction","store","objectStore","res","rej","req","put","onsuccess","onerror","keyRange","result","delete","db","version","tables","meta_helper_MetaHelper","map","forObj","obj","type","info","info_","message","getMsg_","LogHelper","msg","status","console","log","error","errMsg","NotArray","UndefinedColumn","UndefinedValue","UndefinedColumnName","UndefinedDbName","UndefinedColumnValue","NoValueSupplied","InvalidOp","ColumnNotExist","EnableSearchOff","NullValue","WrongDataType","TableNotExist","DbNotExist","NotObject","DbBlocked","NullValueInWhere","MethodNotExist","IndexedDbNotSupported","InvalidJoinQuery","InvalidGroupQuery","InvalidOrderQuery","ImportScriptsFailed","InvalidMiddleware","Unknown","log_helper_LogHelper","IDBUtil","oncomplete","onabort","mode","ReadWrite","con","transaction","_this","op","Between","IDBKeyRange","bound","low","high","GreaterThan","lowerBound","GreaterThanEqualTo","LessThan","upperBound","LessThanEqualTo","only","abort","close","setTimeout","isDbCreated","dbVersion","oldVersion","initLogic","dbOpenRequest","indexedDB","open","onversionchange","e","target","isCreated","newVersion","onupgradeneeded","upgradeConnection","storeNames","objectStoreNames","createObjectStore","option","keyPath","forEach","addColumn","indexNames","contains","options","unique","multiEntry","createIndex","deleteColumn","index","findIndex","splice","deleteIndex","alterQuery","add","newColumns","drop","modify","shouldDelete","targetColumn","find","newColumn","length_1","storeName","item","tableIndex","deleteObjectStore","length","promiseAll","promises","all","promiseReject","reject","getError","customError","logError","getErrorFromException","ex","InvalidQuery","Base","abortTransaction","getDataType","Null","Array","isArray","Date","DateTime","isNull","isNaN","autoIncValues","autoIncrementValue","ValuesChecker","query","err","values","ignoreIndexes","every","checkAndModifyValue","ignore","checkAndModifyColumnValue_","notNull","ColumnName","dataType","columnValue","Number","default","undefined","validation","checkNotNullAndDataType_","details","SchemaChecker","setValue","tblName","checkByColumn_","checkFurther","allowedOp","prop","dbSchema","QueryHelper","api","Select","Remove","Count","checkSelect","Insert","checkInsertQuery","Update","checkUpdate","getTable_","into","schema_checker_SchemaChecker","in","check","set","where","checkForNullInWhere_","addGreatAndLessToNotOp_","from","whereQuery","containsNot","qry","keys","NotEqualTo","addToSingleQry","Or","queryKeys","whereTmpQry_1","_a","whereTmp_1","qryKeys","validResult","isInsertQryValid","skipDataCheck","valueCheckerInstance","values_checker_ValuesChecker","checkAndModifyValues","__extends","_super","beforeInsert","query_helper_QueryHelper","validate","then","insertData_","return","valuesAffected_","rowAffected","catch","onInsertData","addMethod","idbMethod","upsert","isTxQuery","addResult","base_Base","setCrossBrowserIndexedDb","self","mozIndexedDB","webkitIndexedDB","msIndexedDB","IDBTransaction","webkitIDBTransaction","msIDBTransaction","webkitIDBKeyRange","msIDBKeyRange","IS_WORKER","alert","ServiceWorkerGlobalScope","IS_IDB_SUPPORTED","getKeys","isObject","getLength","getObjectFirstKey","setPushResult","case","pushResult","thenEvaluator","setCaseAndValue","evaluate","results","setLimitAndSkipEvaluationAtEnd","limit","shouldEvaluateLimitAtEnd","skip","shouldEvaluateSkipAtEnd","removeDuplicates","datas","lookupObject","len","ThenEvaluator","caseQuery","caseQuery_","columnName_","caseColumnQuery_","length_","checkCase_","lastThen","cond","queryOption","Equal","executeWhereUndefinedLogic","cursorRequest","order","idbSorting","by","orderType","toLowerCase","sorted","openCursor","isOrder","onSuccess","skipRecord","limitRecord","executeSkipAndLimit","executeSkip","executeLimit","executeSimple","call","onFinished","recordSkipped","cursor","continue","advance","removeSpace","replace","processGroupDistinctAggr","distinct","groupBy","aggregate","executeAggregateGroupBy","processGroupBy","processAggregateQry","getOrderColumnInfo","orderColumn","join","getColumnInfo","splittedByDot","split","valueFromFirstColumn","compareStringInDesc_","a","b","localeCompare","compareStringinAsc_","compareDefaultInDesc_","String","compareDefaultinAsc_","compareNumberInDesc_","compareNumberinAsc_","compareDateInDesc_","getTime","compareDateInAsc_","getValInDesc_","value1","value2","column1","column2","getValInAsc_","getValueComparer_","orderBy_","getOrderType_","sort","columnInfo","orderMethod_1","setCaseAndColumn","processOrderBy","orderQueryType","prevOrderQueryBy","currentOrderQuery","currentorderQueryBy","orderColumnDetail","orderMethod_2","datasLength","columnToAggregate","getCount","getMax","getMin","Infinity","getSum","getAvg","aggregateColumn","aggregateValType","aggregateCalculator","lookUpObj","objKey","caseQueryLength","groupByColumn","grpQry","aggregateQry","calculateAggregate","sumOfColumn","Max","Min","Sum","Avg","avg","sumForAvg","countForAvg","count","sum","isCountTypeString","isSumTypeString","avgColumn","executeWhereLogic","dir","executeSkipAndLimitForWhere_","executeSkipForWhere_","executeLimitForWhere_","executeSimpleForWhere_","onFinish","shouldAddValue","getRegexFromLikeExpression","likeExpression","filterValues","filterValue","occurence","Any","Last","First","RegExp","clone_isObject","clone","copy","compare","compareValue","symbol","type1","type2","checkFlag","WhereChecker","props","last","pop","reduce","prev","curr","rowValue","whereColumnValue","In","checkIn","Like","checkLike_","Regex","checkRegex","checkComparisionOp_","q","test","base_fetch_extends","BaseFetch","firstColumn","whereCheckerInstance","where_checker_WhereChecker","remove","regexVal","executeRegexLogic","executeInLogic","Aggregate","skipOrPush","val","executeSkipAndLimitForIn_","executeSkipForIn_","executeLimitForIn_","executeSimpleForIn_","columnStore","runInLogic","exp","executeSkipAndLimitForRegex_","executeSkipForRegex_","executeLimitForRegex_","executeSimpleForRegex_","executeJoinQuery","join_Join","execute","select","Join","select_Select","joinQueryStack_","tablesToFetch","jointblInfo","getJoinTableInfo_","on","with","table1","table2","checkJoinQuery_","joinTableInfo","executeSelect","flatten","currentQueryStackIndex_","tablesFetched","startExecutingJoinLogic_","results_1","tablesLength_1","mapWithAlias_1","as","data","setLimitAndSkipEvaluationAtEnd_","joinQuery","jointblInfo_1","jointables","onJoinQueryFinished_","joinType","secondtableData","table1Index","table2Index","performInnerJoin","valueFromSecondTable","valueFromFirstTable","__assign","performleftJoin","valueMatchedFromSecondTable","callBack","columnDefaultValue","getTable","col","joinOn","splittedjoinOn","splittedjoinOnbydotFirst","splittedjoinOnbydotSecond","tableSchemaOf1stTable","tableSchemaOf2ndTable","columnFound","select_extends","then_evaluator_ThenEvaluator","flattendData_1","indexToDelete_1","select_assign","itemsDeleted_1","concat","slice","isArrayQry","beforeExecute","pResult","initTransaction_","processWhereArrayQry","processWhere_","returnResult_","onException","pKey","isFirstWhere","output","operation","isItemExist","keyValue","And","doAnd","andResults","__spreadArray","processFirstQry","shift","createTransactionIfNotExist","ReadOnly","or","processOrLogic_","goToWhereLogic","onWhereEvaluated","isOr","orQuerySuccess_","orInfo","orQuery","orQueryFinish_","base_fetch_BaseFetch","prototype","not_where_executeWhereUndefinedLogic","countRequest","resultCount","cursor_1","where_executeWhereLogic","regex_executeRegexLogic","in_executeInLogic","count_extends","queryHelper","getDataFromSelect","selectInstance","count_Count","variableFromPath","path","properties","updateValue","storedValue","mapSet","columnSetValue","update_not_where_executeWhereUndefinedLogic","cursorUpdateRequest","update","update_in_executeInLogic","value_1","update_regex_executeRegexLogic","cursorOpenRequest","update_where_executeWhereLogic","update_extends","method","initTransaction","executeComplexLogic_","selectObject","ignoreCase","inQuery","whereQry","_b","update_Update","intersect_extends","intersectQry","Intersect","hashMap","hashMapTemp","isQueryForSameTable","queries","queryLength","getHashKey","pKey_1","columnValKey","fetchData","selectResult","intersect_assign","resultPusher","skip_1","limit_1","shouldStopLoop_1","key_1","pushResult_1","checkLimitAndPush_1","skipChecker_1","DropDb","dbName","dropDbRequest","deleteDatabase","onblocked","union_extends","Union","remove_not_where_executeWhereUndefinedLogic","remove_in_executeInLogic","columnIndex","remove_where_executeWhereLogic","remove_regex_executeRegexLogic","remove_extends","keyList","pkey","Where","processOrLogic","_orInfo","OrQuery","remove_Remove","clear_extends","Clear","clearRequest","clear","currentTable","transaction_extends","Transaction","startExecution_","onError","notExistingTable","notExistingTable_","methodName","txLogic","pushReq_","insert","setResult","getResult","abortTx_","start","startTx_","logger","isTxStarted_","tableNames","processExecutionOfQry_","finisehdRequest","reqQueue","isQueryExecuting","request","requestObj","onReqFinished","onReqFinished_","insert_Insert","promiseObj","executeRequest_","invalidTable","userDbSchema","database","tableAsObj","fn","idbutil_IDBUtil","onQryFinished","postMessage","QueryManager","lastIndex","middlewares","middlewareContext","defineProperty","callNextMiddleware","promiseResult","queryResult","OpenDb","openDb","InitDb","initDb","CloseDb","closeDb","intersect_Intersect","dropDb","Terminate","terminate","union_Union","clear_Clear","transaction_Transaction","Get","Set","ImportScripts","importScripts_","ChangeLogStatus","Middleware","modifiedResult","onResultCallback","beforeExecuteCallback","onResult","executeMiddleware_","executeQuery","callBeforeMiddleware","callResultMiddleware","importScripts","emptyTx","drop_db_DropDb","dataBase","dbMeta","db_meta_DbMeta","dbInfo","targetTable","manager_1","query_manager_QueryManager","onmessage","run"],"sources":["webpack://JsStoreWorker/webpack/bootstrap","webpack://JsStoreWorker/./src/common/utils/promise_resolve.ts","webpack://JsStoreWorker/./src/common/utils/promise.ts","webpack://JsStoreWorker/./src/common/enums.ts","webpack://JsStoreWorker/./src/worker/model/table_meta.ts","webpack://JsStoreWorker/./src/worker/meta_helper.ts","webpack://JsStoreWorker/./src/worker/model/db_meta.ts","webpack://JsStoreWorker/./src/common/utils/for_obj.ts","webpack://JsStoreWorker/./src/worker/utils/log_helper.ts","webpack://JsStoreWorker/./src/worker/idbutil/index.ts","webpack://JsStoreWorker/./src/common/utils/promise_all.ts","webpack://JsStoreWorker/./src/worker/utils/promise_reject.ts","webpack://JsStoreWorker/./src/worker/utils/get_error.ts","webpack://JsStoreWorker/./src/worker/utils/get_error_from_exception.ts","webpack://JsStoreWorker/./src/worker/executors/base.ts","webpack://JsStoreWorker/./src/worker/utils/get_data_type.ts","webpack://JsStoreWorker/./src/worker/utils/is_null.ts","webpack://JsStoreWorker/./src/worker/executors/insert/values_checker.ts","webpack://JsStoreWorker/./src/worker/executors/update/schema_checker.ts","webpack://JsStoreWorker/./src/worker/executors/query_helper.ts","webpack://JsStoreWorker/./src/worker/executors/insert/index.ts","webpack://JsStoreWorker/./src/worker/utils/set_cross_browser_idb.ts","webpack://JsStoreWorker/./src/worker/constants/index.ts","webpack://JsStoreWorker/./src/worker/utils/get_keys.ts","webpack://JsStoreWorker/./src/worker/utils/is_array.ts","webpack://JsStoreWorker/./src/worker/utils/is_object.ts","webpack://JsStoreWorker/./src/worker/utils/get_length.ts","webpack://JsStoreWorker/./src/worker/utils/get_object_first_key.ts","webpack://JsStoreWorker/./src/worker/executors/select/base_select.ts","webpack://JsStoreWorker/./src/worker/executors/select/then_evaluator.ts","webpack://JsStoreWorker/./src/worker/executors/select/not_where.ts","webpack://JsStoreWorker/./src/worker/utils/remove_space.ts","webpack://JsStoreWorker/./src/worker/executors/select/order_by.ts","webpack://JsStoreWorker/./src/worker/executors/select/group_by.ts","webpack://JsStoreWorker/./src/worker/executors/select/where.ts","webpack://JsStoreWorker/./src/worker/utils/get_regex_from_like.ts","webpack://JsStoreWorker/./src/worker/utils/clone.ts","webpack://JsStoreWorker/./src/worker/utils/compare.ts","webpack://JsStoreWorker/./src/worker/executors/where_checker.ts","webpack://JsStoreWorker/./src/worker/executors/base_fetch.ts","webpack://JsStoreWorker/./src/worker/executors/select/in.ts","webpack://JsStoreWorker/./src/worker/executors/select/regex.ts","webpack://JsStoreWorker/./src/worker/executors/select/join.ts","webpack://JsStoreWorker/./src/worker/executors/select/index.ts","webpack://JsStoreWorker/./src/worker/executors/count/not_where.ts","webpack://JsStoreWorker/./src/worker/executors/count/where.ts","webpack://JsStoreWorker/./src/worker/executors/count/regex.ts","webpack://JsStoreWorker/./src/worker/executors/count/in.ts","webpack://JsStoreWorker/./src/worker/executors/count/index.ts","webpack://JsStoreWorker/./src/worker/utils/resolve.ts","webpack://JsStoreWorker/./src/worker/executors/update/update_value.ts","webpack://JsStoreWorker/./src/worker/executors/update/not_where.ts","webpack://JsStoreWorker/./src/worker/executors/update/in.ts","webpack://JsStoreWorker/./src/worker/executors/update/regex.ts","webpack://JsStoreWorker/./src/worker/executors/update/where.ts","webpack://JsStoreWorker/./src/worker/executors/update/index.ts","webpack://JsStoreWorker/./src/worker/intersect/index.ts","webpack://JsStoreWorker/./src/worker/executors/drop_db.ts","webpack://JsStoreWorker/./src/worker/union/index.ts","webpack://JsStoreWorker/./src/worker/executors/remove/not_where.ts","webpack://JsStoreWorker/./src/worker/executors/remove/in.ts","webpack://JsStoreWorker/./src/worker/executors/remove/where.ts","webpack://JsStoreWorker/./src/worker/executors/remove/regex.ts","webpack://JsStoreWorker/./src/worker/executors/remove/index.ts","webpack://JsStoreWorker/./src/worker/executors/clear/index.ts","webpack://JsStoreWorker/./src/worker/executors/transaction/index.ts","webpack://JsStoreWorker/./src/worker/utils/db_schema.ts","webpack://JsStoreWorker/./src/worker/query_manager.ts","webpack://JsStoreWorker/./src/worker/index.ts"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","export const promiseResolve = (value?) => {\n    return Promise.resolve(value);\n}","export const promise = <T>(cb: (res, rej?) => any) => {\n    return new Promise<T>(cb);\n}","export enum ERROR_TYPE {\n    InvalidUpdateColumn = \"invalid_update_column\",\n    UndefinedColumn = \"undefined_column\",\n    UndefinedValue = \"undefined_value\",\n    UndefinedColumnName = \"undefined_column_name\",\n    UndefinedDbName = \"undefined_database_name\",\n    UndefinedColumnValue = \"undefined_column_value\",\n    NotArray = \"not_array\",\n    NoValueSupplied = \"no_value_supplied\",\n    ColumnNotExist = \"column_not_exist\",\n    EnableSearchOff = \"enable_search_off\",\n    InvalidOp = \"invalid_operator\",\n    NullValue = \"null_value\",\n    WrongDataType = \"wrong_data_type\",\n    TableNotExist = \"table_not_exist\",\n    DbNotExist = \"db_not_exist\",\n    ConnectionAborted = \"connection_aborted\",\n    ConnectionClosed = \"connection_closed\",\n    NotObject = \"not_object\",\n    InvalidConfig = \"invalid_config\",\n    DbBlocked = \"Db_blocked\",\n    IndexedDbNotSupported = \"indexeddb_not_supported\",\n    NullValueInWhere = \"null_value_in_where\",\n    InvalidJoinQuery = 'invalid_join_query',\n    InvalidOrderQuery = 'invalid_order_query',\n    InvalidQuery = 'invalid_query',\n    InvalidGroupQuery = 'invalid_group_query',\n    ImportScriptsFailed = 'import_scripts_failed',\n    MethodNotExist = 'method_not_exist',\n    Unknown = \"unknown\",\n    InvalidMiddleware = \"invalid_middleware\"\n}\n\nexport enum WORKER_STATUS {\n    Registered = \"registerd\",\n    Failed = \"failed\",\n    NotStarted = \"not_started\"\n}\n\nexport enum DATA_TYPE {\n    String = \"string\",\n    Object = \"object\",\n    Array = \"array\",\n    Number = \"number\",\n    Boolean = \"boolean\",\n    Null = \"null\",\n    DateTime = \"date_time\"\n}\n\nexport enum API {\n    InitDb = \"init_db\",\n    Get = \"get\",\n    Set = \"set\",\n    Select = \"select\",\n    Insert = \"insert\",\n    Update = \"update\",\n    Remove = \"remove\",\n    OpenDb = \"open_db\",\n    Clear = \"clear\",\n    DropDb = \"drop_db\",\n    Count = \"count\",\n    ChangeLogStatus = \"change_log_status\",\n    Terminate = \"terminate\",\n    Transaction = \"transaction\",\n    CloseDb = \"close_db\",\n    Union = \"union\",\n    Intersect = \"intersect\",\n    ImportScripts = \"import_scripts\",\n    Middleware = \"middleware\"\n}\n\nexport enum EVENT {\n    RequestQueueEmpty = \"requestQueueEmpty\",\n    RequestQueueFilled = \"requestQueueFilled\",\n    Upgrade = \"upgrade\",\n    Create = \"create\",\n    Open = \"open\"\n}\n\nexport enum QUERY_OPTION {\n    Where = \"where\",\n    Like = 'like',\n    Regex = 'regex',\n    In = 'in',\n    Equal = \"=\",\n    Between = '-',\n    GreaterThan = '>',\n    LessThan = '<',\n    GreaterThanEqualTo = \">=\",\n    LessThanEqualTo = \"<=\",\n    NotEqualTo = \"!=\",\n    Aggregate = \"aggregate\",\n    Max = \"max\",\n    Min = \"min\",\n    Avg = \"avg\",\n    Count = \"count\",\n    Sum = \"sum\",\n    Or = \"or\",\n    Skip = \"skip\",\n    Limit = \"limit\",\n    And = \"and\",\n    IgnoreCase = \"ignoreCase\",\n    Then = \"then\"\n}\n\nexport enum IDB_MODE {\n    ReadOnly = \"readonly\",\n    ReadWrite = \"readwrite\"\n}\n\nexport enum OCCURENCE {\n    First = 'f',\n    Last = 'l',\n    Any = 'a'\n}\n\nexport enum CONNECTION_STATUS {\n    Connected = \"connected\",\n    Closed = \"closed\",\n    NotStarted = \"not_started\",\n    UnableToStart = \"unable_to_start\",\n    ClosedByJsStore = \"closed_by_jsstore\"\n}","import { ITable, IAlterQuery, IColumn, TColumns } from \"@/common\";\n\nexport class TableMeta {\n    name: string;\n    columns: IColumn[] = [];\n    primaryKey: string;\n    autoIncColumnValue = {};\n    alter?: IAlterQuery;\n\n    constructor(table: ITable) {\n        this.columns = this.setColumn(table.columns);\n        this.name = table.name;\n        this.alter = table.alter || {};\n    }\n\n    setColumn(tableColumns: TColumns) {\n        const columns = [];\n        for (const columnName in tableColumns) {\n            const column: IColumn = tableColumns[columnName] as any;\n            column.name = columnName;\n            if (column.autoIncrement) {\n                this.autoIncColumnValue[columnName] = 0;\n            }\n            if (column.primaryKey) {\n                this.primaryKey = columnName;\n            }\n            column.enableSearch = column.enableSearch == null ? true : column.enableSearch;\n            const existingColumnIndex = this.columns.indexOf(q => q.name === columnName);\n            if (existingColumnIndex < 0) {\n                columns.push(column);\n            }\n            else {\n                const existingColumn = this.columns[existingColumnIndex];\n                Object.assign(existingColumn, column);\n            }\n        }\n        return columns;\n    }\n\n\n}","import { IDBUtil } from \"@/worker/idbutil\";\nimport { promise } from \"@/common\";\n\nexport class MetaHelper {\n    static tableName = \"JsStore_Meta\";\n    static autoIncrementKey(tableName: string, columnName: string) {\n        return `JsStore_${tableName}_${columnName}_Value`;\n    }\n    static dbSchema = `JsStore_DbSchema`;\n\n    static set(key, value, util: IDBUtil) {\n        if (!util.tx) {\n            util.createTransaction([MetaHelper.tableName]);\n        }\n        const store = util.objectStore(MetaHelper.tableName);\n\n        return promise((res, rej) => {\n            const req = store.put({\n                key, value\n            });\n            req.onsuccess = () => {\n                res();\n            };\n            req.onerror = rej;\n        });\n    }\n\n    static get(key, util: IDBUtil) {\n        if (!util.tx) {\n            util.createTransaction([MetaHelper.tableName]);\n        }\n        const store = util.objectStore(MetaHelper.tableName);\n\n        return promise((res, rej) => {\n            const req = store.get(\n                util.keyRange(key)\n            );\n            req.onsuccess = () => {\n                const result = req.result;\n                res(result && result.value);\n            };\n            req.onerror = rej;\n        });\n    }\n\n    static remove(key, util: IDBUtil) {\n        if (!util.tx) {\n            util.createTransaction([MetaHelper.tableName]);\n        }\n        const store = util.objectStore(MetaHelper.tableName);\n\n        return promise((res, rej) => {\n            const req = store.delete(\n                util.keyRange(key)\n            );\n            req.onsuccess = res;\n            req.onerror = rej;\n        });\n    }\n}","import { IDataBase } from \"@/common\";\nimport { TableMeta } from \"./table_meta\";\nimport { MetaHelper } from \"@worker/meta_helper\";\n\nexport class DbMeta {\n    name: string;\n    version: number;\n    tables: TableMeta[];\n\n    constructor(db: IDataBase) {\n        this.name = db.name;\n        this.version = db.version || 1;\n        db.tables.push({\n            name: MetaHelper.tableName,\n            columns: {\n                key: {\n                    primaryKey: true\n                },\n                value: {\n                    enableSearch: false\n                }\n            },\n        })\n        this.tables = db.tables.map(table => {\n            return new TableMeta(table);\n        });\n    }\n}","export const forObj = (obj: object, cb: (key, value) => void) => {\n    for (const key in obj) {\n        cb(key, obj[key]);\n    }\n}","import { ERROR_TYPE, IError } from \"@/common\";\n\nexport class LogHelper implements IError {\n    type: ERROR_TYPE;\n    message: string;\n    private info_: any;\n\n    status: boolean;\n\n    log(msg) {\n        if (this.status) {\n            console.log(msg);\n        }\n    }\n\n    constructor(type: ERROR_TYPE, info?) {\n        this.type = type;\n        this.info_ = info;\n        this.message = this.getMsg_();\n    }\n\n    throw() {\n        throw this.get();\n    }\n\n\n    logError() {\n        console.error(this.get());\n    }\n\n\n\n    get() {\n        return {\n            message: this.message,\n            type: this.type\n        } as IError;\n    }\n\n    private getMsg_() {\n        let errMsg: string;\n        switch (this.type) {\n            case ERROR_TYPE.NotArray:\n                errMsg = \"Supplied value is not an array\";\n                break;\n            case ERROR_TYPE.UndefinedColumn:\n                errMsg = \"Column is undefined in Where\";\n                break;\n            case ERROR_TYPE.UndefinedValue:\n                errMsg = \"Value is undefined in Where\";\n                break;\n            case ERROR_TYPE.UndefinedColumnName:\n                errMsg = \"Column name is undefined '\" + this.info_['TableName'] + \"'\";\n                break;\n            case ERROR_TYPE.UndefinedDbName:\n                errMsg = \"Database name is not supplied\";\n                break;\n            case ERROR_TYPE.UndefinedColumnValue:\n                errMsg = \"Column value is undefined\";\n                break;\n            case ERROR_TYPE.NoValueSupplied:\n                errMsg = \"No value is supplied\";\n                break;\n            case ERROR_TYPE.InvalidOp:\n                errMsg = \"Invalid Op Value '\" + this.info_['Op'] + \"'\";\n                break;\n            case ERROR_TYPE.ColumnNotExist:\n                errMsg = this.info_['isOrder'] ?\n                    `Column '${this.info_['column']}' in order query does not exist` :\n                    `Column '${this.info_['column']}' does not exist`;\n                break;\n            case ERROR_TYPE.EnableSearchOff:\n                errMsg = \"Search is turned off for the Column '\" + this.info_['column'] + \"'\";\n                break;\n            case ERROR_TYPE.NullValue:\n                errMsg = \"Null value is not allowed for column '\" + this.info_['ColumnName'] + \"'\";\n                break;\n            case ERROR_TYPE.WrongDataType:\n                errMsg = \"Supplied value for column '\" + this.info_['column'] +\n                    \"' have wrong data type\";\n                break;\n            case ERROR_TYPE.TableNotExist:\n                errMsg = \"Table '\" + this.info_['tableName'] + \"' does not exist\";\n                break;\n            case ERROR_TYPE.DbNotExist:\n                errMsg = `Database with name ${this.info_['dbName']} does not exist`;\n                break;\n            case ERROR_TYPE.NotObject:\n                errMsg = \"supplied value is not object\";\n                break;\n            case ERROR_TYPE.InvalidOp:\n                errMsg = \"Invalid Config '\" + this.info_['Config'] + \" '\";\n                break;\n            case ERROR_TYPE.DbBlocked:\n                errMsg = `database is blocked, cant be deleted right now`;\n                break;\n            case ERROR_TYPE.NullValueInWhere:\n                errMsg = `Null/undefined is not allowed in where. Column '${this.info_['column']}' has null`;\n                break;\n            case ERROR_TYPE.MethodNotExist:\n                errMsg = `method '${this.info_}' does not exist.`;\n                break;\n            case ERROR_TYPE.IndexedDbNotSupported:\n                errMsg = \"Browser does not support indexeddb\";\n                break;\n            case ERROR_TYPE.InvalidJoinQuery:\n            case ERROR_TYPE.InvalidGroupQuery:\n            case ERROR_TYPE.InvalidOrderQuery:\n            case ERROR_TYPE.ImportScriptsFailed:\n                errMsg = this.info_;\n                break;\n            case ERROR_TYPE.InvalidMiddleware:\n                errMsg = `No function ${this.info_} is found.`;\n                break;\n            default:\n                if (!this.type) {\n                    this.type = ERROR_TYPE.Unknown\n                }\n                errMsg = this.message;\n                break;\n        }\n        return errMsg;\n    }\n}","import { DbMeta, TableMeta } from \"@worker/model\";\nimport { IDB_MODE, QUERY_OPTION, promise, forObj, IColumn, IDataBase, InitDbResult } from \"@/common\";\nimport { LogHelper, userDbSchema } from \"@worker/utils\";\nimport { MetaHelper } from \"../meta_helper\";\n\n\nexport class IDBUtil {\n\n    db: DbMeta;\n\n    con: IDBDatabase;\n    tx: IDBTransaction;\n\n    logger = new LogHelper(null);\n\n    emptyTx() {\n        if (!this.tx) return;\n        this.tx.oncomplete = null;\n        this.tx.onabort = null;\n        this.tx.onerror = null;\n        this.tx = null;\n    }\n\n    createTransactionIfNotExist(tables: string[], mode?: IDB_MODE) {\n        if (!this.tx) {\n            this.createTransaction(tables, mode);\n        }\n    }\n\n    createTransaction(tables: string[], mode = IDB_MODE.ReadWrite) {\n        this.tx = this.con.transaction(tables, mode);\n        return promise((res, rej) => {\n            this.tx.oncomplete = res;\n            this.tx.onabort = res;\n            this.tx.onerror = rej;\n        });\n    }\n\n    keyRange(value, op?) {\n        let keyRange: IDBKeyRange;\n        switch (op) {\n            case QUERY_OPTION.Between: keyRange = IDBKeyRange.bound(value.low, value.high, false, false); break;\n            case QUERY_OPTION.GreaterThan: keyRange = IDBKeyRange.lowerBound(value, true); break;\n            case QUERY_OPTION.GreaterThanEqualTo: keyRange = IDBKeyRange.lowerBound(value); break;\n            case QUERY_OPTION.LessThan: keyRange = IDBKeyRange.upperBound(value, true); break;\n            case QUERY_OPTION.LessThanEqualTo: keyRange = IDBKeyRange.upperBound(value); break;\n            default: keyRange = IDBKeyRange.only(value); break;\n        }\n        return keyRange;\n    }\n\n    objectStore(name: string) {\n        return this.tx.objectStore(name);\n    }\n\n    abortTransaction() {\n        if (this.tx) {\n            this.tx.abort();\n        }\n    }\n\n    close() {\n        if (this.con) {\n            this.con.close();\n        }\n        // wait for 100 ms before success\n        return promise(res => {\n            this.con = null;\n            setTimeout(res, 100);\n        });\n    }\n\n    initDb(db: DbMeta) {\n        let isDbCreated = false;\n        const dbVersion = db.version;\n        let oldVersion;\n        const initLogic = (res, rej) => {\n            const dbOpenRequest = indexedDB.open(db.name, dbVersion);\n            dbOpenRequest.onsuccess = () => {\n                this.con = dbOpenRequest.result;\n                this.con.onversionchange = (e: any) => {\n                    // if (e.newVersion === null) { // An attempt is made to delete the db\n                    e.target.close(); // Manually close our connection to the db\n                    // }\n                }\n\n                res({\n                    isCreated: isDbCreated,\n                    oldVersion: oldVersion,\n                    newVersion: dbVersion\n                } as InitDbResult);\n            }\n\n            dbOpenRequest.onerror = (e) => {\n                console.error(\"error\", e);\n                rej(e);\n            };\n\n            dbOpenRequest.onupgradeneeded = (e: IDBVersionChangeEvent) => {\n                oldVersion = e.oldVersion;\n                const target: {\n                    result: IDBDatabase,\n                    transaction: IDBTransaction\n                } = (e as any).target\n                const upgradeConnection = target.result;\n                isDbCreated = true;\n                const transaction = target.transaction;\n                const storeNames = upgradeConnection.objectStoreNames;\n                const createObjectStore = (table: TableMeta) => {\n                    const option: IDBObjectStoreParameters = table.primaryKey ? {\n                        keyPath: table.primaryKey\n                    } : {\n                            autoIncrement: true\n                        }\n\n                    const store = upgradeConnection.createObjectStore(table.name, option);\n                    table.columns.forEach(column => {\n                        addColumn(store, column)\n                    });\n                }\n                const addColumn = (store: IDBObjectStore, column: IColumn) => {\n                    const columnName = column.name;\n                    if (column.enableSearch && !store.indexNames.contains(columnName)) {\n                        const options = column.primaryKey ? { unique: true } : { unique: column.unique };\n                        options['multiEntry'] = column.multiEntry;\n                        const keyPath = column.keyPath == null ? columnName : column.keyPath;\n                        store.createIndex(columnName, keyPath, options);\n                    }\n                }\n                const deleteColumn = (store: IDBObjectStore, table: TableMeta, columnName: string) => {\n                    const index = table.columns.findIndex(q => q.name === columnName);\n                    if (index >= 0) {\n                        table.columns.splice(index, 1);\n                        store.deleteIndex(columnName);\n                    }\n                }\n                db.tables.forEach(table => {\n                    if (!storeNames.contains(table.name)) {\n                        return createObjectStore(table);\n                    }\n                    const store = transaction.objectStore(table.name);\n                    for (let i = oldVersion + 1; i <= dbVersion; i++) {\n                        const alterQuery = table.alter[i];\n                        if (alterQuery) {\n                            if (alterQuery.add) {\n                                const newColumns = table.setColumn(alterQuery.add);\n                                newColumns.forEach(column => {\n                                    addColumn(store, column);\n                                    table.columns.push(column);\n                                })\n                            }\n                            forObj(\n                                alterQuery.drop || {}, ((columnName) => {\n                                    deleteColumn(store, table, columnName);\n                                })\n                            )\n                            forObj(\n                                alterQuery.modify || {}, ((columnName, column: IColumn) => {\n                                    const shouldDelete = column.multiEntry || column.keyPath || column.unique;\n                                    let targetColumn = table.columns.find(q => q.name === columnName);\n                                    const newColumn = Object.assign(targetColumn, column);\n                                    newColumn.name = columnName;\n                                    if (shouldDelete) {\n                                        deleteColumn(store, table, columnName);\n                                        addColumn(store, newColumn);\n                                        table.columns.push(newColumn);\n                                    }\n                                })\n                            )\n                        }\n                    }\n                });\n\n                for (let i = 0, length = storeNames.length; i < length; i++) {\n                    const storeName = storeNames.item(i);\n                    const tableIndex = db.tables.findIndex(qry => qry.name === storeName);\n                    if (tableIndex < 0) {\n                        upgradeConnection.deleteObjectStore(storeName);\n                    }\n                }\n\n            }\n        }\n        return promise<InitDbResult>(initLogic)\n    }\n}","export const promiseAll = <T>(promises: any) => {\n    return Promise.all<T>(promises);\n};","export const promiseReject = (value) => {\n    return Promise.reject(value);\n}","import { LogHelper } from \"./log_helper\";\n\nexport const getError = (e) => {\n    const customError = e instanceof LogHelper;\n    if (customError) {\n        e.logError();\n        return (e as LogHelper).get();\n    }\n    else {\n        let error;\n        if (e.name) {\n            error = new LogHelper(e.name);\n            error.message = e.message;\n        }\n        else {\n            error = new LogHelper((e as any).target.error.name);\n            error.message = (e as any).target.error.message;\n        }\n        if (process.env.NODE_ENV === 'dev') {\n            error.logError();\n        }\n        return error.get();\n    }\n}","import { ERROR_TYPE } from \"@/common\"\nimport { getError } from \"./get_error\";\n\nexport const getErrorFromException = (ex, type = ERROR_TYPE.InvalidQuery) => {\n    ex.name = type;\n    return getError(ex);\n}","import { IDBUtil } from \"@worker/idbutil\";\nimport { IInsertQuery, ISelectQuery, ERROR_TYPE, IUpdateQuery } from \"@/common\";\nimport { LogHelper, getError, promiseReject, getErrorFromException } from \"@worker/utils\";\nimport { DbMeta } from \"@worker/model\";\n\nexport class Base {\n    // db: DbMeta;\n\n    get db() {\n        return this.util.db;\n    }\n\n    util: IDBUtil;\n    query: IInsertQuery | ISelectQuery | IUpdateQuery;\n\n    rowAffected = 0;\n    isTxQuery = false;\n    objectStore: IDBObjectStore;\n    tableName: string;\n\n    protected results: any[] = [];\n    // get tableName() {\n    //     return (this.query as SelectQuery).from || (this.query as InsertQuery).into\n    // }\n\n    table(name?: string) {\n        const tableName = name || this.tableName;\n        return this.db.tables.find(q => q.name === tableName)\n    }\n\n    primaryKey(tableName?: string) {\n        return this.table(tableName).primaryKey;\n    }\n\n\n    protected getColumnInfo(columnName: string, tableName?: string) {\n        return this.table(tableName).columns.find(column => column.name === columnName);\n    }\n\n\n\n    onException(ex: DOMException, type?) {\n        console.error(ex);\n        this.util.abortTransaction();\n        return promiseReject(\n            getErrorFromException(ex, type)\n        );\n    }\n}","import { DATA_TYPE } from \"@/common\";\n\nexport const getDataType = (value) => {\n    if (value == null) {\n        return DATA_TYPE.Null;\n    }\n    const type = typeof value;\n    switch (type) {\n        case 'object':\n            if (Array.isArray(value)) {\n                return DATA_TYPE.Array;\n            }\n            if (value instanceof Date) {\n                return DATA_TYPE.DateTime;\n            }\n    }\n    return type;\n}","export const isNull = (value) => {\n    if (value == null) {\n        return true;\n    } else {\n        switch (typeof value) {\n            // case 'string': return value.length === 0;\n            case 'number': return isNaN(value);\n        }\n    }\n    return false;\n};","import { TableMeta } from \"@/worker/model/table_meta\";\nimport { IColumn, TStringAny, ERROR_TYPE, DATA_TYPE, IInsertQuery } from \"@/common\";\nimport { getDataType, LogHelper, isNull } from \"@/worker/utils\";\n\n\nexport class ValuesChecker {\n    table: TableMeta;\n    autoIncrementValue;\n    query: IInsertQuery;\n\n    constructor(table: TableMeta, autoIncValues) {\n        this.table = table;\n        this.autoIncrementValue = autoIncValues;\n    }\n\n    checkAndModifyValues(query: IInsertQuery) {\n        let err: LogHelper;\n        this.query = query;\n        const values = query.values;\n        const ignoreIndexes = [];\n        values.every((item, index) => {\n            err = this.checkAndModifyValue(item);\n            if (query.ignore && err) {\n                ignoreIndexes.push(index);\n                err = null;\n            }\n            return err ? false : true;\n        });\n        ignoreIndexes.forEach(index => {\n            values.splice(index, 1);\n        });\n        return { err, values };\n    }\n\n    private checkAndModifyValue(value) {\n        let error: LogHelper;\n        this.table.columns.every(column => {\n            error = this.checkAndModifyColumnValue_(column, value);\n            return error ? false : true;\n        })\n        return error;\n    }\n\n    private checkNotNullAndDataType_(column: IColumn, value: TStringAny) {\n        // check not null schema\n        if (column.notNull && isNull(value[column.name])) {\n            return this.getError(ERROR_TYPE.NullValue, { ColumnName: column.name });\n        }\n        // check datatype\n        else if (column.dataType && !isNull(value[column.name]) &&\n            getDataType(value[column.name]) !== column.dataType) {\n            return this.getError(ERROR_TYPE.WrongDataType, { column: column.name });\n        }\n    }\n\n    private checkAndModifyColumnValue_(column: IColumn, value: TStringAny) {\n        const columnValue = value[column.name];\n        // check auto increment scheme\n        if (column.autoIncrement) {\n            // if value is null, then create the autoincrement value\n            if (isNull(columnValue)) {\n                value[column.name] = ++this.autoIncrementValue[column.name];\n            }\n            else {\n                if (getDataType(columnValue) === DATA_TYPE.Number) {\n                    // if column value is greater than autoincrement value saved, then make the\n                    // column value as autoIncrement value\n                    if (columnValue > this.autoIncrementValue[column.name]) {\n                        this.autoIncrementValue[column.name] = columnValue;\n                    }\n                }\n            }\n        }\n        // check Default Schema\n        else if (column.default !== undefined && isNull(columnValue)) {\n            value[column.name] = column.default;\n        }\n        const query = this.query;\n        if (query.validation) {\n            return this.checkNotNullAndDataType_(column, value);\n        }\n    }\n\n    private getError(error: ERROR_TYPE, details: object) {\n        return new LogHelper(error, details);\n    }\n}","import { IColumn, DATA_TYPE, ERROR_TYPE } from \"@/common\";\nimport { LogHelper, isNull, getDataType } from \"@worker/utils\";\nimport { TableMeta } from \"@worker/model\";\n\nexport class SchemaChecker {\n    table: TableMeta;\n    constructor(table: TableMeta) {\n        this.table = table;\n    }\n\n    check(setValue: object, tblName: string) {\n        let log: LogHelper;\n        if (typeof setValue === DATA_TYPE.Object) {\n            if (this.table) {\n                // loop through table column and find data is valid\n                this.table.columns.every((column) => {\n                    if (column.name in setValue) {\n                        log = this.checkByColumn_(column, setValue[column.name]);\n                    }\n                    return log ? false : true;\n                });\n            }\n            else {\n                log = new LogHelper(ERROR_TYPE.TableNotExist, { tableName: tblName });\n            }\n        }\n        else {\n            log = new LogHelper(ERROR_TYPE.NotObject);\n        }\n        return log;\n    }\n\n\n\n    private checkByColumn_(column: IColumn, value) {\n        // check not null schema\n        if (column.notNull === true && isNull(value)) {\n            return new LogHelper(ERROR_TYPE.NullValue, { ColumnName: column.name });\n        }\n\n        // check datatype\n        const type = getDataType(value);\n        const checkFurther = value != null;\n        if (column.dataType && checkFurther) {\n            if (type !== column.dataType && type !== 'object') {\n                return new LogHelper(ERROR_TYPE.WrongDataType, { column: column.name });\n            }\n        }\n\n        // check allowed operators\n        if (checkFurther && type === 'object') {\n            const allowedOp = ['+', '-', '*', '/', '{push}'];\n            for (const prop in value) {\n                if (allowedOp.indexOf(prop) < 0 && column.dataType && type !== column.dataType) {\n                    return new LogHelper(ERROR_TYPE.WrongDataType, { column: column.name });\n                }\n            }\n        }\n    }\n}","import { IInsertQuery, DATA_TYPE, ERROR_TYPE, ISelectQuery, QUERY_OPTION, IUpdateQuery, API } from \"@/common\";\nimport { LogHelper, getDataType } from \"@/worker/utils\";\nimport { DbMeta } from \"../model\";\nimport { ValuesChecker } from \"@worker/executors/insert\";\nimport { SchemaChecker } from \"./update/schema_checker\";\n\nexport class QueryHelper {\n    db: DbMeta;\n\n    constructor(dbSchema: DbMeta) {\n        this.db = dbSchema;\n    }\n\n    validate(api: API, query: IInsertQuery | ISelectQuery | IUpdateQuery) {\n        switch (api) {\n            case API.Select:\n            case API.Remove:\n            case API.Count:\n                return this.checkSelect(query as ISelectQuery);\n            case API.Insert:\n                return this.checkInsertQuery(query as IInsertQuery);\n            case API.Update:\n                return this.checkUpdate(query as IUpdateQuery);\n        }\n    }\n\n    private getTable_(tableName: string) {\n        return this.db.tables.find(q => q.name === tableName);\n    }\n\n    isInsertQryValid(query: IInsertQuery) {\n        const table = this.getTable_(query.into);\n        let log: LogHelper;\n        if (table) {\n            switch (getDataType(query.values)) {\n                case DATA_TYPE.Array:\n                    break;\n                case DATA_TYPE.Null:\n                    log = new LogHelper(ERROR_TYPE.NoValueSupplied);\n                    break;\n                default:\n                    log = new LogHelper(ERROR_TYPE.NotArray);\n            }\n        }\n        else {\n            log = new LogHelper(ERROR_TYPE.TableNotExist, { tableName: query.into });\n        }\n        return {\n            table, log\n        };\n    }\n\n    private checkUpdate(query: IUpdateQuery) {\n        let err = new SchemaChecker(this.getTable_(query.in)).\n            check(query.set, query.in);\n        if (err) return err;\n        if (query.where != null) {\n            err = this.checkForNullInWhere_(query);\n            if (err) return err;\n            this.addGreatAndLessToNotOp_(query as any);\n        }\n    }\n\n    private checkSelect(query: ISelectQuery) {\n        const table = this.getTable_(query.from);\n        if (!table) {\n            return new LogHelper(ERROR_TYPE.TableNotExist,\n                { tableName: query.from }\n            );\n        }\n\n        if (query.where) {\n            const err = this.checkForNullInWhere_(query);\n            if (err) return err;\n            this.addGreatAndLessToNotOp_(query);\n        }\n    }\n\n    private checkForNullInWhere_(query): LogHelper {\n        for (const columnName in query.where) {\n            if (query.where[columnName] == null) {\n                return new LogHelper(ERROR_TYPE.NullValueInWhere, { column: columnName });\n            }\n        }\n    }\n\n    private addGreatAndLessToNotOp_(query: ISelectQuery) {\n        const whereQuery = query.where;\n        const containsNot = (qry: object, keys: string[]) => {\n            return keys.findIndex(key => qry[key][QUERY_OPTION.NotEqualTo] != null) >= 0;\n        };\n        const addToSingleQry = (qry, keys: string[]) => {\n            let value;\n            keys.forEach((prop) => {\n                value = qry[prop];\n                if (value[QUERY_OPTION.NotEqualTo] != null) {\n                    qry[prop][QUERY_OPTION.GreaterThan] = value[QUERY_OPTION.NotEqualTo];\n                    if (qry[QUERY_OPTION.Or] === undefined) {\n                        qry[QUERY_OPTION.Or] = {};\n                        qry[QUERY_OPTION.Or][prop] = {};\n                    }\n                    else if (qry[QUERY_OPTION.Or][prop] === undefined) {\n                        qry[QUERY_OPTION.Or][prop] = {};\n                    }\n                    qry[QUERY_OPTION.Or][prop][QUERY_OPTION.LessThan] = value[QUERY_OPTION.NotEqualTo];\n                    delete qry[prop][QUERY_OPTION.NotEqualTo];\n                }\n            });\n            return qry;\n        };\n        switch (getDataType(whereQuery)) {\n            case DATA_TYPE.Object:\n                const queryKeys = Object.keys(whereQuery);\n                if (containsNot(whereQuery, queryKeys)) {\n                    if (queryKeys.length === 1) {\n                        query.where = addToSingleQry(whereQuery, queryKeys);\n                    }\n                    else {\n                        const whereTmpQry = [];\n                        queryKeys.forEach((prop) => {\n                            whereTmpQry.push(addToSingleQry({ [prop]: whereQuery[prop] }, [prop]));\n                        });\n                        query.where = whereTmpQry;\n                    }\n                }\n                break;\n            default:\n                const whereTmp = [];\n                (whereQuery as object[]).forEach(qry => {\n                    const qryKeys = Object.keys(qry);\n                    if (containsNot(qry, qryKeys)) {\n                        qry = addToSingleQry(qry, qryKeys);\n                    }\n                    whereTmp.push(qry);\n                });\n                query.where = whereTmp;\n        }\n    }\n\n    private checkInsertQuery(query: IInsertQuery) {\n        const validResult = this.isInsertQryValid(query);\n        let table = validResult.table;\n        const error = validResult.log;\n        if (error) return error;\n        if (query.skipDataCheck) return;\n        const valueCheckerInstance = new ValuesChecker(table, table.autoIncColumnValue);\n        const { values, err } = valueCheckerInstance.checkAndModifyValues(query);\n        query.values = values;\n        return err;\n    }\n}","export * from \"./values_checker\";\nimport { IInsertQuery, promise, promiseAll, TStringAny, API, IDB_MODE } from \"@/common\";\nimport { Base } from \"@worker/executors/base\";\nimport { IDBUtil } from \"@/worker/idbutil\";\nimport { QueryHelper } from \"@worker/executors/query_helper\";\nimport { DbMeta } from \"@/worker/model\";\nimport { getError, promiseReject } from \"@/worker/utils\";\nimport { MetaHelper } from \"@/worker/meta_helper\";\n\nexport class Insert extends Base {\n\n    query: IInsertQuery;\n\n    private valuesAffected_ = [];\n\n    constructor(query: IInsertQuery, util: IDBUtil) {\n        super();\n        if (query.validation == null) {\n            query.validation = true;\n        }\n        this.query = query;\n        this.util = util;\n        this.tableName = query.into;\n    }\n\n    execute(beforeInsert: () => Promise<any>) {\n        const db = this.db;\n        const err = new QueryHelper(db).validate(API.Insert, this.query);\n        if (err) return promiseReject(err);\n\n        return beforeInsert().then(_ => {\n            return this.insertData_(db).then(_ => {\n                return this.query.return ? this.valuesAffected_ : this.rowAffected\n            })\n        }).catch(err => {\n            this.util.abortTransaction();\n            return promiseReject(err);\n        })\n    }\n\n    private insertData_(db: DbMeta) {\n\n        let onInsertData;\n        let addMethod;\n\n        const query = this.query;\n        if (query.return) {\n            onInsertData = (value) => {\n                this.valuesAffected_.push(value);\n            };\n\n        }\n        else {\n            onInsertData = (value) => {\n                ++this.rowAffected;\n            };\n        }\n        addMethod = (() => {\n            const idbMethod = query.upsert ? \"put\" : \"add\";\n            if (query.ignore && !this.isTxQuery) {\n                return (value) => {\n                    const tx = this.util.con.transaction(query.into, IDB_MODE.ReadWrite);\n                    const objectStore = tx.objectStore(query.into);\n                    return objectStore[idbMethod](value);\n                };\n            }\n            if (!this.isTxQuery) {\n                this.util.createTransaction(\n                    [query.into, MetaHelper.tableName],\n                )\n            }\n            this.objectStore = this.util.objectStore(this.tableName);\n            return (value) => {\n                return this.objectStore[idbMethod](value);\n            };\n        })();\n\n        return promiseAll(\n            query.values.map((value) => {\n                return promise((res, rej) => {\n                    const addResult = addMethod(value);\n                    addResult.onerror = (err) => {\n                        if (query.ignore) {\n                            res();\n                        } else {\n                            rej(err);\n                        }\n                    }\n                    addResult.onsuccess = function () {\n                        onInsertData(value);\n                        res();\n                    };\n                });\n            })\n        ).then(() => {\n            MetaHelper.set(MetaHelper.dbSchema, db, this.util);\n        });\n    }\n}","export const setCrossBrowserIndexedDb = () => {\n    try {\n        if (!indexedDB) {\n            indexedDB = (self as any).mozIndexedDB ||\n                (self as any).webkitIndexedDB || (self as any).msIndexedDB;\n        }\n        if (indexedDB) {\n            IDBTransaction = IDBTransaction ||\n                (self as any).webkitIDBTransaction || (self as any).msIDBTransaction;\n            (self as any).IDBKeyRange = (self as any).IDBKeyRange ||\n                (self as any).webkitIDBKeyRange || (self as any).msIDBKeyRange;\n        }\n        else {\n            return false;\n        }\n    } catch (ex) {\n        return false;\n    }\n    return true;\n};","import { setCrossBrowserIndexedDb } from \"@worker/utils\";\n\nexport const IS_WORKER = typeof (self as any).alert === 'undefined' && typeof ServiceWorkerGlobalScope === 'undefined';\nexport const IS_IDB_SUPPORTED = setCrossBrowserIndexedDb();","export const getKeys = (value) => {\n    return Object.keys(value);\n};","export const isArray = (value) => {\n    return Array.isArray(value);\n};","export const isObject = (value) => {\n    return typeof value === 'object';\n};","import { getKeys } from \"./get_keys\"\n\nexport const getLength = (value): Number => {\n    return getKeys(value).length;\n}","export const getObjectFirstKey = (value) => {\n    for (const key in value) {\n        return key;\n    }\n};","import { Select } from \"./index\";\n\nexport const setPushResult = function (this: Select) {\n    if (this.query.case) {\n        this.pushResult = (value) => {\n            let columnName: string;\n            this.thenEvaluator.setCaseAndValue(this.query.case, value);\n            for (columnName in this.query.case) {\n                value[columnName] = this.thenEvaluator.setColumn(columnName).evaluate();\n            }\n            this.results.push(value);\n        };\n    }\n    else {\n        this.pushResult = (value) => {\n            this.results.push(value);\n        };\n    }\n}\n\nexport const setLimitAndSkipEvaluationAtEnd = function (this: Select) {\n    if (this.query.limit) {\n        this.shouldEvaluateLimitAtEnd = true;\n    }\n    if (this.query.skip) {\n        this.shouldEvaluateSkipAtEnd = true;\n    }\n}\n\nexport const removeDuplicates = function (this: Select) {\n    let datas = this.results;\n    // free results memory\n    this.results = null;\n    const key = this.primaryKey();\n    const lookupObject = {};\n    for (let i = 0, len = datas.length; i < len; i++) {\n        lookupObject[datas[i][key]] = datas[i];\n    }\n    datas = [];\n    for (const i in lookupObject) {\n        datas.push(lookupObject[i]);\n    }\n    this.results = datas;\n}","import { ICaseOption, QUERY_OPTION } from \"@/common\";\n\nexport class ThenEvaluator {\n    private columnName_: string;\n    private value;\n    private caseQuery_: { [columnName: string]: [ICaseOption] };\n    private caseColumnQuery_: ICaseOption[];\n    private length_: number;\n\n    setCaseAndValue(caseQuery: any, value) {\n        this.caseQuery_ = caseQuery;\n        this.setValue(value);\n    }\n\n    setCaseAndColumn(caseQuery: { [columnName: string]: [ICaseOption] }, columnName: string) {\n        this.caseQuery_ = caseQuery;\n        this.setColumn(columnName);\n        return this;\n    }\n\n    setColumn(columnName: string) {\n        this.columnName_ = columnName;\n        this.caseColumnQuery_ = this.caseQuery_[this.columnName_];\n        this.length_ = this.caseColumnQuery_.length;\n        return this;\n    }\n\n    setValue(value) {\n        this.value = value;\n        return this;\n    }\n\n    evaluate() {\n        for (let i = 0; i < this.length_; i++) {\n            if (this.checkCase_(this.caseColumnQuery_[i]) === true) {\n                return this.caseColumnQuery_[i].then;\n            }\n        }\n        const lastThen = this.caseColumnQuery_[this.length_ - 1].then;\n        return lastThen == null ? this.value[this.columnName_] : lastThen;\n    }\n\n    private checkCase_(cond: ICaseOption) {\n        let queryOption;\n        for (queryOption in cond) {\n            switch (queryOption) {\n                case QUERY_OPTION.GreaterThan:\n                    if (this.value[this.columnName_] > cond[queryOption]) {\n                        return true;\n                    } break;\n                case QUERY_OPTION.Equal:\n                    if (this.value[this.columnName_] === cond[queryOption]) {\n                        return true;\n                    } break;\n                case QUERY_OPTION.LessThan:\n                    if (this.value[this.columnName_] < cond[queryOption]) {\n                        return true;\n                    } break;\n                case QUERY_OPTION.GreaterThanEqualTo:\n                    if (this.value[this.columnName_] >= cond[queryOption]) {\n                        return true;\n                    } break;\n                case QUERY_OPTION.LessThanEqualTo:\n                    if (this.value[this.columnName_] <= cond[queryOption]) {\n                        return true;\n                    } break;\n                case QUERY_OPTION.NotEqualTo:\n                    if (this.value[this.columnName_] !== cond[queryOption]) {\n                        return true;\n                    } break;\n                case QUERY_OPTION.Between:\n                    if (this.value[this.columnName_] > cond[queryOption].low && this.value[this.columnName_] < cond[queryOption].high) {\n                        return true;\n                    } break;\n            }\n            return false;\n        }\n    }\n}","import { Select } from \"./index\";\nimport { LogHelper, promiseReject, getError } from \"@/worker/utils\";\nimport { ERROR_TYPE, promise } from \"@/common\";\n\nexport const executeWhereUndefinedLogic = function (this: Select) {\n    let cursorRequest: IDBRequest;\n    if (this.query.order && this.query.order.idbSorting !== false && this.query.order.by) {\n        if (this.objectStore.indexNames.contains(this.query.order.by as string)) {\n            const orderType: IDBCursorDirection = this.query.order.type &&\n                this.query.order.type.toLowerCase() === 'desc' ? 'prev' : 'next';\n            this.sorted = true;\n            cursorRequest = this.objectStore.index(this.query.order.by as string).\n                openCursor(null, orderType);\n        }\n        else {\n            return promiseReject(\n                new LogHelper(\n                    ERROR_TYPE.ColumnNotExist,\n                    { column: this.query.order.by, isOrder: true }\n                )\n            );\n        }\n    }\n    else {\n        cursorRequest = this.objectStore.openCursor();\n    }\n    const onSuccess = (() => {\n        if (this.shouldEvaluateLimitAtEnd === false && this.shouldEvaluateSkipAtEnd === false) {\n            if (this.skipRecord && this.limitRecord) {\n                return executeSkipAndLimit;\n            }\n            else if (this.skipRecord) {\n                return executeSkip;\n            }\n            else if (this.limitRecord) {\n                return executeLimit;\n            }\n        }\n        return executeSimple;\n    })();\n    return promise<void>((res, rej) => {\n        cursorRequest.onerror = rej;\n        cursorRequest.onsuccess = onSuccess.call(this, res);\n    });\n}\n\nconst executeSkipAndLimit = function (this: Select, onFinished) {\n    let recordSkipped = false,\n        cursor: IDBCursorWithValue;\n    return (e) => {\n        cursor = (e as any).target.result;\n        if (cursor) {\n            if (recordSkipped && this.results.length !== this.limitRecord) {\n                this.pushResult(cursor.value);\n                cursor.continue();\n            }\n            else {\n                recordSkipped = true;\n                cursor.advance(this.skipRecord);\n            }\n        } else {\n            onFinished();\n        }\n    };\n}\n\nconst executeSkip = function (this: Select, onFinished) {\n    let recordSkipped = false,\n        cursor;\n    return (e: any) => {\n        cursor = e.target.result;\n        if (cursor) {\n            if (recordSkipped) {\n                this.pushResult(cursor.value);\n                cursor.continue();\n            }\n            else {\n                recordSkipped = true;\n                cursor.advance(this.skipRecord);\n            }\n        } else {\n            onFinished();\n        }\n    };\n}\n\nconst executeSimple = function (this: Select, onFinished) {\n    let cursor;\n    return (e: any) => {\n        cursor = e.target.result;\n        if (cursor) {\n            this.pushResult(cursor.value);\n            (cursor as any).continue();\n        }\n        else {\n            onFinished();\n        }\n    };\n}\n\nconst executeLimit = function (this: Select, onFinished) {\n    let cursor;\n    return (e: any) => {\n        cursor = e.target.result;\n        if (cursor && this.results.length !== this.limitRecord) {\n            this.pushResult(cursor.value);\n            cursor.continue();\n        } else {\n            onFinished();\n        }\n    };\n}\n","export const removeSpace = (value: string) => {\n    return value.replace(/\\s/g, '');\n};","import { Select } from \"./\";\nimport { removeSpace, getDataType, getError, LogHelper } from \"@/worker/utils\";\nimport { ERROR_TYPE, DATA_TYPE, ICaseOption, IColumn, IOrderQuery } from \"@/common\";\n\nexport const processGroupDistinctAggr = function (this: Select) {\n    if (this.query.distinct) {\n        const groupBy = [];\n        const result = this.results[0];\n        for (const key in result) {\n            groupBy.push(key);\n        }\n        const primaryKey = this.primaryKey(),\n            index = groupBy.indexOf(primaryKey);\n        groupBy.splice(index, 1);\n        this.query.groupBy = groupBy.length > 0 ? groupBy : null;\n    }\n    if (this.query.groupBy) {\n        if (this.query.aggregate) {\n            this.executeAggregateGroupBy();\n        }\n        else {\n            this.processGroupBy();\n        }\n    }\n    else if (this.query.aggregate) {\n        this.processAggregateQry();\n    }\n};\n\nconst getOrderColumnInfo = function (this: Select, orderColumn: string) {\n    let column: IColumn;\n    if (this.query.join == null) {\n        column = this.getColumnInfo(orderColumn);\n    }\n    else {\n        const splittedByDot = removeSpace(orderColumn).split(\".\");\n        orderColumn = splittedByDot[1];\n        column = this.getColumnInfo(orderColumn, splittedByDot[0]);\n    }\n    if (column == null) {\n        const valueFromFirstColumn = this.results[0][orderColumn];\n        if (valueFromFirstColumn) {\n            return {\n                dataType: getDataType(valueFromFirstColumn),\n                name: orderColumn\n            } as IColumn;\n        }\n        throw new LogHelper(ERROR_TYPE.ColumnNotExist,\n            { column: orderColumn, isOrder: true }\n        )\n\n    }\n    return column;\n}\n\nconst compareStringInDesc_ = (a: string, b: string) => {\n    return b.localeCompare(a);\n}\n\nconst compareStringinAsc_ = (a: string, b: string) => {\n    return a.localeCompare(b);\n}\n\nconst compareDefaultInDesc_ = (a: string, b) => {\n    return new String(b).localeCompare(a);\n}\n\nconst compareDefaultinAsc_ = (a, b: string) => {\n    return new String(a).localeCompare(b);\n}\n\nconst compareNumberInDesc_ = (a: number, b: number) => {\n    return b - a;\n}\n\nconst compareNumberinAsc_ = (a: number, b: number) => {\n    return a - b;\n}\n\nconst compareDateInDesc_ = (a: Date, b: Date) => {\n    return b.getTime() - a.getTime();\n}\n\nconst compareDateInAsc_ = (a: Date, b: Date) => {\n    return a.getTime() - b.getTime();\n}\n\nconst getValInDesc_ = function (this: Select, value1, value2, caseQuery: { [columnName: string]: [ICaseOption] }) {\n    for (const columnName in caseQuery) {\n        this.thenEvaluator.setCaseAndValue(caseQuery, value1);\n        const column1 = this.thenEvaluator.setColumn(columnName).evaluate();\n        this.thenEvaluator.setCaseAndValue(caseQuery, value2);\n        const column2 = this.thenEvaluator.setColumn(columnName).evaluate();\n        switch (typeof value1[column1]) {\n            case DATA_TYPE.String:\n                return compareStringInDesc_(value1[column1], value2[column2]);\n            default:\n                return compareNumberInDesc_(value1[column1], value2[column2]);\n        }\n    }\n}\n\nconst getValInAsc_ = function (this: Select, value1, value2, caseQuery: { [columnName: string]: [ICaseOption] }) {\n    for (const columnName in caseQuery) {\n        this.thenEvaluator.setCaseAndValue(caseQuery, value1);\n        const column1 = this.thenEvaluator.setColumn(columnName).evaluate();\n        this.thenEvaluator.setCaseAndValue(caseQuery, value2);\n        const column2 = this.thenEvaluator.setColumn(columnName).evaluate();\n        switch (typeof value1[column1]) {\n            case DATA_TYPE.String:\n                return compareStringinAsc_(value1[column1], value2[column2]);\n            default:\n                return compareNumberinAsc_(value1[column1], value2[column2]);\n        }\n    }\n}\n\nconst getValueComparer_ = (column: IColumn, order: IOrderQuery): (a, b) => number => {\n    switch (column.dataType) {\n        case DATA_TYPE.String:\n            return order.type === 'asc' ? compareStringinAsc_ : compareStringInDesc_;\n        case DATA_TYPE.Number:\n            return order.type === 'asc' ? compareNumberinAsc_ : compareNumberInDesc_;\n        case DATA_TYPE.DateTime:\n            return order.type === 'asc' ? compareDateInAsc_ : compareDateInDesc_;\n        default:\n            return order.type === 'asc' ? compareDefaultinAsc_ : compareDefaultInDesc_;\n    }\n\n}\n\nconst orderBy_ = function (this: Select, order: IOrderQuery) {\n    order.type = getOrderType_(order.type);\n    let orderColumn = order.by;\n    if (orderColumn != null && typeof orderColumn === DATA_TYPE.Object) {\n        if (order.type === \"asc\") {\n            this.results.sort((a, b) => {\n                return getValInAsc_.call(this, a, b, orderColumn as any);\n            });\n        }\n        else {\n            this.results.sort((a, b) => {\n                return getValInDesc_.call(this, a, b, orderColumn as any);\n            });\n        }\n    }\n    else {\n        const columnInfo = getOrderColumnInfo.call(this, orderColumn as string);\n        if (columnInfo != null) {\n            const orderMethod = getValueComparer_(columnInfo, order);\n            orderColumn = columnInfo.name;\n            if (order.case == null) {\n                this.results.sort((a, b) => {\n                    return orderMethod(a[orderColumn as string], b[orderColumn as string]);\n                });\n            }\n            else {\n                this.thenEvaluator.setCaseAndColumn({ [orderColumn as string]: order.case }, orderColumn as string);\n                this.results.sort((a, b) => {\n                    return orderMethod(\n                        this.thenEvaluator.setValue(a).evaluate(),\n                        this.thenEvaluator.setValue(b).evaluate()\n                    );\n                });\n            }\n        }\n    }\n\n}\n\nconst getOrderType_ = (type: string) => {\n    return type == null ? 'asc' : type.toLowerCase();\n}\n\nexport const processOrderBy = function (this: Select) {\n    const order = this.query.order;\n    if (order && this.results.length > 0 && !this.sorted) {\n        const orderQueryType = getDataType(order);\n        if (orderQueryType === DATA_TYPE.Object) {\n            orderBy_.call(this, order);\n        }\n        else if (orderQueryType === DATA_TYPE.Array) {\n            orderBy_.call(this, order[0]);\n            for (let i = 1, length = (order as any).length; i < length; i++) {\n                // if (this.error == null) {\n                const prevOrderQueryBy = order[i - 1].by;\n                const currentOrderQuery: IOrderQuery = order[i];\n                let currentorderQueryBy = currentOrderQuery.by;\n                const orderColumnDetail = getOrderColumnInfo.call(this, currentorderQueryBy as string);\n                if (orderColumnDetail != null) {\n                    currentorderQueryBy = orderColumnDetail.name;\n                    currentOrderQuery.type = getOrderType_(currentOrderQuery.type);\n                    const orderMethod = getValueComparer_(orderColumnDetail, currentOrderQuery);\n                    this.results.sort((a, b) => {\n                        if (a[prevOrderQueryBy] === b[prevOrderQueryBy]) {\n                            return orderMethod(\n                                a[currentorderQueryBy as string],\n                                b[currentorderQueryBy as string]);\n                        }\n                        return 0;\n                    });\n                }\n                // }\n            }\n        }\n    }\n}\n\nexport const processAggregateQry = function (this: Select) {\n    const datas = this.results;\n    const datasLength = datas.length;\n    const results = {};\n    let columnToAggregate;\n    // free results memory\n    this.results = undefined;\n    const getCount = () => {\n        let result = 0;\n        for (const i in datas) {\n            result += datas[i][columnToAggregate] ? 1 : 0;\n        }\n        return result;\n    };\n    const getMax = () => {\n        let result = 0;\n        for (const i in datas) {\n            result = result > datas[i][columnToAggregate] ?\n                result : datas[i][columnToAggregate];\n        }\n        return result;\n    };\n    const getMin = () => {\n        let result = Infinity, value = Infinity;\n        for (const i in datas) {\n            value = datas[i][columnToAggregate] ?\n                datas[i][columnToAggregate] : Infinity;\n            result = result < value ? result : value;\n        }\n        return result;\n    };\n    const getSum = () => {\n        let result = 0;\n        for (const i in datas) {\n            result += datas[i][columnToAggregate];\n        }\n        return result;\n    };\n    const getAvg = () => {\n        let result = 0;\n        for (const i in datas) {\n            result += datas[i][columnToAggregate];\n        }\n        return result / datasLength;\n    };\n    for (const prop in this.query.aggregate) {\n        const aggregateColumn = this.query.aggregate[prop];\n        const aggregateValType = getDataType(aggregateColumn);\n        let aggregateCalculator;\n        switch (prop) {\n            case 'count':\n                aggregateCalculator = getCount; break;\n            case 'max':\n                aggregateCalculator = getMax; break;\n            case 'min':\n                aggregateCalculator = getMin; break;\n            case 'sum':\n                aggregateCalculator = getSum; break;\n            case 'avg':\n                aggregateCalculator = getAvg; break;\n        }\n        switch (aggregateValType) {\n            case DATA_TYPE.String:\n                columnToAggregate = aggregateColumn;\n                results[`${prop}(${columnToAggregate})`] = aggregateCalculator();\n                break;\n            case DATA_TYPE.Array:\n                for (const key in aggregateColumn) {\n                    columnToAggregate = aggregateColumn[key];\n                    results[`${prop}(${columnToAggregate})`] = aggregateCalculator();\n                }\n        }\n    }\n\n    // add results to the first index of result\n    for (const prop in results) {\n        datas[0][prop] = results[prop];\n    }\n    this.results = [datas[0]];\n}","import { Select } from \".\";\nimport { getDataType, getObjectFirstKey } from \"@/worker/utils\";\nimport { QUERY_OPTION, DATA_TYPE } from \"@/common\";\n\nexport const processGroupBy = function (this: Select) {\n    const groupBy = this.query.groupBy as any;\n    let datas = this.results;\n    const lookUpObj = {};\n    // free results memory\n    this.results = this.query.groupBy = null;\n    if (getDataType(groupBy) !== DATA_TYPE.Object) {\n        if (getDataType(groupBy) === DATA_TYPE.String) {\n            for (const i in datas) {\n                lookUpObj[datas[i][groupBy as string]] = datas[i];\n            }\n        }\n        else {\n            let objKey;\n            for (const i in datas) {\n                objKey = \"\";\n                for (const column in groupBy) {\n                    objKey += datas[i][groupBy[column]];\n                }\n                lookUpObj[objKey] = datas[i];\n            }\n        }\n    }\n    else {\n        const caseQueryLength = Object.keys(groupBy).length;\n        if (caseQueryLength === 1) {\n            const groupByColumn = getObjectFirstKey(groupBy);\n            this.thenEvaluator.setCaseAndColumn(groupBy, groupByColumn);\n            for (const i in datas) {\n                lookUpObj[this.thenEvaluator.setValue(datas[i]).evaluate()] = datas[i];\n            }\n        }\n        else {\n            let objKey;\n            for (const i in datas) {\n                objKey = \"\";\n                this.thenEvaluator.setCaseAndValue(groupBy, datas[i]);\n                for (const column in groupBy) {\n                    objKey += this.thenEvaluator.setColumn(column).evaluate();\n                }\n                lookUpObj[objKey] = datas[i];\n            }\n        }\n    }\n    // free datas memory\n    datas = [];\n    for (const i in lookUpObj) {\n        datas.push(lookUpObj[i]);\n    }\n    this.results = datas;\n}\n\nexport const executeAggregateGroupBy = function (this: Select) {\n    const grpQry = this.query.groupBy as any;\n    let datas = this.results;\n    // free results memory\n    this.results = undefined;\n    const lookUpObj = {};\n    // assign aggregate\n    const aggregateQry = this.query.aggregate;\n\n    let index;\n    let objKey;\n    let value;\n    let columnToAggregate;\n    const calculateAggregate = () => {\n        const getCount = () => {\n            value = lookUpObj[objKey];\n            // get old value\n            value = value ? value[\"count(\" + columnToAggregate + \")\"] : 0;\n            // add with old value if data exist\n            value += datas[index][columnToAggregate] ? 1 : 0;\n            return value;\n        };\n        const getMax = () => {\n            value = lookUpObj[objKey];\n            // get old value\n            value = value ? value[\"max(\" + columnToAggregate + \")\"] : 0;\n            datas[index][columnToAggregate] = datas[index][columnToAggregate] ?\n                datas[index][columnToAggregate] : 0;\n            // compare between old value and new value\n            return value > datas[index][columnToAggregate] ? value : datas[index][columnToAggregate];\n        };\n        const getMin = () => {\n            value = lookUpObj[objKey];\n            // get old value\n            value = value ? value[\"min(\" + columnToAggregate + \")\"] : Infinity;\n            datas[index][columnToAggregate] = datas[index][columnToAggregate] ?\n                datas[index][columnToAggregate] : Infinity;\n            // compare between old value and new value\n            return value < datas[index][columnToAggregate] ? value : datas[index][columnToAggregate];\n        };\n        const getSum = () => {\n            value = lookUpObj[objKey];\n            // get old value\n            value = value ? value[\"sum(\" + columnToAggregate + \")\"] : 0;\n            // add with old value if data exist\n            value += datas[index][columnToAggregate] ? datas[index][columnToAggregate] : 0;\n            return value;\n        };\n        const getAvg = () => {\n            value = lookUpObj[objKey];\n            // get old sum value\n            let sumOfColumn = value ? value[\"sum(\" + columnToAggregate + \")\"] : 0;\n            // add with old value if data exist\n            sumOfColumn += datas[index][columnToAggregate] ? datas[index][columnToAggregate] : 0;\n            datas[index][\"sum(\" + columnToAggregate + \")\"] = sumOfColumn;\n            // get old count value\n            value = value ? value[\"count(\" + columnToAggregate + \")\"] : 0;\n            // add with old value if data exist\n            value += datas[index][columnToAggregate] ? 1 : 0;\n            datas[index][\"count(\" + columnToAggregate + \")\"] = value;\n        };\n        for (const prop in aggregateQry) {\n            const aggregateColumn = aggregateQry[prop];\n            const aggregateValType = getDataType(aggregateColumn);\n            let aggregateCalculator;\n            switch (prop) {\n                case QUERY_OPTION.Count:\n                    aggregateCalculator = getCount;\n                    break;\n                case QUERY_OPTION.Max:\n                    aggregateCalculator = getMax;\n                    break;\n                case QUERY_OPTION.Min:\n                    aggregateCalculator = getMin;\n                    break;\n                case QUERY_OPTION.Sum:\n                    aggregateCalculator = getSum;\n                    break;\n                case QUERY_OPTION.Avg:\n                    aggregateCalculator = getAvg;\n                    break;\n            }\n            switch (aggregateValType) {\n                case DATA_TYPE.String:\n                    columnToAggregate = aggregateColumn;\n                    datas[index][`${prop}(${columnToAggregate})`] = aggregateCalculator();\n                    break;\n                case DATA_TYPE.Array:\n                    for (const item in aggregateColumn) {\n                        columnToAggregate = aggregateColumn[item];\n                        datas[index][`${prop}(${columnToAggregate})`] = aggregateCalculator();\n                    }\n            }\n        }\n    };\n\n    if (getDataType(grpQry) === DATA_TYPE.String) {\n        for (index in datas) {\n            objKey = datas[index][grpQry];\n            calculateAggregate();\n            lookUpObj[objKey] = datas[index];\n        }\n    }\n    else {\n        for (index in datas) {\n            objKey = \"\";\n            for (const column in grpQry) {\n                objKey += datas[index][grpQry[column]];\n            }\n            calculateAggregate();\n            lookUpObj[objKey] = datas[index];\n        }\n\n    }\n    // free datas memory\n    datas = [];\n    for (const i in lookUpObj) {\n        datas.push(lookUpObj[i]);\n    }\n    // Checking for avg and if exist then fill the datas;\n    if (aggregateQry.avg) {\n        if (getDataType(aggregateQry.avg) === DATA_TYPE.String) {\n            for (index in datas) {\n                const sumForAvg = datas[index][\"sum(\" + aggregateQry.avg + \")\"],\n                    countForAvg = datas[index][\"count(\" + aggregateQry.avg + \")\"];\n                datas[index][\"avg(\" + aggregateQry.avg + \")\"] = sumForAvg / countForAvg;\n                if (aggregateQry.count !== aggregateQry.avg) {\n                    delete datas[index][\"count(\" + aggregateQry.avg + \")\"];\n                }\n                if (aggregateQry.sum !== aggregateQry.avg) {\n                    delete datas[index][\"sum(\" + aggregateQry.avg + \")\"];\n                }\n            }\n        }\n        else {\n            const isCountTypeString = getDataType(aggregateQry.count) === DATA_TYPE.String;\n            const isSumTypeString = getDataType(aggregateQry.sum) === DATA_TYPE.String;\n            for (index in datas) {\n                for (const column in aggregateQry.avg as any) {\n                    const avgColumn = aggregateQry.avg[column],\n                        sum = datas[index][\"sum(\" + avgColumn + \")\"],\n                        count = datas[index][\"count(\" + avgColumn + \")\"];\n                    datas[index][\"avg(\" + avgColumn + \")\"] = sum / count;\n\n                    if (isCountTypeString) {\n                        if (aggregateQry.count !== avgColumn) {\n                            delete datas[index][\"count(\" + avgColumn + \")\"];\n                        }\n                        else if (aggregateQry.count.indexOf(avgColumn) === -1) {\n                            delete datas[index][\"count(\" + avgColumn + \")\"];\n                        }\n                    }\n\n                    if (isSumTypeString) {\n                        if (aggregateQry.sum !== avgColumn) {\n                            delete datas[index][\"sum(\" + avgColumn + \")\"];\n                        }\n                        else if (aggregateQry.sum.indexOf(avgColumn) === -1) {\n                            delete datas[index][\"sum(\" + avgColumn + \")\"];\n                        }\n                    }\n                }\n            }\n        }\n    }\n    this.results = datas;\n}\n","import { Select } from \"./\";\nimport { promise } from \"@/common\";\nimport { BaseFetch } from \"../base_fetch\";\n\nexport const executeWhereLogic = function (this: BaseFetch, column, value, op, dir) {\n\n    value = op ? value[op] : value;\n    const cursorRequest = this.objectStore.index(column).openCursor(\n        this.util.keyRange(value, op),\n        dir\n    );\n\n    const onSuccess = (() => {\n        if (this.shouldEvaluateLimitAtEnd === false && this.shouldEvaluateSkipAtEnd === false) {\n            if (this.skipRecord && this.limitRecord) {\n                return executeSkipAndLimitForWhere_;\n            }\n            else if (this.skipRecord) {\n                return executeSkipForWhere_;\n            }\n            else if (this.limitRecord) {\n                return executeLimitForWhere_;\n            }\n\n        }\n        return executeSimpleForWhere_;\n    })();\n\n    return promise<any>((res, rej) => {\n        cursorRequest.onerror = rej;\n        cursorRequest.onsuccess = onSuccess.call(this, res);\n    })\n\n}\n\nconst executeSkipAndLimitForWhere_ = function (this: Select, onFinish) {\n    let recordSkipped = false;\n    return (e: any) => {\n        const cursor: IDBCursorWithValue = e.target.result;\n        if (cursor) {\n            if (recordSkipped && this.results.length !== this.limitRecord) {\n                const value = cursor.value;\n                if (this.shouldAddValue(value)) {\n                    this.pushResult(value);\n                }\n                cursor.continue();\n            }\n            else {\n                recordSkipped = true;\n                cursor.advance(this.skipRecord);\n            }\n        }\n        else {\n            onFinish();\n        }\n    };\n}\n\nconst executeSkipForWhere_ = function (this: Select, onFinish) {\n    let recordSkipped = false;\n    return (e: any) => {\n        const cursor = e.target.result;\n        if (cursor) {\n            if (recordSkipped) {\n                const value = cursor.value;\n                if (this.shouldAddValue(value)) {\n                    this.pushResult(value);\n                }\n                cursor.continue();\n            }\n            else {\n                recordSkipped = true;\n                cursor.advance(this.skipRecord);\n            }\n        }\n        else {\n            onFinish();\n        }\n    };\n}\n\nconst executeLimitForWhere_ = function (this: Select, onFinish) {\n    return (e: any) => {\n        const cursor = e.target.result;\n        if (cursor && this.results.length !== this.limitRecord) {\n            const value = cursor.value;\n            if (this.shouldAddValue(value)) {\n                this.pushResult(value);\n            }\n            cursor.continue();\n        }\n        else {\n            onFinish();\n        }\n    };\n\n}\n\nconst executeSimpleForWhere_ = function (this: Select, onFinish) {\n    return (e: any) => {\n        const cursor: IDBCursorWithValue = e.target.result;\n        if (cursor) {\n            const value = cursor.value;\n            if (this.shouldAddValue(value)) {\n                this.pushResult(value);\n            }\n            cursor.continue();\n        }\n        else {\n            onFinish();\n        }\n    };\n}","import { OCCURENCE } from \"@/common\";\n\nexport const getRegexFromLikeExpression = (likeExpression: string) => {\n    const filterValues = likeExpression.split('%');\n    let filterValue: string;\n    let occurence: OCCURENCE;\n    if (filterValues[1]) {\n        filterValue = filterValues[1];\n        occurence = filterValues.length > 2 ? OCCURENCE.Any : OCCURENCE.Last;\n    }\n    else {\n        filterValue = filterValues[0];\n        occurence = OCCURENCE.First;\n    }\n    switch (occurence) {\n        case OCCURENCE.First:\n            return new RegExp(`^${filterValue}`, 'i');\n        case OCCURENCE.Last:\n            return new RegExp(`${filterValue}$`, 'i');\n        default:\n            return new RegExp(`${filterValue}`, 'i');\n    }\n}","import { getDataType } from \"./get_data_type\";\n\nconst isObject = (value) => {\n    return getDataType(value) === 'object' && !(value instanceof RegExp);\n};\n\nexport const clone = (obj) => {\n    if (isObject(obj)) {\n        const copy = {};\n        for (const i in obj) {\n            copy[i] = obj[i] != null && isObject(obj[i]) ? clone(obj[i]) : obj[i];\n        }\n        return copy;\n    }\n    return obj;\n};","import { getDataType } from \"./get_data_type\"\nimport { QUERY_OPTION, DATA_TYPE } from \"@/common\";\n\nexport const compare = (value, compareValue, symbol?) => {\n    const type1 = getDataType(value);\n    const type2 = getDataType(compareValue);\n\n    if (type1 !== type2) return false;\n    if (type1 === DATA_TYPE.DateTime) {\n        value = value.getTime();\n        compareValue = compareValue.getTime();\n    }\n    switch (symbol) {\n        // greater than\n        case QUERY_OPTION.GreaterThan:\n            return value > compareValue;\n        // less than\n        case QUERY_OPTION.LessThan:\n            return value < compareValue;\n        // less than equal\n        case QUERY_OPTION.LessThanEqualTo:\n            return value <= compareValue;\n        // greather than equal\n        case QUERY_OPTION.GreaterThanEqualTo:\n            return value >= compareValue;\n        // Not equal to\n        case QUERY_OPTION.NotEqualTo:\n            return value !== compareValue;\n        default:\n            return value === compareValue;\n    }\n}","import { QUERY_OPTION } from \"@/common\";\nimport { getDataType, clone, compare, getRegexFromLikeExpression } from \"@worker/utils\";\n\n/**\n * For matching the different column value existance for where option\n * \n * @export\n * @class WhereChecker\n */\nexport class WhereChecker {\n  where: object;\n  checkFlag: boolean;\n\n  constructor(where: object, checkFlag: boolean) {\n    this.where = clone(where);\n    this.checkFlag = checkFlag;\n  }\n\n  remove(props: string[]) {\n    const last = props.pop();\n    const value = props.reduce((prev, curr) => prev && prev[curr], this.where);\n    delete value[last];\n  }\n\n  check(rowValue) {\n    let status = true;\n    if (!this.checkFlag) return status;\n    for (let columnName in this.where) {\n      if (!status) {\n        return status;\n      }\n      const whereColumnValue = this.where[columnName];\n      const columnValue = rowValue[columnName];\n      if (getDataType(whereColumnValue) === \"object\") {\n        for (const key in whereColumnValue) {\n          if (!status) {\n            return status;\n          }\n          switch (key) {\n            case QUERY_OPTION.In:\n              status = this.checkIn(columnName, columnValue);\n              break;\n            case QUERY_OPTION.Like:\n              status = this.checkLike_(columnName, columnValue);\n              break;\n            case QUERY_OPTION.Regex:\n              status = this.checkRegex(columnName, columnValue);\n              break;\n            case QUERY_OPTION.Between:\n            case QUERY_OPTION.GreaterThan:\n            case QUERY_OPTION.LessThan:\n            case QUERY_OPTION.GreaterThanEqualTo:\n            case QUERY_OPTION.LessThanEqualTo:\n            case QUERY_OPTION.NotEqualTo:\n              status = this.checkComparisionOp_(columnName, columnValue, key);\n              break;\n            default:\n              status = false;\n          }\n        }\n      }\n      else {\n        status = compare(whereColumnValue, columnValue);\n      }\n    }\n    return status;\n  }\n\n  private checkIn(column, value) {\n    return (this.where[column][QUERY_OPTION.In] as any[]).find(q => compare(q, value)) != null;\n  }\n\n  private checkLike_(column, value) {\n    return getRegexFromLikeExpression(this.where[column][QUERY_OPTION.Like]).test(value);\n  }\n\n  private checkRegex(column, value) {\n    return this.where[column][QUERY_OPTION.Regex].test(value);\n  }\n\n  private checkComparisionOp_(column, value, symbol) {\n    const compareValue = this.where[column][symbol];\n    if (symbol != QUERY_OPTION.Between) {\n      return compare(value, compareValue, symbol);\n    }\n    return compare(value, compareValue.low, '>=') &&\n      compare(value, compareValue.high, '<=');\n  }\n}","import { Base } from \"./base\";\nimport { ISelectQuery, QUERY_OPTION, ERROR_TYPE } from \"@/common\";\nimport { getRegexFromLikeExpression, promiseReject } from \"@worker/utils\";\nimport { LogHelper, getObjectFirstKey, getDataType, getLength, getError } from \"@worker/utils\";\nimport { WhereChecker } from \"./where_checker\";\nimport { executeWhereLogic } from \"./select/where\";\nimport { executeInLogic } from \"./select/in\";\nimport { executeRegexLogic } from \"./select/regex\";\n\nexport class BaseFetch extends Base {\n    query: ISelectQuery;\n    whereCheckerInstance: WhereChecker;\n    executeWhereLogic: typeof executeWhereLogic;\n    skipRecord;\n    limitRecord;\n    shouldEvaluateLimitAtEnd = false;\n    shouldEvaluateSkipAtEnd = false;\n    executeInLogic: typeof executeInLogic;\n    executeRegexLogic: typeof executeRegexLogic;\n\n    resultCount: number;\n\n    protected shouldAddValue: (value) => boolean;\n    protected goToWhereLogic() {\n        const query = this.query as ISelectQuery;\n        const firstColumn = getObjectFirstKey(query.where);\n        if (this.objectStore.indexNames.contains(firstColumn)) {\n            const value = query.where[firstColumn];\n            if (getDataType(value) === 'object') {\n                const checkFlag = getLength(value) > 1 ||\n                    getLength(query.where) > 1\n\n                this.whereCheckerInstance = new WhereChecker(query.where, checkFlag);\n                const key = getObjectFirstKey(value);\n                this.whereCheckerInstance.remove([firstColumn, key]);\n                switch (key) {\n                    case QUERY_OPTION.Like: {\n                        const regexVal = getRegexFromLikeExpression(value[QUERY_OPTION.Like]);\n                        return this.executeRegexLogic(firstColumn, regexVal);\n                    }\n                    case QUERY_OPTION.Regex:\n                        return this.executeRegexLogic(firstColumn, value[QUERY_OPTION.Regex]);\n                    case QUERY_OPTION.In:\n                        return this.executeInLogic(\n                            firstColumn, value[QUERY_OPTION.In]\n                        );\n                    case QUERY_OPTION.Between:\n                    case QUERY_OPTION.GreaterThan:\n                    case QUERY_OPTION.LessThan:\n                    case QUERY_OPTION.GreaterThanEqualTo:\n                    case QUERY_OPTION.LessThanEqualTo:\n                        return this.executeWhereLogic(firstColumn, value, key, \"next\");\n                    case QUERY_OPTION.Aggregate: break;\n                    default:\n                        return this.executeWhereLogic(firstColumn, value, null, \"next\");\n                }\n            }\n            else {\n                const checkFlag = getLength(query.where) > 1;\n                this.whereCheckerInstance = new WhereChecker(query.where, checkFlag);\n                this.whereCheckerInstance.remove([firstColumn]);\n                return this.executeWhereLogic(firstColumn, value, null, \"next\");\n            }\n        }\n        else {\n            const column = this.getColumnInfo(firstColumn);\n            const error = column == null ?\n                new LogHelper(ERROR_TYPE.ColumnNotExist, { column: firstColumn }) :\n                new LogHelper(ERROR_TYPE.EnableSearchOff, { column: firstColumn });\n            return promiseReject(\n                error\n            );\n        }\n    }\n\n}","import { Select } from \"./\";\nimport { promise, promiseAll } from \"@/common\";\nimport { BaseFetch } from \"../base_fetch\";\n\nexport const executeInLogic = function (this: BaseFetch, column, values) {\n    let skip = this.skipRecord;\n    const skipOrPush = (val) => {\n        if (skip === 0) {\n            (this as Select).pushResult(val);\n        }\n        else {\n            --skip;\n        }\n    };\n    const onSuccess = (() => {\n        if (this.shouldEvaluateLimitAtEnd === false && this.shouldEvaluateSkipAtEnd === false) {\n            if (this.skipRecord && this.limitRecord) {\n                return executeSkipAndLimitForIn_;\n            }\n            else if (this.skipRecord) {\n                return executeSkipForIn_;\n            }\n            else if (this.limitRecord) {\n                return executeLimitForIn_;\n            }\n        }\n        return executeSimpleForIn_;\n    })();\n\n    const columnStore = this.objectStore.index(column);\n    const runInLogic: (val) => Promise<void> = (value) => {\n        return promise((res, rej) => {\n            const cursorRequest = columnStore.openCursor(this.util.keyRange(value));\n            cursorRequest.onsuccess = onSuccess.call(this, res, skipOrPush);\n            cursorRequest.onerror = rej;\n        });\n    };\n\n    return promiseAll<void>(\n        values.map(function (val) {\n            return runInLogic(val);\n        })\n    );\n\n};\n\nconst executeSkipAndLimitForIn_ = function (this: Select, onFinish, skipOrPush) {\n    return (e: any) => {\n        const cursor: IDBCursorWithValue = e.target.result;\n        if (this.results.length !== this.limitRecord && cursor) {\n            const value = cursor.value;\n            if (this.shouldAddValue(value)) {\n                skipOrPush(value);\n            }\n            cursor.continue();\n        }\n        else {\n            onFinish();\n        }\n    };\n}\n\nconst executeSkipForIn_ = function (this: Select, onFinish, skipOrPush) {\n\n    return (e: any) => {\n        const cursor: IDBCursorWithValue = e.target.result;\n        if (cursor) {\n            const value = cursor.value\n            if (this.shouldAddValue(value)) {\n                skipOrPush(value);\n            }\n            cursor.continue();\n        }\n        else {\n            onFinish();\n        }\n    };\n}\n\nconst executeLimitForIn_ = function (this: Select, onFinish) {\n    return (e: any) => {\n        const cursor: IDBCursorWithValue = e.target.result;\n        if (cursor && this.results.length !== this.limitRecord) {\n            const value = cursor.value;\n            if (this.shouldAddValue(value)) {\n                this.pushResult(cursor.value);\n            }\n            cursor.continue();\n        }\n        else {\n            onFinish();\n        }\n    };\n\n}\n\nconst executeSimpleForIn_ = function (this: Select, onFinish) {\n    return (e: any) => {\n        const cursor: IDBCursorWithValue = e.target.result;\n        if (cursor) {\n            const value = cursor.value\n            if (this.shouldAddValue(value)) {\n                this.pushResult(value);\n            }\n            cursor.continue();\n        }\n        else {\n            onFinish();\n        }\n    };\n}","import { BaseFetch } from \"../base_fetch\";\nimport { Select } from \".\";\nimport { promise } from \"@/common\";\n\n\nexport const executeRegexLogic = function (this: BaseFetch, column, exp: RegExp) {\n\n    let skip = this.skipRecord;\n    const skipOrPush = (val) => {\n        if (skip === 0) {\n            (this as Select).pushResult(val);\n        }\n        else {\n            --skip;\n        }\n    };\n    this.shouldAddValue = (cursor) => {\n        return exp.test(cursor.key) &&\n            this.whereCheckerInstance.check(cursor.value);\n    };\n\n    const cursorRequest = this.objectStore.index(column).openCursor();\n\n    const onSuccess = (() => {\n        if (this.shouldEvaluateLimitAtEnd === false && this.shouldEvaluateSkipAtEnd === false) {\n            if (this.skipRecord && this.limitRecord) {\n                return executeSkipAndLimitForRegex_;\n            }\n            else if (this.skipRecord) {\n                return executeSkipForRegex_;\n            }\n            else if (this.limitRecord) {\n                return executeLimitForRegex_;\n            }\n        }\n        return executeSimpleForRegex_;\n    })();\n\n    return promise<any>((res, rej) => {\n        cursorRequest.onerror = rej;\n        cursorRequest.onsuccess = onSuccess.call(this, res, skipOrPush);\n    })\n\n}\n\nconst executeSkipAndLimitForRegex_ = function (this: Select, onFinish, skipOrPush) {\n    return (e: any) => {\n        const cursor = e.target.result;\n        if (this.results.length !== this.limitRecord && cursor) {\n            if (this.shouldAddValue(cursor)) {\n                skipOrPush(cursor.value);\n            }\n            cursor.continue();\n        } else {\n            onFinish();\n        }\n    };\n}\n\nconst executeSkipForRegex_ = function (this: Select, onFinish, skipOrPush) {\n    return (e: any) => {\n        const cursor = e.target.result;\n        if (cursor) {\n            if (this.shouldAddValue(cursor)) {\n                skipOrPush((cursor.value));\n            }\n            cursor.continue();\n        } else {\n            onFinish();\n        }\n    };\n}\n\nconst executeLimitForRegex_ = function (this: Select, onFinish) {\n    return (e: any) => {\n        const cursor = e.target.result;\n        if (this.results.length !== this.limitRecord && cursor) {\n            if (this.shouldAddValue(cursor)) {\n                this.pushResult(cursor.value);\n            }\n            cursor.continue();\n        } else {\n            onFinish();\n        }\n    };\n}\n\nconst executeSimpleForRegex_ = function (this: Select, onFinish) {\n    return (e: any) => {\n        const cursor = e.target.result;\n        if (cursor) {\n            if (this.shouldAddValue(cursor)) {\n                this.pushResult(cursor.value);\n            }\n            cursor.continue();\n        } else {\n            onFinish();\n        }\n    };\n}\n","import { Select } from \"./\";\nimport { IJoinQuery, DATA_TYPE, ERROR_TYPE, ISelectQuery } from \"@/common\";\nimport { getDataType, LogHelper, removeSpace, promiseReject } from \"@/worker/utils\";\n\n\nexport const executeJoinQuery = function (this: Select) {\n    return new Join(this).execute();\n}\n\ninterface JoinQueryWithInfo extends IJoinQuery {\n    joinTableInfo: JoinTableInfo\n}\n\nexport class Join {\n\n    private joinQueryStack_: JoinQueryWithInfo[] = [];\n    private currentQueryStackIndex_ = 0;\n    tablesFetched = [];\n    results = [];\n\n    select: Select;\n    constructor(select: Select) {\n        this.select = select;\n    }\n\n    get query() {\n        return this.select.query;\n    }\n\n    getTable(name: string) {\n        return this.select.table(name);\n    }\n\n    private executeSelect(query: ISelectQuery) {\n        // this.select.util.emptyTx();\n        return new Select(query, this.select.util).\n            execute();\n    }\n\n    execute() {\n        const query = this.query;\n        this.joinQueryStack_ = getDataType(query.join) === DATA_TYPE.Object ?\n            [query.join as JoinQueryWithInfo] : query.join as JoinQueryWithInfo[];\n        // get the data for first table\n        const tableName = query.from;\n        const tablesToFetch = [tableName];\n        for (let i = 0, length = this.joinQueryStack_.length; i < length; i++) {\n            const item = this.joinQueryStack_[i];\n            let jointblInfo = this.getJoinTableInfo_(item.on);\n            // table 1 is fetched & table2 needs to be fetched for join\n            if (item.with === jointblInfo.table1.table) {\n                jointblInfo = {\n                    table1: jointblInfo.table2,\n                    table2: jointblInfo.table1\n                };\n            }\n\n            const err = this.checkJoinQuery_(jointblInfo, item);\n            if (err) {\n                return promiseReject(err);\n            }\n            this.joinQueryStack_[i].joinTableInfo = jointblInfo;\n            tablesToFetch.push(item.with)\n        }\n\n        if (!this.select.isTxQuery) {\n            this.select.util.createTransaction(tablesToFetch);\n        }\n\n        return this.executeSelect({\n            from: tableName,\n            where: query.where,\n            case: query.case,\n            flatten: query.flatten\n        }).then(results => {\n            this.results = results.map((item) => {\n                return {\n                    [this.currentQueryStackIndex_]: item\n                };\n            });\n            this.tablesFetched.push(tableName);\n            return this.startExecutingJoinLogic_();\n        });\n    }\n\n    private onJoinQueryFinished_() {\n        // const query = this.query;\n        if (this.results.length > 0) {\n\n            try {\n                let results = [];\n                const tables = Object.keys(this.results[0]);\n                const tablesLength = tables.length;\n                const mapWithAlias = (query: IJoinQuery, value: object) => {\n                    if (query.as != null) {\n                        for (const key in query.as) {\n                            if (value[(query.as as any)[key]] === undefined) {\n                                value[(query.as as any)[key]] = value[key];\n                                delete value[key];\n                            }\n                        }\n                    }\n                    return value;\n                };\n                this.results.forEach((result) => {\n                    let data = result[\"0\"]; // first table data\n                    for (let i = 1; i < tablesLength; i++) {\n                        const query = this.joinQueryStack_[i - 1];\n                        data = { ...data, ...mapWithAlias(query, result[i]) };\n                    }\n                    results.push(data);\n                });\n                this.select['results'] = results;\n                this.select.setLimitAndSkipEvaluationAtEnd_();\n                this.select.query.flatten = null;\n                if (process.env.NODE_ENV === 'dev') {\n                    try {\n                        this.select.processOrderBy();\n                    }\n                    catch (ex) {\n                        return promiseReject(\n                            new LogHelper(ERROR_TYPE.InvalidOrderQuery, ex.message)\n                        );\n                    }\n                }\n                else {\n                    this.select.processOrderBy();\n                }\n\n                if (process.env.NODE_ENV === 'dev') {\n                    try {\n                        this.select.processGroupDistinctAggr();\n                    }\n                    catch (ex) {\n                        return promiseReject(\n                            new LogHelper(ERROR_TYPE.InvalidGroupQuery, ex.message)\n                        );\n                    }\n                }\n                else {\n                    this.select.processGroupDistinctAggr();\n                }\n            }\n            catch (ex) {\n                return promiseReject(\n                    new LogHelper(ERROR_TYPE.InvalidJoinQuery, ex.message)\n                );\n            }\n        }\n        return;\n    }\n\n    private startExecutingJoinLogic_() {\n        const joinQuery = this.joinQueryStack_[this.currentQueryStackIndex_];\n        if (joinQuery) {\n            try {\n                let jointblInfo = joinQuery.joinTableInfo;\n                return this.executeSelect({\n                    from: joinQuery.with,\n                    where: joinQuery.where,\n                    case: joinQuery.case,\n                    flatten: joinQuery.flatten\n                }).then(results => {\n                    this.jointables(joinQuery.type, jointblInfo, results);\n                    this.tablesFetched.push(jointblInfo.table2.table);\n                    ++this.currentQueryStackIndex_;\n                    return this.startExecutingJoinLogic_();\n                });\n            }\n            catch (ex) {\n                return promiseReject(\n                    new LogHelper(ERROR_TYPE.InvalidJoinQuery, ex.message)\n                );\n            }\n        }\n        else {\n            return this.onJoinQueryFinished_();\n        }\n    }\n\n    private jointables(joinType: string, jointblInfo: JoinTableInfo, secondtableData: any[]) {\n\n        const results = [];\n        const column1 = jointblInfo.table1.column;\n        const column2 = jointblInfo.table2.column;\n        const table1Index = this.tablesFetched.indexOf(jointblInfo.table1.table);\n        const table2Index = this.currentQueryStackIndex_ + 1;\n        const performInnerJoin = () => {\n            let index = 0;\n            this.results.forEach(valueFromFirstTable => {\n                secondtableData.forEach((valueFromSecondTable) => {\n                    if (valueFromFirstTable[table1Index][column1] === valueFromSecondTable[column2]) {\n                        results[index] = { ...valueFromFirstTable };\n                        results[index++][table2Index] = valueFromSecondTable;\n                    }\n                });\n            });\n        };\n        const performleftJoin = () => {\n            let index = 0;\n            let valueMatchedFromSecondTable: any[];\n            let callBack;\n            const columnDefaultValue = {};\n            this.getTable(jointblInfo.table2.table).columns.forEach(col => {\n                columnDefaultValue[col.name] = null;\n            });\n            this.results.forEach((valueFromFirstTable) => {\n                valueMatchedFromSecondTable = [];\n                if (table2Index === 1) {\n                    callBack = function (valueFromSecondTable) {\n                        if (valueFromFirstTable[table1Index][column1] === valueFromSecondTable[column2]) {\n                            valueMatchedFromSecondTable.push(valueFromSecondTable);\n                        }\n                    };\n                }\n                else {\n                    callBack = function (valueFromSecondTable) {\n                        const value = valueFromFirstTable[table1Index];\n                        if (value != null && value[column1] === valueFromSecondTable[column2]) {\n                            valueMatchedFromSecondTable.push(valueFromSecondTable);\n                        }\n                    };\n                }\n                secondtableData.forEach(callBack);\n                if (valueMatchedFromSecondTable.length === 0) {\n                    valueMatchedFromSecondTable = [columnDefaultValue];\n                }\n                valueMatchedFromSecondTable.forEach(function (value) {\n                    results[index] = { ...valueFromFirstTable };\n                    results[index++][table2Index] = value;\n                });\n            });\n        };\n        switch (joinType) {\n            case \"left\":\n                performleftJoin(); break;\n            default:\n                performInnerJoin();\n        }\n        this.results = results;\n    }\n\n    private getJoinTableInfo_(joinOn: string) {\n        joinOn = removeSpace(joinOn);\n        const splittedjoinOn = joinOn.split(\"=\");\n        const splittedjoinOnbydotFirst = splittedjoinOn[0].split(\".\");\n        const splittedjoinOnbydotSecond = splittedjoinOn[1].split(\".\");\n        const info = {\n            table1: {\n                table: splittedjoinOnbydotFirst[0],\n                column: splittedjoinOnbydotFirst[1]\n            },\n            table2: {\n                table: splittedjoinOnbydotSecond[0],\n                column: splittedjoinOnbydotSecond[1]\n            }\n        } as JoinTableInfo;\n        return info;\n    }\n\n    private checkJoinQuery_(jointblInfo: JoinTableInfo, qry: IJoinQuery) {\n        const table1 = jointblInfo.table1;\n        const table2 = jointblInfo.table2;\n        const tableSchemaOf1stTable = this.getTable(table1.table);\n        const tableSchemaOf2ndTable = this.getTable(table2.table);\n        let err: LogHelper;\n\n        // check on info & with info \n        if (qry.with !== table2.table) {\n            err = new LogHelper(ERROR_TYPE.InvalidJoinQuery,\n                `on value should contains value of with`\n            );\n        }\n\n        // check for column existance\n\n        if (tableSchemaOf1stTable.columns.find(q => q.name === table1.column) == null) {\n            err = new LogHelper(ERROR_TYPE.InvalidJoinQuery,\n                `column ${table1.column} does not exist in table ${table1.table}`\n            );\n        }\n        else if (tableSchemaOf2ndTable.columns.find(q => q.name === table2.column) == null) {\n            err = new LogHelper(ERROR_TYPE.InvalidJoinQuery,\n                `column ${table2.column} does not exist in table ${table2.table}`\n            );\n        }\n\n        // check for column match in both table\n        if (qry.as == null) {\n            qry.as = {};\n        }\n        tableSchemaOf1stTable.columns.every(function (column) {\n            const columnFound = tableSchemaOf2ndTable.columns.find(q => q.name === column.name && q.name !== table1.column);\n            if (columnFound != null && qry.as[columnFound.name] == null) {\n                err = new LogHelper(ERROR_TYPE.InvalidJoinQuery,\n                    `column ${column.name} exist in both table ${table1.table} & ${table2.table}`\n                );\n                return false;\n            }\n            return true;\n        });\n        return err;\n    }\n}\n\ntype JoinTableInfo = {\n    table1: { table: string, column: string }\n    table2: { table: string, column: string }\n};","import { ISelectQuery, QUERY_OPTION, IDB_MODE, API, IWhereQuery, promiseResolve } from \"@/common\";\nimport { IDBUtil } from \"@/worker/idbutil\";\nimport { QueryHelper } from \"@worker/executors/query_helper\";\nimport { DbMeta } from \"@/worker/model\";\nimport { isArray, isObject, getKeys, getObjectFirstKey, promiseReject, getLength } from \"@/worker/utils\";\nimport { setPushResult, setLimitAndSkipEvaluationAtEnd, removeDuplicates } from \"./base_select\";\nimport { ThenEvaluator } from \"./then_evaluator\";\nimport { executeWhereUndefinedLogic } from \"./not_where\"\nimport { processAggregateQry, processGroupDistinctAggr, processOrderBy } from \"./order_by\";\nimport { executeAggregateGroupBy, processGroupBy } from \"./group_by\";\nimport { executeWhereLogic } from \"./where\";\nimport { BaseFetch } from \"@executors/base_fetch\";\nimport { executeInLogic } from \"./in\";\nimport { executeRegexLogic } from \"./regex\";\nimport { executeJoinQuery } from \"./join\";\n\nexport class Select extends BaseFetch {\n    sorted = false;\n    isOr: boolean;\n    isArrayQry: boolean;\n    query: ISelectQuery;\n    orInfo: {\n        results?: any[];\n        orQuery: object\n    };\n\n    isSubQuery = false;\n\n    protected pushResult: (value) => void;\n\n    protected thenEvaluator = new ThenEvaluator();\n\n    executeWhereUndefinedLogic: typeof executeWhereUndefinedLogic;\n\n    setLimitAndSkipEvaluationAtEnd_: typeof setLimitAndSkipEvaluationAtEnd\n    setPushResult: typeof setPushResult;\n    removeDuplicates: typeof removeDuplicates;\n    executeJoinQuery: typeof executeJoinQuery\n    processGroupDistinctAggr: typeof processGroupDistinctAggr;\n    processOrderBy: typeof processOrderBy;\n    processAggregateQry: typeof processAggregateQry;\n    executeAggregateGroupBy: typeof executeAggregateGroupBy;\n    processGroupBy: typeof processGroupBy;\n\n\n    constructor(query: ISelectQuery, util: IDBUtil) {\n        super();\n        this.query = query;\n        this.util = util;\n        this.tableName = query.from;\n        this.setPushResult();\n        if (isArray(this.query.where)) {\n            this.isArrayQry = true;\n            this.setLimitAndSkipEvaluationAtEnd_();\n        }\n        else {\n            this.skipRecord = query.skip;\n            this.limitRecord = query.limit;\n        }\n        if (query.order) {\n            if (isArray(query.order) || query.order.case || isObject(query.order.by)) {\n                this.query.order.idbSorting = false;\n            }\n            this.setLimitAndSkipEvaluationAtEnd_();\n        }\n        else if (query.groupBy) {\n            this.setLimitAndSkipEvaluationAtEnd_();\n        }\n    }\n\n    execute(beforeExecute?: () => Promise<any>): Promise<any> {\n        let pResult: Promise<void>;\n        if (!beforeExecute) {\n            beforeExecute = () => promiseResolve(null);\n        }\n        try {\n            const err = new QueryHelper(this.db).validate(API.Select, this.query);\n            if (err) return promiseReject(err);\n            return beforeExecute().then(_ => {\n                this.initTransaction_();\n                if (this.query.join == null) {\n                    if (this.query.where != null) {\n                        if (isArray(this.query.where)) {\n                            pResult = this.processWhereArrayQry();\n                        }\n                        else {\n                            pResult = this.processWhere_();\n                        }\n                    }\n                    else {\n                        pResult = this.executeWhereUndefinedLogic();\n                    }\n                }\n                else {\n                    pResult = this.executeJoinQuery();\n                }\n                return pResult.then(\n                    this.returnResult_.bind(this)\n                )\n            })\n\n        }\n        catch (ex) {\n            return this.onException(ex);\n        }\n    }\n\n    private processWhereArrayQry() {\n        this.isArrayQry = true;\n        const whereQuery = this.query.where as IWhereQuery[];\n        const pKey = this.primaryKey();\n        let isFirstWhere = true, output = [], operation;\n\n        const isItemExist = (keyValue) => {\n            return output.findIndex(item => item[pKey] === keyValue) >= 0;\n        };\n        const onSuccess = () => {\n            if (operation === QUERY_OPTION.And) {\n                const doAnd = () => {\n                    let andResults = [];\n                    this.results.forEach((item) => {\n                        if (isItemExist(item[pKey])) {\n                            andResults.push(item);\n                        }\n                    });\n                    output = andResults;\n                    andResults = null;\n                };\n\n                if (isFirstWhere === true) {\n                    output = this.results;\n                }\n                else if (output.length > 0) {\n                    doAnd();\n                }\n            }\n            else {\n                if (output.length > 0) {\n                    this.results = [...output, ...this.results];\n                    this.removeDuplicates();\n                    output = this.results;\n                }\n                else {\n                    output = this.results;\n                }\n            }\n            isFirstWhere = false;\n            if (whereQuery.length > 0) {\n                this.results = [];\n                return processFirstQry();\n            }\n            else {\n                this.results = output;\n            }\n\n        };\n        const processFirstQry = () => {\n            this.query.where = whereQuery.shift();\n            if (this.query.where[QUERY_OPTION.Or]) {\n                if (getLength(this.query.where) === 1) {\n                    operation = QUERY_OPTION.Or;\n                    this.query.where = this.query.where[QUERY_OPTION.Or] as any;\n                }\n                else {\n                    operation = QUERY_OPTION.And;\n                }\n            }\n            else {\n                operation = QUERY_OPTION.And;\n            }\n            return this.processWhere_().then(onSuccess);\n        };\n        return processFirstQry();\n    }\n\n    private initTransaction_() {\n        if (!this.isTxQuery) {\n            this.util.createTransactionIfNotExist([this.tableName], IDB_MODE.ReadOnly);\n        }\n        this.objectStore = this.util.objectStore(this.tableName);\n    }\n\n    private processWhere_() {\n        this.shouldAddValue = (value) => {\n            return this.whereCheckerInstance.check(value);\n        };\n        if ((this.query.where as IWhereQuery).or) {\n            this.processOrLogic_();\n        }\n        return this.goToWhereLogic().then(() => {\n            return this.onWhereEvaluated();\n        })\n    }\n\n    private onWhereEvaluated() {\n        if (this.isOr) {\n            return this.orQuerySuccess_();\n        }\n    }\n\n    private returnResult_ = () => {\n        if (this.results.length > 0) {\n\n\n            if (this.query.flatten) {\n                const flattendData = [];\n                const indexToDelete = {};\n                this.query.flatten.forEach(column => {\n                    this.results.forEach((data, i) => {\n                        data[column].forEach(item => {\n                            flattendData.push(\n                                { ...data, ...{ [column]: item } }\n                            );\n                        });\n                        indexToDelete[i] = true;\n                    });\n                });\n                let itemsDeleted = 0;\n                getKeys(indexToDelete).forEach(key => {\n                    this.results.splice(Number(key) - itemsDeleted, 1);\n                    ++itemsDeleted;\n                });\n                this.results = this.results.concat(flattendData);\n            }\n            this.processGroupDistinctAggr();\n            this.processOrderBy();\n            if (this.shouldEvaluateSkipAtEnd) {\n                this.results.splice(0, this.query.skip);\n            }\n            if (this.shouldEvaluateLimitAtEnd) {\n                this.results = this.results.slice(0, this.query.limit);\n            }\n        }\n        return this.results;\n    }\n\n    private orQueryFinish_() {\n        this.isOr = false;\n        this.results = this.orInfo.results;\n        // free or info memory\n        this.orInfo = null;\n        this.removeDuplicates();\n        // this.onQueryFinished();\n    }\n\n    private orQuerySuccess_() {\n        this.orInfo.results = [... this.orInfo.results, ...this.results];\n        if (!this.query.limit || (this.query.limit > this.orInfo.results.length)) {\n            this.results = [];\n            const key = getObjectFirstKey(this.orInfo.orQuery);\n            if (key != null) {\n                const where = {};\n                where[key] = this.orInfo.orQuery[key];\n                delete this.orInfo.orQuery[key];\n                this.query.where = where;\n                return this.goToWhereLogic().then(this.onWhereEvaluated.bind(this))\n            }\n        }\n        return this.orQueryFinish_();\n    }\n\n    private processOrLogic_() {\n        this.isOr = true;\n        const where = this.query.where as IWhereQuery;\n        this.orInfo = {\n            orQuery: where.or as any,\n            results: []\n        };\n        // free or memory\n        delete where.or;\n    }\n}\n\nSelect.prototype.executeInLogic = executeInLogic;\nSelect.prototype.executeWhereUndefinedLogic = executeWhereUndefinedLogic;\nSelect.prototype.executeWhereLogic = executeWhereLogic;\nSelect.prototype.executeRegexLogic = executeRegexLogic;\n\nSelect.prototype.setLimitAndSkipEvaluationAtEnd_ = setLimitAndSkipEvaluationAtEnd\nSelect.prototype.setPushResult = setPushResult;\nSelect.prototype.removeDuplicates = removeDuplicates;\nSelect.prototype.executeJoinQuery = executeJoinQuery\nSelect.prototype.processGroupDistinctAggr = processGroupDistinctAggr;\nSelect.prototype.processOrderBy = processOrderBy;\nSelect.prototype.processAggregateQry = processAggregateQry;\nSelect.prototype.executeAggregateGroupBy = executeAggregateGroupBy;\nSelect.prototype.processGroupBy = processGroupBy;\n","import { promise } from \"@/common\";\nimport { BaseFetch } from \"../base_fetch\";\nimport { Count } from \".\";\n\nexport const executeWhereUndefinedLogic = function (this: BaseFetch) {\n    let countRequest;\n    const onSuccess = (() => {\n        if (this.objectStore.count) {\n            countRequest = this.objectStore.count();\n            return (onFinish) => {\n                return () => {\n                    (this as Count).resultCount = countRequest.result;\n                    onFinish();\n                }\n            }\n        }\n        else {\n            let cursor;\n            countRequest = this.objectStore.openCursor();\n            return (onFinish) => {\n                return (e: any) => {\n                    cursor = e.target.result;\n                    if (cursor) {\n                        ++(this as Count).resultCount;\n                        cursor.continue();\n                    }\n                    else {\n                        onFinish();\n                    }\n                };\n            };\n        }\n    })();\n    return promise((res, rej) => {\n        countRequest.onerror = rej;\n        countRequest.onsuccess = onSuccess(res);\n    });\n}\n","import { BaseFetch } from \"../base_fetch\";\nimport { getLength } from \"@/worker/utils\";\nimport { Count } from \".\";\nimport { promise } from \"@/common\";\n\nexport const executeWhereLogic = function (this: BaseFetch, column, value, op) {\n    value = op ? value[op] : value;\n    let cursorRequest;\n    let cursor: IDBCursorWithValue;\n\n\n    return promise((res, rej) => {\n        if (getLength(this.query.where) === 1 && this.objectStore.count) {\n            cursorRequest = this.objectStore.index(column).count(this.util.keyRange(value, op));\n            cursorRequest.onsuccess = () => {\n                (this as Count).resultCount = cursorRequest.result;\n                res();\n            }\n        }\n        else {\n            cursorRequest = this.objectStore.index(column).openCursor(this.util.keyRange(value, op));\n            cursorRequest.onsuccess = (e) => {\n                cursor = e.target.result;\n                if (cursor) {\n                    if (this.whereCheckerInstance.check(cursor.value)) {\n                        ++(this as Count).resultCount;\n                    }\n                    cursor.continue();\n                }\n                else {\n                    res();\n                }\n            }\n        }\n        cursorRequest.onerror = rej;\n    });\n}","import { BaseFetch } from \"../base_fetch\";\nimport { promise } from \"@/common\";\nimport { Count } from \".\";\n\nexport const executeRegexLogic = function (this: BaseFetch, column: string, exp: RegExp) {\n    let cursor: IDBCursorWithValue;\n    const cursorRequest = this.objectStore.index(column).openCursor();\n    this.shouldAddValue = (cursor) => {\n        return exp.test(cursor.key) &&\n            this.whereCheckerInstance.check(cursor.value);\n    };\n    return promise((res, rej) => {\n        cursorRequest.onerror = rej;\n        cursorRequest.onsuccess = (e: any) => {\n            cursor = e.target.result;\n            if (cursor) {\n                if (this.shouldAddValue(cursor)) {\n                    ++(this as Count).resultCount;\n                }\n                cursor.continue();\n            }\n            else {\n                res();\n            }\n        };\n    })\n}","import { promise, promiseAll } from \"@/common\";\nimport { BaseFetch } from \"../base_fetch\";\n\n\nexport const executeInLogic = function (this: BaseFetch, column, values) {\n    let cursor: IDBCursorWithValue;\n    const columnStore = this.objectStore.index(column);\n    const runInLogic: (val) => Promise<void> = (value) => {\n        const keyRange = this.util.keyRange(value);\n        if (this.objectStore.count) {\n            return promise((res, rej) => {\n                const cursorRequest = columnStore.count(keyRange);\n                cursorRequest.onsuccess = (e: any) => {\n                    this.resultCount += e.target.result;\n                    res();\n                };\n                cursorRequest.onerror = rej;\n            });\n        }\n        return promise<void>((res, rej) => {\n            const cursorRequest = columnStore.openCursor(keyRange);\n            cursorRequest.onsuccess = (e: any) => {\n                cursor = e.target.result;\n                if (cursor) {\n                    if (this.whereCheckerInstance.check(cursor.value)) {\n                        ++this.resultCount;\n                    }\n                    cursor.continue();\n                }\n                else {\n                    res();\n                }\n            };\n            cursorRequest.onerror = rej;\n        });\n    };\n\n    return promiseAll<void>(\n        values.map(function (val) {\n            return runInLogic(val);\n        })\n    );\n}\n","import { BaseFetch } from \"@executors/base_fetch\";\nimport { Select } from \"@executors/select\";\nimport { ICountQuery, ISelectQuery, IDB_MODE, API, IWhereQuery } from \"@/common\";\nimport { IDBUtil } from \"@/worker/idbutil\";\nimport { DbMeta } from \"@worker/model\";\nimport { QueryHelper } from \"@executors/query_helper\";\nimport { promiseReject, isArray, getError } from \"@worker/utils\";\nimport { executeWhereUndefinedLogic } from \"@executors/count/not_where\";\nimport { executeWhereLogic } from \"./where\";\nimport { executeRegexLogic } from \"./regex\";\nimport { executeInLogic } from \"./in\";\n\nexport class Count extends BaseFetch {\n\n    query: ICountQuery;\n    resultCount: number = 0;\n    executeWhereUndefinedLogic: typeof executeWhereUndefinedLogic;\n\n    constructor(query: ICountQuery, util: IDBUtil) {\n        super();\n        this.query = query;\n        this.util = util;\n        this.tableName = query.from;\n    }\n\n    execute(beforeExecute: () => Promise<any>) {\n        const queryHelper = new QueryHelper(this.db);\n        const query = this.query;\n        const err = queryHelper.validate(API.Count, query);\n        if (err) {\n            return promiseReject(\n                err\n            );\n        }\n        return beforeExecute().then(_ => {\n            let result: Promise<void>;\n            try {\n                const getDataFromSelect = () => {\n                    const selectInstance = new Select(this.query as ISelectQuery, this.util);\n                    selectInstance.isTxQuery = this.isTxQuery;\n                    return selectInstance.execute().then(results => {\n                        this.resultCount = results.length;\n                    });\n                };\n                this.initTransaction_();\n                if (query.join == null) {\n                    if (query.where != null) {\n                        if ((query.where as IWhereQuery).or || isArray(this.query.where)) {\n                            result = getDataFromSelect();\n                        }\n                        else {\n                            result = this.goToWhereLogic();\n                        }\n                    }\n                    else {\n                        result = this.executeWhereUndefinedLogic() as any;\n                    }\n                }\n                else {\n                    result = getDataFromSelect();\n                }\n            }\n            catch (ex) {\n                this.onException(ex);\n            }\n            return result.then(_ => {\n                return this.resultCount;\n            })\n        });\n    }\n\n    private initTransaction_() {\n        if (!this.isTxQuery) {\n            this.util.createTransaction([this.query.from], IDB_MODE.ReadOnly);\n        }\n        this.objectStore = this.util.objectStore(this.query.from);\n    }\n}\n\nCount.prototype.executeWhereUndefinedLogic = executeWhereUndefinedLogic;\nCount.prototype.executeWhereLogic = executeWhereLogic\nCount.prototype.executeRegexLogic = executeRegexLogic\nCount.prototype.executeInLogic = executeInLogic","import { isArray } from \"./is_array\";\n\nexport const variableFromPath = (path: string) => {\n    const properties: string[] = isArray(path) ? path as any : path.split(\".\");\n    return properties.reduce((prev, curr) => prev && prev[curr], self);\n}","import { getDataType, variableFromPath, promiseReject, LogHelper } from \"@worker/utils\";\nimport { DATA_TYPE, ERROR_TYPE, IUpdateQuery } from \"@/common\";\n\nexport const updateValue = (query: IUpdateQuery, storedValue) => {\n    let setValue = query.set;\n    const mapSet = query.mapSet;\n    if (mapSet) {\n        const result = (mapSet as Function)(setValue, storedValue);\n        if (result != null) {\n            setValue = result;\n        }\n    }\n    for (const key in setValue) {\n        const columnSetValue = setValue[key];\n        if (getDataType(columnSetValue) !== DATA_TYPE.Object) {\n            storedValue[key] = columnSetValue;\n        }\n        else {\n            for (const op in columnSetValue) {\n                let value = columnSetValue[op];\n                switch (op as any) {\n                    case '+': storedValue[key] += value; break;\n                    case '-': storedValue[key] -= value; break;\n                    case '*': storedValue[key] *= value; break;\n                    case '/': storedValue[key] /= value; break;\n                    case '{push}': storedValue[key].push(value); break;\n                    default: storedValue[key] = columnSetValue;\n                }\n                break;\n            }\n        }\n    }\n    return storedValue;\n};","import { Update } from \"./\";\nimport { promise } from \"@/common\";\nimport { updateValue } from \"./update_value\";\n\n\nexport const executeWhereUndefinedLogic = function (this: Update) {\n    const cursorRequest: IDBRequest<IDBCursorWithValue> = this.objectStore.openCursor();\n    return promise<void>((res, rej) => {\n        cursorRequest.onsuccess = (e: any) => {\n            const cursor: IDBCursorWithValue = (e as any).target.result;\n            if (cursor) {\n                try {\n                    const cursorUpdateRequest = cursor.update(updateValue(this.query as any, cursor.value));\n                    cursorUpdateRequest.onsuccess = () => {\n                        ++this.rowAffected;\n                        cursor.continue();\n                    };\n                    cursorUpdateRequest.onerror = rej;\n                } catch (ex) {\n                    rej(\n                        ex\n                    );\n                }\n            }\n            else {\n                res();\n            }\n        };\n        cursorRequest.onerror = rej;\n    })\n\n}\n","import { Update } from \"./\";\nimport { promiseAll, promise, IUpdateQuery } from \"@/common\";\nimport { updateValue } from \"./update_value\";\n\n\nexport const executeInLogic = function (this: Update, column, values: any[]) {\n    const columnStore = this.objectStore.index(column);\n    const query: IUpdateQuery = this.query as any;\n    const runInLogic: (val) => Promise<void> = (value) => {\n        return promise((res, rej) => {\n            const cursorRequest = columnStore.openCursor(this.util.keyRange(value));\n            cursorRequest.onsuccess = (e: any) => {\n                const cursor: IDBCursorWithValue = e.target.result;\n                if (cursor) {\n                    const value = cursor.value;\n                    if (this.whereCheckerInstance.check(value)) {\n                        try {\n                            const cursorUpdateRequest = cursor.update(updateValue(query, value));\n                            cursorUpdateRequest.onsuccess = () => {\n                                ++this.rowAffected;\n                                cursor.continue();\n                            };\n                            cursorUpdateRequest.onerror = rej;\n                        }\n                        catch (ex) {\n                            rej(\n                                ex\n                            );\n                        }\n\n                    }\n                    else {\n                        cursor.continue();\n                    }\n                }\n                else {\n                    res();\n                }\n            };\n            cursorRequest.onerror = rej;\n        });\n    };\n\n    return promiseAll<void>(\n        values.map(function (val) {\n            return runInLogic(val);\n        })\n    );\n}\n","import { Update } from \"./\";\nimport { updateValue } from \"./update_value\";\nimport { promise } from \"@/common\";\n\nexport const executeRegexLogic = function (this: Update, column: string, exp: RegExp) {\n    let cursor: IDBCursorWithValue;\n    const cursorOpenRequest = this.objectStore.index(column).openCursor();\n    this.shouldAddValue = (cursor) => {\n        return exp.test(cursor.key) &&\n            this.whereCheckerInstance.check(cursor.value);\n    };\n    return promise<void>((res, rej) => {\n\n        cursorOpenRequest.onsuccess = (e: any) => {\n            cursor = e.target.result;\n            if (cursor) {\n                if (this.shouldAddValue(cursor)) {\n                    try {\n                        const cursorUpdateRequest = cursor.update(updateValue(this.query as any, cursor.value));\n                        cursorUpdateRequest.onsuccess = () => {\n                            ++this.rowAffected;\n                            cursor.continue();\n                        };\n                        cursorUpdateRequest.onerror = rej;\n                    } catch (ex) {\n                        rej(\n                            ex\n                        );\n                    }\n                }\n                else {\n                    cursor.continue();\n                }\n\n            }\n            else {\n                res();\n            }\n        };\n        cursorOpenRequest.onerror = rej;\n    })\n\n}\n","import { promise, IUpdateQuery } from \"@/common\";\nimport { updateValue } from \"./update_value\";\nimport { Update } from \"./\";\n\nexport const executeWhereLogic = function (this: Update, column, value, op) {\n    const query: IUpdateQuery = this.query as any;\n    value = op ? value[op] : value;\n    const cursorRequest = this.objectStore.index(column).openCursor(this.util.keyRange(value, op));\n    return promise<void>((res, rej) => {\n        cursorRequest.onsuccess = (e: any) => {\n            const cursor: IDBCursorWithValue = e.target.result;\n            if (cursor) {\n                if (this.whereCheckerInstance.check(cursor.value)) {\n                    try {\n                        const cursorUpdateRequest = cursor.update(updateValue(query, cursor.value));\n                        cursorUpdateRequest.onsuccess = () => {\n                            ++this.rowAffected;\n                            cursor.continue();\n                        };\n                        cursorUpdateRequest.onerror = rej;\n                    } catch (ex) {\n                        rej(\n                            ex\n                        );\n                    }\n                }\n                else {\n                    cursor.continue();\n                }\n            }\n            else {\n                res();\n            }\n        };\n        cursorRequest.onerror = rej\n    })\n}","import { IUpdateQuery, ISelectQuery, QUERY_OPTION, API, IWhereQuery, DATA_TYPE, ERROR_TYPE } from \"@/common\";\nimport { IDBUtil } from \"@/worker/idbutil\";\nimport { DbMeta } from \"@worker/model\";\nimport { QueryHelper } from \"../query_helper\";\nimport { promiseReject, isArray, getDataType, variableFromPath, LogHelper } from \"@worker/utils\";\nimport { BaseFetch } from \"@executors/base_fetch\";\nimport { Select } from \"@executors/select\";\nimport { executeWhereUndefinedLogic } from \"./not_where\";\nimport { executeInLogic } from \"./in\";\nimport { executeRegexLogic } from \"./regex\";\nimport { executeWhereLogic } from \"./where\";\n\nexport class Update extends BaseFetch {\n    executeWhereUndefinedLogic: typeof executeWhereUndefinedLogic\n\n    constructor(query: IUpdateQuery, util: IDBUtil) {\n        super();\n        this.query = query as any;\n        this.util = util;\n        this.tableName = query.in;\n        const mapSet = query.mapSet;\n        if (mapSet) {\n            const method = getDataType(mapSet) === DATA_TYPE.String ?\n                variableFromPath(mapSet as string) : mapSet;\n            if (!method) {\n                throw new LogHelper(ERROR_TYPE.MethodNotExist, mapSet);\n            }\n            query.mapSet = method;\n        }\n\n    }\n\n    execute(beforeExecute: () => Promise<any>) {\n        const query: IUpdateQuery = this.query as any;\n        try {\n            const queryHelper = new QueryHelper(this.db);\n            const err = queryHelper.validate(API.Update, query);\n            if (err) return promiseReject(err);\n            return beforeExecute().then(_ => {\n                this.initTransaction();\n                let pResult: Promise<void>;\n                if (query.where != null) {\n                    if ((query.where as IWhereQuery).or || isArray(query.where)) {\n                        pResult = this.executeComplexLogic_();\n                    }\n                    else {\n                        pResult = this.goToWhereLogic();\n                    }\n                }\n                else {\n                    pResult = this.executeWhereUndefinedLogic();\n                }\n                return pResult.then(() => {\n                    return this.rowAffected;\n                })\n            })\n        }\n        catch (ex) {\n            return this.onException(ex);\n        }\n    }\n\n    private executeComplexLogic_() {\n        const query: IUpdateQuery = this.query as any;\n        const selectObject = new Select({\n            from: query.in,\n            where: query.where,\n            ignoreCase: query.ignoreCase\n        } as ISelectQuery, this.util);\n        selectObject.isTxQuery = this.isTxQuery;\n        return selectObject.execute().then((results: any[]) => {\n            const key = this.primaryKey(query.in);\n            const inQuery = [];\n            results.forEach((value) => {\n                inQuery.push(value[key]);\n            });\n            results = null;\n            const whereQry = { [key]: { [QUERY_OPTION.In]: inQuery } };\n            this.query.where = whereQry;\n            this.initTransaction();\n            return this.goToWhereLogic();\n        });\n    }\n\n    private initTransaction() {\n        const tableName = (this.query as any).in;\n        if (!this.isTxQuery) {\n            this.util.createTransaction([tableName]);\n        }\n        this.objectStore = this.util.objectStore(tableName);\n    }\n}\n\nUpdate.prototype.executeWhereUndefinedLogic = executeWhereUndefinedLogic;\nUpdate.prototype.executeWhereLogic = executeWhereLogic\nUpdate.prototype.executeRegexLogic = executeRegexLogic\nUpdate.prototype.executeInLogic = executeInLogic","import { IIntersectQuery, ISelectQuery } from \"@/common\";\nimport { Base } from \"@executors/base\";\nimport { Select } from \"@executors/select\";\n\nexport class Intersect extends Base {\n\n    constructor(intersectQry: IIntersectQuery, util) {\n        super();\n        this.query = intersectQry as any;\n        this.util = util;\n    }\n\n    execute() {\n        const intersectQry: IIntersectQuery = this.query as any;\n        let index = 0;\n        let hashMap = {};\n        let hashMapTemp = {};\n        let isQueryForSameTable = true;\n        const queries = intersectQry.queries;\n        const queryLength = queries.length;\n        queries.every((qry, i) => {\n            if (i + 1 < queryLength && qry.from !== queries[i + 1].from) {\n                isQueryForSameTable = false;\n                return false;\n            }\n            return true;\n        });\n        let getHashKey;\n        if (isQueryForSameTable) {\n            const pKey = this.primaryKey(queries[0].from);\n            getHashKey = (val) => {\n                return val[pKey];\n            };\n        }\n        else {\n            getHashKey = (val) => {\n                let columnValKey = \"\";\n                for (const key in val) {\n                    columnValKey += val[key];\n                }\n                return columnValKey;\n            };\n        }\n\n        let select: Select;\n        const fetchData = () => {\n            if (index < queryLength) {\n                select = new Select(queries[index], this.util);\n                return select.execute().then((selectResult) => {\n                    hashMap = {};\n                    selectResult.forEach(val => {\n                        const columnValKey = getHashKey(val);\n                        if (index === 0) {\n                            hashMapTemp[columnValKey] = val;\n                        } else if (hashMapTemp[columnValKey] != null) {\n                            hashMap[columnValKey] = val;\n                        }\n                    });\n                    if (index > 0) {\n                        hashMapTemp = { ...hashMap };\n                    }\n\n                    ++index;\n                    return fetchData();\n                })\n            }\n            else {\n                const results = [];\n                let resultPusher: (key: string) => void;\n                let skip = intersectQry.skip;\n                const limit = intersectQry.limit;\n                const onFinished = () => {\n                    select['results'] = results;\n                    Object.assign(select.query, {\n                        order: intersectQry.order,\n                        join: {} as any\n                    } as ISelectQuery);\n                    select.processOrderBy();\n                    select.processGroupDistinctAggr();\n                    return (select['results']);\n                };\n                let shouldStopLoop = false;\n                let key: string;\n                const pushResult = () => {\n                    results.push(hashMap[key]);\n                };\n                const checkLimitAndPush = () => {\n                    if (results.length < limit) {\n                        pushResult();\n                    }\n                    else {\n                        shouldStopLoop = true;\n                    }\n                };\n                const skipChecker = (callBack: () => void) => {\n                    if (skip === 0) {\n                        callBack();\n                    }\n                    else {\n                        --skip;\n                    }\n                };\n                if (intersectQry.skip && intersectQry.limit) {\n                    resultPusher = () => {\n                        skipChecker(() => {\n                            checkLimitAndPush();\n                        });\n                    };\n\n                }\n                else if (intersectQry.limit) {\n                    resultPusher = checkLimitAndPush;\n                }\n                else if (intersectQry.skip) {\n                    resultPusher = () => {\n                        skipChecker(() => {\n                            pushResult();\n                        });\n                    };\n                }\n                else {\n                    resultPusher = () => {\n                        pushResult();\n                    };\n                }\n                if (limit) {\n                    for (key in hashMap) {\n                        resultPusher(key);\n                        if (shouldStopLoop) {\n                            break;\n                        }\n                    }\n                }\n                else {\n                    for (key in hashMap) {\n                        resultPusher(key);\n                    }\n                }\n                return onFinished();\n            }\n        };\n        return fetchData();\n    }\n}","import { LogHelper, getError } from \"@worker/utils\";\nimport { ERROR_TYPE, promise } from \"@/common\";\n\nexport class DropDb {\n\n    execute(dbName: string) {\n        return promise((res, rej) => {\n            const dropDbRequest = indexedDB.deleteDatabase(dbName);\n            dropDbRequest.onblocked = () => {\n                const err = new LogHelper(ERROR_TYPE.DbBlocked);\n                return rej(\n                    getError(err)\n                );\n            };\n            dropDbRequest.onerror = (e) => {\n                return rej(\n                    getError(e)\n                )\n            };\n            dropDbRequest.onsuccess = () => {\n                res();\n            };\n        })\n    }\n}\n","import { Base } from \"@executors/base\";\nimport { ISelectQuery } from \"@/common\";\nimport { Select } from \"@executors/select\";\nimport { IDBUtil } from \"@/worker/idbutil\";\n\nexport class Union extends Base {\n\n    constructor(query: ISelectQuery[], util: IDBUtil) {\n        super();\n        this.query = query as any;\n        this.util = util;\n    }\n\n    execute() {\n        const query: ISelectQuery[] = this.query as any;\n        let index = 0;\n        const hashMap = {};\n        let isQueryForSameTable = true;\n        const queryLength = query.length;\n        query.every((qry, i) => {\n            if (i + 1 < queryLength && qry.from !== query[i + 1].from) {\n                isQueryForSameTable = false;\n                return false;\n            }\n            return true;\n        });\n        let getHashKey;\n        if (isQueryForSameTable) {\n            const pKey = this.primaryKey(query[0].from);\n            getHashKey = (val) => {\n                return val[pKey];\n            };\n        }\n        else {\n            getHashKey = (val) => {\n                let columnValKey = \"\";\n                for (const key in val) {\n                    columnValKey += val[key];\n                }\n                return columnValKey;\n            };\n        }\n        let select: Select;\n        const fetchData = () => {\n            if (index < query.length) {\n                select = new Select(query[index++], this.util);\n                return select.execute().then((selectResult) => {\n                    selectResult.forEach(val => {\n                        hashMap[getHashKey(val)] = val;\n                    });\n                    return fetchData();\n                })\n            }\n            else {\n                const results = [];\n                for (const key in hashMap) {\n                    results.push(hashMap[key]);\n                }\n                return results;\n            }\n        };\n        return fetchData();\n    }\n\n\n}","import { Remove } from \".\";\nimport { promise } from \"@/common\";\n\nexport const executeWhereUndefinedLogic = function (this: Remove) {\n    let cursor;\n    const cursorRequest = this.objectStore.openCursor();\n    return promise<void>((res, rej) => {\n        cursorRequest.onsuccess = (e: any) => {\n            cursor = e.target.result;\n            if (cursor) {\n                cursor.delete();\n                ++this.rowAffected;\n                (cursor as any).continue();\n            }\n            else {\n                res();\n            }\n        };\n        cursorRequest.onerror = rej;\n    })\n\n}\n","import { Remove } from \".\";\nimport { promise, promiseAll } from \"@/common\";\n\nexport const executeInLogic = function (this: Remove, column, values) {\n    const columnIndex = this.objectStore.index(column)\n    const runInLogic: (val) => Promise<void> = (value) => {\n        return promise((res, rej) => {\n            const cursorRequest = columnIndex.openCursor(this.util.keyRange(value));\n            cursorRequest.onsuccess = (e: any) => {\n                const cursor: IDBCursorWithValue = e.target.result;\n                if (cursor) {\n                    if (this.whereCheckerInstance.check(cursor.value)) {\n                        cursor.delete();\n                        ++this.rowAffected;\n                    }\n                    cursor.continue();\n                }\n                else {\n                    res();\n                }\n            };\n            cursorRequest.onerror = rej;\n        });\n    };\n\n    return promiseAll<void>(\n        values.map(function (val) {\n            return runInLogic(val);\n        })\n    );\n}\n","import { Remove } from \".\";\nimport { promise } from \"@/common\";\n\nexport const executeWhereLogic = function (this: Remove, column, value, op) {\n    let cursor: IDBCursorWithValue,\n        cursorRequest;\n    value = op ? value[op] : value;\n    cursorRequest = this.objectStore.index(column).openCursor(this.util.keyRange(value, op));\n    return promise<void>((res, rej) => {\n        cursorRequest.onsuccess = (e) => {\n            cursor = e.target.result;\n            if (cursor) {\n                if (this.whereCheckerInstance.check(cursor.value)) {\n                    cursor.delete();\n                    ++this.rowAffected;\n                }\n                cursor.continue();\n            }\n            else {\n                res();\n            }\n        };\n\n        cursorRequest.onerror = rej\n    })\n\n}\n\n","import { Remove } from \"./\";\nimport { promise } from \"@/common\";\n\nexport const executeRegexLogic = function (this: Remove, column: string, exp: RegExp) {\n    let cursor: IDBCursorWithValue;\n    const cursorRequest = this.objectStore.index(column).openCursor();\n    this.shouldAddValue = (cursor) => {\n        return exp.test(cursor.key) &&\n            this.whereCheckerInstance.check(cursor.value);\n    };\n    return promise<void>((res, rej) => {\n        cursorRequest.onsuccess = (e: any) => {\n            cursor = e.target.result;\n            if (cursor) {\n                if (this.shouldAddValue(cursor)) {\n                    cursor.delete();\n                    ++this.rowAffected;\n                }\n                cursor.continue();\n            }\n            else {\n                res();\n            }\n        };\n        cursorRequest.onerror = rej;\n    })\n\n}","import { BaseFetch } from \"../base_fetch\";\nimport { IRemoveQuery, QUERY_OPTION, API, IWhereQuery } from \"@/common\";\nimport { IDBUtil } from \"@/worker/idbutil\";\nimport { QueryHelper } from \"@executors/query_helper\";\nimport { DbMeta } from \"@/worker/model\";\nimport { promiseReject, isArray, getObjectFirstKey, getError } from \"@/worker/utils\";\nimport { Select } from \"@executors/select\";\nimport { executeWhereUndefinedLogic } from \"./not_where\";\nimport { executeInLogic } from \"./in\";\nimport { executeWhereLogic } from \"./where\";\nimport { executeRegexLogic } from \"./regex\";\n\nexport class Remove extends BaseFetch {\n    isOr;\n    executeWhereUndefinedLogic;\n\n    constructor(\n        query: IRemoveQuery, util: IDBUtil\n    ) {\n        super();\n        this.query = query;\n        this.util = util;\n        this.tableName = query.from;\n    }\n\n    execute(beforeExecute: () => Promise<any>) {\n        const queryHelper = new QueryHelper(this.db);\n        const query = this.query;\n        const err = queryHelper.validate(API.Remove, query);\n        if (err) return promiseReject(\n            err\n        );\n        let pResult: Promise<void>;\n        return beforeExecute().then(_ => {\n            try {\n                this.initTransaction_();\n                if (query.where != null) {\n                    if (isArray(query.where)) {\n                        pResult = this.processWhereArrayQry();\n                    }\n                    else {\n                        pResult = this.processWhere_();\n                    }\n                }\n                else {\n                    pResult = this.executeWhereUndefinedLogic();\n                }\n\n            }\n            catch (ex) {\n                return this.onException(ex);\n            }\n            return pResult.then(() => {\n                return this.rowAffected;\n            })\n        })\n    }\n\n    private processWhereArrayQry() {\n        const selectObject = new Select(this.query, this.util);\n        selectObject.isTxQuery = this.isTxQuery;\n        return selectObject.execute().then((results) => {\n            const keyList = [];\n            const pkey = this.primaryKey(this.query.from);\n            results.forEach((item) => {\n                keyList.push(item[pkey]);\n            });\n            results = null;\n            const whereQry = { [pkey]: { [QUERY_OPTION.In]: keyList } };\n            this.query[QUERY_OPTION.Where] = whereQry;\n            return this.processWhere_();\n        })\n    }\n\n    private processWhere_() {\n        if ((this.query.where as IWhereQuery).or) {\n            this.processOrLogic();\n        }\n        return this.goToWhereLogic().then(() => {\n            return this.onWhereEvaluated();\n        });\n    }\n\n    private initTransaction_() {\n        if (!this.isTxQuery) {\n            this.util.createTransaction([this.query.from]);\n        }\n        this.objectStore = this.util.objectStore(this.query.from);\n    }\n\n    private onWhereEvaluated() {\n        if (this.isOr) {\n            return this.orQuerySuccess_();\n        }\n    }\n\n    private orQuerySuccess_() {\n        const key = getObjectFirstKey((this as any)._orInfo.OrQuery);\n        if (key != null) {\n            const where = {};\n            where[key] = (this as any)._orInfo.OrQuery[key];\n            delete (this as any)._orInfo.OrQuery[key];\n            this.query.where = where;\n            return this.goToWhereLogic().then(() => {\n                return this.onWhereEvaluated();\n            })\n        }\n        else {\n            this.isOr = true;\n        }\n    }\n\n    private processOrLogic() {\n        this.isOr = true;\n        const where = this.query.where as IWhereQuery;\n        (this as any)._orInfo = {\n            OrQuery: where.or\n        };\n\n        // free or memory\n        delete where.or;\n    }\n}\n\nRemove.prototype.executeInLogic = executeInLogic;\nRemove.prototype.executeWhereUndefinedLogic = executeWhereUndefinedLogic;\nRemove.prototype.executeWhereLogic = executeWhereLogic;\nRemove.prototype.executeRegexLogic = executeRegexLogic;","import { Base } from \"@executors/base\";\nimport { IDBUtil } from \"@/worker/idbutil\";\nimport { DbMeta } from \"@/worker/model\";\nimport { MetaHelper } from \"@/worker/meta_helper\";\nimport { promise } from \"@/common\";\n\nexport class Clear extends Base {\n    constructor(tableName: string, util: IDBUtil) {\n        super();\n        this.query = tableName as any;\n        this.util = util;\n        this.tableName = tableName;\n    }\n\n    execute(beforeExecute: () => Promise<any>) {\n        const tableName: string = this.query as any;\n        if (!this.isTxQuery) {\n            this.util.createTransaction([tableName, MetaHelper.tableName]);\n        }\n        return beforeExecute().then(_ => {\n            const clearRequest: IDBRequest = this.util.objectStore(tableName).clear();\n            try {\n                return promise<void>((res, rej) => {\n                    clearRequest.onsuccess = (e) => {\n                        const currentTable = this.table(tableName);\n                        for (const columnName in currentTable.autoIncColumnValue) {\n                            currentTable.autoIncColumnValue[columnName] = 0;\n                        }\n                        MetaHelper.set(MetaHelper.dbSchema, this.util.db, this.util).then(() => {\n                            res();\n                        }).catch(rej);\n                    };\n\n                    clearRequest.onerror = rej;\n                })\n            }\n            catch (ex) {\n                return this.onException(ex);\n            }\n        })\n    }\n}","import { Base } from \"@executors/base\";\nimport { ITranscationQuery, WebWorkerRequest, ERROR_TYPE, ISelectQuery, API, IInsertQuery, IUpdateQuery, IRemoveQuery, ICountQuery, WebWorkerResult, promise } from \"@/common\";\nimport { IDBUtil } from \"@worker/idbutil\";\nimport { promiseReject, LogHelper, variableFromPath } from \"@worker/utils\";\nimport { Insert } from \"@executors/insert\";\nimport { Select } from \"@executors/select\";\nimport { Count } from \"@executors/count\";\nimport { Update } from \"@executors/update\";\nimport { Remove } from \"@executors/remove\";\nimport { DbMeta } from \"@worker/model\";\nimport { IQueryExecutor } from \"@/worker/interfaces\";\nimport { MetaHelper } from \"@/worker/meta_helper\";\n\nexport class Transaction extends Base {\n    results = {} as any;\n    reqQueue: WebWorkerRequest[] = [];\n    isQueryExecuting = false;\n\n    isTxStarted_ = false;\n\n    onSuccess: (result: any) => void;\n    onError: (err: LogHelper) => void;\n\n    beforeExecute: () => Promise<void>;\n\n    constructor(qry: ITranscationQuery, util: IDBUtil) {\n        super();\n        this.query = qry as any;\n        this.util = util;\n    }\n\n    execute(cb: () => Promise<void>) {\n        this.beforeExecute = cb;\n        const err = this.validate();\n        if (err) return promiseReject(\n            err\n        );\n        this.startExecution_()\n\n        return promise<void>((res, rej) => {\n            this.onSuccess = res;\n            this.onError = rej;\n        }).then(result => {\n            this.beforeExecute = null;\n            this.log(`transaction finished`);\n            return result;\n        })\n    }\n\n    validate() {\n        const query: ITranscationQuery = this.query as any;\n        const notExistingTable = this.notExistingTable_(query.tables);\n        if (notExistingTable) {\n            return new LogHelper(ERROR_TYPE.TableNotExist, { tableName: notExistingTable });\n        }\n        const methodName = query.method;\n        let txLogic = variableFromPath(methodName);\n        if (!txLogic) {\n            return new LogHelper(ERROR_TYPE.MethodNotExist, methodName);\n        }\n    }\n\n    private startExecution_() {\n        const query: ITranscationQuery = this.query as any;\n        const select = (qry: ISelectQuery) => {\n            return this.pushReq_({\n                name: API.Select,\n                query: qry\n            } as WebWorkerRequest);\n        };\n        const insert = (qry: IInsertQuery) => {\n            return this.pushReq_({\n                name: API.Insert,\n                query: qry\n            } as WebWorkerRequest);\n        };\n        const update = (qry: IUpdateQuery) => {\n            return this.pushReq_({\n                name: API.Update,\n                query: qry\n            } as WebWorkerRequest);\n        };\n        const remove = (qry: IRemoveQuery) => {\n            return this.pushReq_({\n                name: API.Remove,\n                query: qry\n            } as WebWorkerRequest);\n        };\n        const count = (qry: ICountQuery) => {\n            return this.pushReq_({\n                name: API.Count,\n                query: qry\n            } as WebWorkerRequest);\n        };\n        const setResult = (key: string, value) => {\n            this.results[key] = value;\n        };\n        const getResult = (key: string) => {\n            return this.results[key];\n        };\n        const abort = (msg: string) => {\n            this.abortTx_(msg);\n        };\n\n        const start = () => {\n            this.startTx_();\n        };\n        const methodName = query.method\n        let txLogic = variableFromPath(methodName);\n\n        this.log(`transaction query started`);\n\n        return txLogic.call(\n            this,\n            {\n                data: query.data,\n                insert: insert, select: select,\n                update: update, remove: remove,\n                count: count, setResult: setResult,\n                getResult: getResult, abort: abort,\n                start: start\n            }\n        );\n    }\n\n    log(message) {\n        this.util.logger.log(message);\n    }\n\n    private startTx_() {\n        try {\n            this.isTxStarted_ = true;\n            let tableNames = (this.query as any).tables as string[];\n            tableNames = tableNames.concat(MetaHelper.tableName)\n            this.util.createTransaction(tableNames).then(_ => {\n                this.onSuccess(this.results);\n            }).catch(err => {\n                this.onError(err);\n            })\n            return this.processExecutionOfQry_();\n        }\n        catch (ex) {\n            this.onError(this.onException(ex) as any);\n        }\n    }\n\n\n\n\n\n    private onReqFinished_(result) {\n        const finisehdRequest = this.reqQueue.shift();\n\n        this.log(`finished request : ${finisehdRequest.name} `);\n\n        if (finisehdRequest) {\n            if (result.error) {\n                this.abortTx_(\"automatic abort of transaction due to error occured\");\n                this.log(`transaction aborted due to error occured`);\n                this.onError(result.error);\n            }\n            else {\n                this.isQueryExecuting = false;\n                if (finisehdRequest.onSuccess) {\n                    finisehdRequest.onSuccess(result);\n                }\n                this.processExecutionOfQry_();\n            }\n        }\n    }\n\n    private abortTx_(msg: string) {\n        this.reqQueue = [];\n        this.util.abortTransaction();\n        this.log(`transaction aborted. Msg : ${msg}`);\n\n    }\n\n    private executeRequest_(request: WebWorkerRequest) {\n        this.isQueryExecuting = true;\n        let requestObj: IQueryExecutor;\n        this.log(`executing request : ${request.name} `);\n        const onReqFinished = this.onReqFinished_.bind(this);\n        const query = request.query\n        switch (request.name) {\n            case API.Select:\n                requestObj = new Select(\n                    query, this.util\n                );\n                break;\n            case API.Insert:\n                requestObj = new Insert(\n                    query, this.util\n                );\n                break;\n            case API.Update:\n                requestObj = new Update(\n                    query, this.util\n                );\n                break;\n            case API.Remove:\n                requestObj = new Remove(\n                    query, this.util\n                );\n                break;\n            case API.Count:\n                requestObj = new Count(\n                    query, this.util\n                );\n                break;\n        }\n        requestObj.isTxQuery = true;\n        requestObj.execute(this.beforeExecute).then(onReqFinished).catch(err => {\n            const result = {\n                error: err\n            } as WebWorkerResult;\n            onReqFinished(result);\n        })\n    }\n\n    private pushReq_(request: WebWorkerRequest) {\n        const push = () => {\n            this.reqQueue.push(request);\n        };\n        const promiseObj = promise((resolve, reject) => {\n            request.onSuccess = (result) => {\n                resolve(result);\n            };\n            request.onError = (error) => {\n                reject(error);\n            };\n        });\n        if (this.isTxStarted_ === true) {\n            push();\n            this.processExecutionOfQry_();\n        }\n        else {\n            push();\n        }\n        this.log(`request pushed : ${request.name}`);\n        return promiseObj;\n    }\n\n    private processExecutionOfQry_() {\n        if (this.isQueryExecuting === false) {\n            if (this.reqQueue.length > 0) {\n                this.executeRequest_(this.reqQueue[0]);\n            }\n        }\n    }\n\n    private notExistingTable_(tables: string[]) {\n        let invalidTable: string = null;\n        tables.every(tableName => {\n            const table = this.table(tableName);\n            if (table == null) {\n                invalidTable = tableName;\n                return false;\n            }\n            return true;\n        });\n        return invalidTable;\n    }\n}","import { DbMeta } from \"@worker/model\";\nimport { IDataBase, ITable } from \"@/common\";\n\nexport const userDbSchema = (db: DbMeta) => {\n    const database = {\n        name: db.name,\n        version: db.version,\n        tables: []\n    } as IDataBase;\n    db.tables.forEach(table => {\n        const tableAsObj = {\n            name: table.name,\n            columns: {}\n        } as ITable;\n        table.columns.forEach(column => {\n            tableAsObj.columns[column.name] = column;\n        });\n        database.tables.push(tableAsObj);\n    })\n    return database;\n}","import { WebWorkerRequest, promiseResolve, API, IDataBase, WebWorkerResult, promise, ERROR_TYPE, IDbInfo } from \"@/common\";\nimport { DbMeta } from \"./model\";\nimport { IDBUtil } from \"./idbutil\";\nimport { Insert } from \"@executors/insert\";\nimport { IS_WORKER, IS_IDB_SUPPORTED } from \"./constants\";\nimport { MetaHelper } from \"./meta_helper\";\nimport { Select } from \"@executors/select\";\nimport { Count } from \"@executors/count\";\nimport { Update } from \"@executors/update\";\nimport { Intersect } from \"./intersect\";\nimport { DropDb } from \"@executors/drop_db\";\nimport { Union } from \"./union\";\nimport { Remove } from \"@executors/remove\";\nimport { Clear } from \"@executors/clear\";\nimport { Transaction } from \"@executors/transaction\";\nimport { LogHelper, getError, promiseReject, variableFromPath, userDbSchema, getLength } from \"@worker/utils\";\n\nexport class QueryManager {\n    util: IDBUtil;\n\n    get db() {\n        return this.util.db;\n    }\n\n    middlewares: string[] = [];\n\n    private onQryFinished;\n\n    protected get logger() {\n        return this.util.logger;\n    }\n\n    constructor(fn?: (result: any) => void) {\n        this.util = new IDBUtil();\n        this.onQryFinished = IS_WORKER ? (result) => {\n            self.postMessage(result);\n        } : fn;\n    }\n\n    private executeMiddleware_(request: WebWorkerRequest) {\n        const lastIndex = (getLength(this.middlewares) as any) - 1;\n        if (lastIndex < 0) {\n            return promiseResolve();\n        }\n        const middlewareContext = {};\n        const db = this.db;\n        Object.defineProperty(middlewareContext, 'database', {\n            get() {\n                return userDbSchema(db);\n            }\n        });\n        return promise<void>((res) => {\n            let index = 0;\n            const callNextMiddleware = () => {\n                if (index <= lastIndex) {\n                    let promiseResult = variableFromPath(this.middlewares[index++])(request, middlewareContext);\n                    if (!promiseResult || !promiseResult.then) {\n                        promiseResult = Promise.resolve(promiseResult);\n                    }\n                    promiseResult.then(_ => {\n                        callNextMiddleware();\n                    });\n                }\n                else {\n                    res();\n                }\n            };\n            callNextMiddleware();\n        });\n    }\n\n    executeQuery(request: WebWorkerRequest, cb: () => Promise<any>) {\n        let queryResult: Promise<any>;\n        const query = request.query;\n        switch (request.name) {\n            case API.OpenDb:\n                cb();\n                queryResult = this.openDb(query);\n                break;\n            case API.InitDb:\n                cb();\n                queryResult = this.initDb(query);\n                break;\n            case API.CloseDb:\n                cb();\n                queryResult = this.closeDb();\n                break;\n            case API.Insert:\n                queryResult = new Insert(query, this.util).\n                    execute(cb);\n                break;\n            case API.Select:\n                queryResult = new Select(query, this.util).\n                    execute(cb);\n                break;\n            case API.Count:\n                queryResult = new Count(query, this.util).\n                    execute(cb);\n                break;\n            case API.Update:\n                queryResult = new Update(query, this.util).\n                    execute(cb);\n                break;\n            case API.Intersect:\n                cb();\n                queryResult = new Intersect(query, this.util).\n                    execute();\n                break;\n            case API.DropDb:\n                cb();\n                queryResult = this.dropDb();\n                break;\n            case API.Terminate:\n                cb();\n                queryResult = this.terminate();\n                break;\n            case API.Union:\n                cb();\n                queryResult = new Union(query, this.util).\n                    execute();\n                break;\n            case API.Remove:\n                queryResult = new Remove(query, this.util).\n                    execute(cb);\n                break;\n            case API.Clear:\n                queryResult = new Clear(query, this.util).\n                    execute(cb);\n                break;\n            case API.Transaction:\n                queryResult = new Transaction(query, this.util).\n                    execute(cb);\n                break;\n            case API.Get:\n                cb();\n                queryResult = MetaHelper.get(query as string, this.util);\n                break;\n            case API.Set:\n                cb();\n                queryResult = MetaHelper.set(query.key, query.value, this.util);\n                break;\n            case API.ImportScripts:\n                cb();\n                queryResult = this.importScripts_(request);\n                break;\n            case API.ChangeLogStatus:\n                cb();\n                this.logger.status = query;\n                queryResult = Promise.resolve();\n                break;\n            case API.Middleware:\n                cb();\n                const value = variableFromPath(query);\n                if (!value) {\n                    return promiseReject(\n                        new LogHelper(ERROR_TYPE.InvalidMiddleware, query)\n                    );\n                }\n                this.middlewares.push(query);\n                return promiseResolve();\n            default:\n                if (process.env.NODE_ENV === 'dev') {\n                    console.error('The Api:-' + request.name + ' does not support.');\n                }\n                queryResult = promiseResolve();\n        }\n        this.logger.log(`Executing query ${request.name} in web worker`);\n        return queryResult;\n    }\n\n    private callResultMiddleware(middlewares: any[], result) {\n        return promise<any>((res) => {\n            let index = 0;\n            const lastIndex = (getLength(middlewares) as any) - 1;\n            const callNextMiddleware = () => {\n                if (index <= lastIndex) {\n                    let promiseResult = middlewares[index++](result);\n                    if (!(promiseResult instanceof Promise)) {\n                        promiseResult = promiseResolve(promiseResult);\n                    }\n                    promiseResult.then(modifiedResult => {\n                        result = modifiedResult;\n                        callNextMiddleware();\n                    });\n                }\n                else {\n                    res(result);\n                }\n            };\n            callNextMiddleware();\n        });\n    }\n    private callBeforeMiddleware(middlewares: any[]) {\n        return promise<any>((res) => {\n            let index = 0;\n            const lastIndex = (getLength(middlewares) as any) - 1;\n            const callNextMiddleware = () => {\n                if (index <= lastIndex) {\n                    let promiseResult = middlewares[index++]();\n                    if (!(promiseResult instanceof Promise)) {\n                        promiseResult = promiseResolve(promiseResult);\n                    }\n                    promiseResult.then(callNextMiddleware);\n                }\n                else {\n                    res();\n                }\n            };\n            callNextMiddleware();\n        });\n    }\n\n    run(request: WebWorkerRequest) {\n        let onResultCallback = [];\n        const beforeExecuteCallback = [];\n        request.onResult = (cb) => {\n            onResultCallback.push((result) => {\n                return cb(result);\n            });\n        };\n        request.beforeExecute = (cb) => {\n            beforeExecuteCallback.push((result) => {\n                return cb(result);\n            });\n        };\n        this.executeMiddleware_(request).then(_ => {\n            return this.executeQuery(request, () => {\n                return this.callBeforeMiddleware(beforeExecuteCallback);\n            }).then((result) => {\n                return this.callResultMiddleware(onResultCallback, result).then(modifiedResult => {\n                    this.returnResult_({\n                        result: modifiedResult\n                    });\n                });\n            });\n        }).catch(ex => {\n            onResultCallback = [];\n            const err = getError(ex);\n            const result = {\n                error: err\n            } as WebWorkerResult;\n            this.returnResult_(result);\n        });\n    }\n\n    private importScripts_(request: WebWorkerRequest) {\n        return promise<void>((res, rej) => {\n            try {\n                importScripts(...request.query);\n                res();\n            } catch (e) {\n                const err = new LogHelper(ERROR_TYPE.ImportScriptsFailed, e.message);\n                rej(err);\n            }\n        });\n    }\n\n    private returnResult_(result: WebWorkerResult) {\n        this.logger.log(`Query finished inside web worker`);\n        if (this.util) {\n            this.util.emptyTx();\n        }\n        this.onQryFinished(result);\n    }\n\n    private dropDb() {\n        const dbName = this.db.name;\n        return this.terminate().then(() => {\n            return new DropDb().execute(dbName);\n        });\n    }\n\n    closeDb() {\n        return this.util.close();\n    }\n\n    terminate() {\n        return this.closeDb().then(() => {\n            this.util.db = null;\n        });\n    }\n\n    openDb(query: IDbInfo) {\n        return this.closeDb().then(_ => {\n            let pResult: Promise<boolean>;\n            if (this.db && query.name === this.db.name) {\n                pResult = this.initDb();\n            }\n            else {\n                pResult = this.initDb({\n                    name: query.name,\n                    tables: [\n                    ],\n                    version: query.version\n                });\n            }\n            return pResult.then(() => {\n                return this.db;\n            });\n        });\n    }\n\n    initDb(dataBase?: IDataBase) {\n        if (!IS_IDB_SUPPORTED) {\n            return promiseReject(\n                new LogHelper(ERROR_TYPE.IndexedDbNotSupported)\n            );\n        }\n\n        const dbMeta = dataBase ? new DbMeta(dataBase) : this.db;\n        this.util = new IDBUtil();\n\n        return promise<boolean>((res, rej) => {\n            this.util.initDb(dbMeta).then((dbInfo) => {\n                if (dbInfo.isCreated) {\n                    MetaHelper.get(\n                        MetaHelper.dbSchema,\n                        this.util\n                    ).then((value: DbMeta) => {\n                        if (value) {\n                            value.tables.forEach((table, index) => {\n                                const targetTable = dbMeta.tables[index];\n                                if (targetTable) {\n                                    targetTable.autoIncColumnValue =\n                                        table.autoIncColumnValue;\n                                }\n                            });\n                        }\n                        this.util.db = dbMeta;\n                        dbInfo.database = userDbSchema(this.db);\n                        MetaHelper.set(\n                            MetaHelper.dbSchema, dbMeta,\n                            this.util\n                        ).then(() => {\n                            res(dbInfo);\n                        });\n                    });\n                }\n                else {\n                    MetaHelper.get(\n                        MetaHelper.dbSchema,\n                        this.util\n                    ).then((value: any) => {\n                        this.util.db = value;\n                        dbInfo.database = userDbSchema(this.db);\n                        res(dbInfo);\n                    });\n                }\n            }).catch(rej);\n        });\n    }\n}\n","import { QueryManager } from \"@/worker/query_manager\";\nimport { IS_WORKER } from \"./constants\";\nexport * from \"./query_manager\";\n\nif (IS_WORKER) {\n    const manager = new QueryManager();\n    (self as any).onmessage = function (e) {\n        manager.run(e.data);\n    };\n}\n\n"]},"metadata":{},"sourceType":"script"}