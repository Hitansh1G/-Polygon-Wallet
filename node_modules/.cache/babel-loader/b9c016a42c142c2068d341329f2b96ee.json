{"ast":null,"code":"/*!\n * @license :jsstore - V4.3.8 - 10/02/2022\n * https://github.com/ujjwalguptaofficial/JsStore\n * Copyright (c) 2022 @Ujjwal Gupta; Licensed MIT\n */\nmodule.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId]) {\n      /******/\n      return installedModules[moduleId].exports;\n      /******/\n    }\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n\n    var module = installedModules[moduleId] = {\n      /******/\n      i: moduleId,\n\n      /******/\n      l: false,\n\n      /******/\n      exports: {}\n      /******/\n\n    };\n    /******/\n\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.l = true;\n    /******/\n\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n\n  /******/\n\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n\n  /******/\n  // define getter function for harmony exports\n\n  /******/\n\n  __webpack_require__.d = function (exports, name, getter) {\n    /******/\n    if (!__webpack_require__.o(exports, name)) {\n      /******/\n      Object.defineProperty(exports, name, {\n        enumerable: true,\n        get: getter\n      });\n      /******/\n    }\n    /******/\n\n  };\n  /******/\n\n  /******/\n  // define __esModule on exports\n\n  /******/\n\n\n  __webpack_require__.r = function (exports) {\n    /******/\n    if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n      /******/\n      Object.defineProperty(exports, Symbol.toStringTag, {\n        value: 'Module'\n      });\n      /******/\n    }\n    /******/\n\n\n    Object.defineProperty(exports, '__esModule', {\n      value: true\n    });\n    /******/\n  };\n  /******/\n\n  /******/\n  // create a fake namespace object\n\n  /******/\n  // mode & 1: value is a module id, require it\n\n  /******/\n  // mode & 2: merge all properties of value into the ns\n\n  /******/\n  // mode & 4: return value when already ns object\n\n  /******/\n  // mode & 8|1: behave like require\n\n  /******/\n\n\n  __webpack_require__.t = function (value, mode) {\n    /******/\n    if (mode & 1) value = __webpack_require__(value);\n    /******/\n\n    if (mode & 8) return value;\n    /******/\n\n    if (mode & 4 && typeof value === 'object' && value && value.__esModule) return value;\n    /******/\n\n    var ns = Object.create(null);\n    /******/\n\n    __webpack_require__.r(ns);\n    /******/\n\n\n    Object.defineProperty(ns, 'default', {\n      enumerable: true,\n      value: value\n    });\n    /******/\n\n    if (mode & 2 && typeof value != 'string') for (var key in value) __webpack_require__.d(ns, key, function (key) {\n      return value[key];\n    }.bind(null, key));\n    /******/\n\n    return ns;\n    /******/\n  };\n  /******/\n\n  /******/\n  // getDefaultExport function for compatibility with non-harmony modules\n\n  /******/\n\n\n  __webpack_require__.n = function (module) {\n    /******/\n    var getter = module && module.__esModule ?\n    /******/\n    function getDefault() {\n      return module['default'];\n    } :\n    /******/\n    function getModuleExports() {\n      return module;\n    };\n    /******/\n\n    __webpack_require__.d(getter, 'a', getter);\n    /******/\n\n\n    return getter;\n    /******/\n  };\n  /******/\n\n  /******/\n  // Object.prototype.hasOwnProperty.call\n\n  /******/\n\n\n  __webpack_require__.o = function (object, property) {\n    return Object.prototype.hasOwnProperty.call(object, property);\n  };\n  /******/\n\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n\n  __webpack_require__.p = \"\";\n  /******/\n\n  /******/\n\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(__webpack_require__.s = 2);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  2:\n  /***/\n  function (module, __webpack_exports__, __webpack_require__) {\n    \"use strict\"; // ESM COMPAT FLAG\n\n    __webpack_require__.r(__webpack_exports__); // EXPORTS\n\n\n    __webpack_require__.d(__webpack_exports__, \"Connection\", function () {\n      return (\n        /* reexport */\n        connection_Connection\n      );\n    });\n\n    __webpack_require__.d(__webpack_exports__, \"ERROR_TYPE\", function () {\n      return (\n        /* reexport */\n        ERROR_TYPE\n      );\n    });\n\n    __webpack_require__.d(__webpack_exports__, \"WORKER_STATUS\", function () {\n      return (\n        /* reexport */\n        WORKER_STATUS\n      );\n    });\n\n    __webpack_require__.d(__webpack_exports__, \"DATA_TYPE\", function () {\n      return (\n        /* reexport */\n        DATA_TYPE\n      );\n    });\n\n    __webpack_require__.d(__webpack_exports__, \"API\", function () {\n      return (\n        /* reexport */\n        API\n      );\n    });\n\n    __webpack_require__.d(__webpack_exports__, \"EVENT\", function () {\n      return (\n        /* reexport */\n        EVENT\n      );\n    });\n\n    __webpack_require__.d(__webpack_exports__, \"QUERY_OPTION\", function () {\n      return (\n        /* reexport */\n        QUERY_OPTION\n      );\n    });\n\n    __webpack_require__.d(__webpack_exports__, \"IDB_MODE\", function () {\n      return (\n        /* reexport */\n        IDB_MODE\n      );\n    });\n\n    __webpack_require__.d(__webpack_exports__, \"OCCURENCE\", function () {\n      return (\n        /* reexport */\n        OCCURENCE\n      );\n    });\n\n    __webpack_require__.d(__webpack_exports__, \"CONNECTION_STATUS\", function () {\n      return (\n        /* reexport */\n        CONNECTION_STATUS\n      );\n    });\n\n    __webpack_require__.d(__webpack_exports__, \"promise\", function () {\n      return (\n        /* reexport */\n        promise\n      );\n    });\n\n    __webpack_require__.d(__webpack_exports__, \"promiseAll\", function () {\n      return (\n        /* reexport */\n        promiseAll\n      );\n    });\n\n    __webpack_require__.d(__webpack_exports__, \"promiseResolve\", function () {\n      return (\n        /* reexport */\n        promiseResolve\n      );\n    });\n\n    __webpack_require__.d(__webpack_exports__, \"forObj\", function () {\n      return (\n        /* reexport */\n        forObj\n      );\n    }); // CONCATENATED MODULE: ./src/main/log_helper.ts\n\n\n    var LogHelper =\n    /** @class */\n    function () {\n      function LogHelper(type, info) {\n        this.type = type;\n        this._info = info;\n        this.message = this.getMsg();\n      }\n\n      LogHelper.prototype.throw = function () {\n        throw this;\n      };\n\n      LogHelper.prototype.log = function (msg) {\n        if (this.status) {\n          console.log(msg);\n        }\n      };\n\n      LogHelper.prototype.logError = function () {\n        console.error(this.get());\n      };\n\n      LogHelper.prototype.logWarning = function () {\n        console.warn(this.get());\n      };\n\n      LogHelper.prototype.get = function () {\n        return {\n          message: this.message,\n          type: this.type\n        };\n      };\n\n      LogHelper.prototype.getMsg = function () {\n        var errMsg;\n\n        switch (this.type) {\n          default:\n            errMsg = this.message;\n            break;\n        }\n\n        return errMsg;\n      };\n\n      return LogHelper;\n    }(); // CONCATENATED MODULE: ./src/common/enums.ts\n\n\n    var ERROR_TYPE;\n\n    (function (ERROR_TYPE) {\n      ERROR_TYPE[\"InvalidUpdateColumn\"] = \"invalid_update_column\";\n      ERROR_TYPE[\"UndefinedColumn\"] = \"undefined_column\";\n      ERROR_TYPE[\"UndefinedValue\"] = \"undefined_value\";\n      ERROR_TYPE[\"UndefinedColumnName\"] = \"undefined_column_name\";\n      ERROR_TYPE[\"UndefinedDbName\"] = \"undefined_database_name\";\n      ERROR_TYPE[\"UndefinedColumnValue\"] = \"undefined_column_value\";\n      ERROR_TYPE[\"NotArray\"] = \"not_array\";\n      ERROR_TYPE[\"NoValueSupplied\"] = \"no_value_supplied\";\n      ERROR_TYPE[\"ColumnNotExist\"] = \"column_not_exist\";\n      ERROR_TYPE[\"EnableSearchOff\"] = \"enable_search_off\";\n      ERROR_TYPE[\"InvalidOp\"] = \"invalid_operator\";\n      ERROR_TYPE[\"NullValue\"] = \"null_value\";\n      ERROR_TYPE[\"WrongDataType\"] = \"wrong_data_type\";\n      ERROR_TYPE[\"TableNotExist\"] = \"table_not_exist\";\n      ERROR_TYPE[\"DbNotExist\"] = \"db_not_exist\";\n      ERROR_TYPE[\"ConnectionAborted\"] = \"connection_aborted\";\n      ERROR_TYPE[\"ConnectionClosed\"] = \"connection_closed\";\n      ERROR_TYPE[\"NotObject\"] = \"not_object\";\n      ERROR_TYPE[\"InvalidConfig\"] = \"invalid_config\";\n      ERROR_TYPE[\"DbBlocked\"] = \"Db_blocked\";\n      ERROR_TYPE[\"IndexedDbNotSupported\"] = \"indexeddb_not_supported\";\n      ERROR_TYPE[\"NullValueInWhere\"] = \"null_value_in_where\";\n      ERROR_TYPE[\"InvalidJoinQuery\"] = \"invalid_join_query\";\n      ERROR_TYPE[\"InvalidOrderQuery\"] = \"invalid_order_query\";\n      ERROR_TYPE[\"InvalidQuery\"] = \"invalid_query\";\n      ERROR_TYPE[\"InvalidGroupQuery\"] = \"invalid_group_query\";\n      ERROR_TYPE[\"ImportScriptsFailed\"] = \"import_scripts_failed\";\n      ERROR_TYPE[\"MethodNotExist\"] = \"method_not_exist\";\n      ERROR_TYPE[\"Unknown\"] = \"unknown\";\n      ERROR_TYPE[\"InvalidMiddleware\"] = \"invalid_middleware\";\n    })(ERROR_TYPE || (ERROR_TYPE = {}));\n\n    var WORKER_STATUS;\n\n    (function (WORKER_STATUS) {\n      WORKER_STATUS[\"Registered\"] = \"registerd\";\n      WORKER_STATUS[\"Failed\"] = \"failed\";\n      WORKER_STATUS[\"NotStarted\"] = \"not_started\";\n    })(WORKER_STATUS || (WORKER_STATUS = {}));\n\n    var DATA_TYPE;\n\n    (function (DATA_TYPE) {\n      DATA_TYPE[\"String\"] = \"string\";\n      DATA_TYPE[\"Object\"] = \"object\";\n      DATA_TYPE[\"Array\"] = \"array\";\n      DATA_TYPE[\"Number\"] = \"number\";\n      DATA_TYPE[\"Boolean\"] = \"boolean\";\n      DATA_TYPE[\"Null\"] = \"null\";\n      DATA_TYPE[\"DateTime\"] = \"date_time\";\n    })(DATA_TYPE || (DATA_TYPE = {}));\n\n    var API;\n\n    (function (API) {\n      API[\"InitDb\"] = \"init_db\";\n      API[\"Get\"] = \"get\";\n      API[\"Set\"] = \"set\";\n      API[\"Select\"] = \"select\";\n      API[\"Insert\"] = \"insert\";\n      API[\"Update\"] = \"update\";\n      API[\"Remove\"] = \"remove\";\n      API[\"OpenDb\"] = \"open_db\";\n      API[\"Clear\"] = \"clear\";\n      API[\"DropDb\"] = \"drop_db\";\n      API[\"Count\"] = \"count\";\n      API[\"ChangeLogStatus\"] = \"change_log_status\";\n      API[\"Terminate\"] = \"terminate\";\n      API[\"Transaction\"] = \"transaction\";\n      API[\"CloseDb\"] = \"close_db\";\n      API[\"Union\"] = \"union\";\n      API[\"Intersect\"] = \"intersect\";\n      API[\"ImportScripts\"] = \"import_scripts\";\n      API[\"Middleware\"] = \"middleware\";\n    })(API || (API = {}));\n\n    var EVENT;\n\n    (function (EVENT) {\n      EVENT[\"RequestQueueEmpty\"] = \"requestQueueEmpty\";\n      EVENT[\"RequestQueueFilled\"] = \"requestQueueFilled\";\n      EVENT[\"Upgrade\"] = \"upgrade\";\n      EVENT[\"Create\"] = \"create\";\n      EVENT[\"Open\"] = \"open\";\n    })(EVENT || (EVENT = {}));\n\n    var QUERY_OPTION;\n\n    (function (QUERY_OPTION) {\n      QUERY_OPTION[\"Where\"] = \"where\";\n      QUERY_OPTION[\"Like\"] = \"like\";\n      QUERY_OPTION[\"Regex\"] = \"regex\";\n      QUERY_OPTION[\"In\"] = \"in\";\n      QUERY_OPTION[\"Equal\"] = \"=\";\n      QUERY_OPTION[\"Between\"] = \"-\";\n      QUERY_OPTION[\"GreaterThan\"] = \">\";\n      QUERY_OPTION[\"LessThan\"] = \"<\";\n      QUERY_OPTION[\"GreaterThanEqualTo\"] = \">=\";\n      QUERY_OPTION[\"LessThanEqualTo\"] = \"<=\";\n      QUERY_OPTION[\"NotEqualTo\"] = \"!=\";\n      QUERY_OPTION[\"Aggregate\"] = \"aggregate\";\n      QUERY_OPTION[\"Max\"] = \"max\";\n      QUERY_OPTION[\"Min\"] = \"min\";\n      QUERY_OPTION[\"Avg\"] = \"avg\";\n      QUERY_OPTION[\"Count\"] = \"count\";\n      QUERY_OPTION[\"Sum\"] = \"sum\";\n      QUERY_OPTION[\"Or\"] = \"or\";\n      QUERY_OPTION[\"Skip\"] = \"skip\";\n      QUERY_OPTION[\"Limit\"] = \"limit\";\n      QUERY_OPTION[\"And\"] = \"and\";\n      QUERY_OPTION[\"IgnoreCase\"] = \"ignoreCase\";\n      QUERY_OPTION[\"Then\"] = \"then\";\n    })(QUERY_OPTION || (QUERY_OPTION = {}));\n\n    var IDB_MODE;\n\n    (function (IDB_MODE) {\n      IDB_MODE[\"ReadOnly\"] = \"readonly\";\n      IDB_MODE[\"ReadWrite\"] = \"readwrite\";\n    })(IDB_MODE || (IDB_MODE = {}));\n\n    var OCCURENCE;\n\n    (function (OCCURENCE) {\n      OCCURENCE[\"First\"] = \"f\";\n      OCCURENCE[\"Last\"] = \"l\";\n      OCCURENCE[\"Any\"] = \"a\";\n    })(OCCURENCE || (OCCURENCE = {}));\n\n    var CONNECTION_STATUS;\n\n    (function (CONNECTION_STATUS) {\n      CONNECTION_STATUS[\"Connected\"] = \"connected\";\n      CONNECTION_STATUS[\"Closed\"] = \"closed\";\n      CONNECTION_STATUS[\"NotStarted\"] = \"not_started\";\n      CONNECTION_STATUS[\"UnableToStart\"] = \"unable_to_start\";\n      CONNECTION_STATUS[\"ClosedByJsStore\"] = \"closed_by_jsstore\";\n    })(CONNECTION_STATUS || (CONNECTION_STATUS = {})); // CONCATENATED MODULE: ./src/common/utils/promise.ts\n\n\n    var promise = function (cb) {\n      return new Promise(cb);\n    }; // CONCATENATED MODULE: ./src/common/utils/promise_resolve.ts\n\n\n    var promiseResolve = function (value) {\n      return Promise.resolve(value);\n    }; // CONCATENATED MODULE: ./src/main/event_bus.ts\n\n\n    var __spreadArray = undefined && undefined.__spreadArray || function (to, from) {\n      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n      return to;\n    };\n\n    var EventBus =\n    /** @class */\n    function () {\n      function EventBus(ctx) {\n        this._events = {};\n        this._ctx = ctx;\n      }\n\n      EventBus.prototype.on = function (event, cb) {\n        if (this._events[event] == null) {\n          this._events[event] = [];\n        }\n\n        this._events[event].push(cb);\n\n        return this;\n      };\n\n      EventBus.prototype.off = function (event, cb) {\n        if (this._events[event]) {\n          if (cb) {\n            var index = this._events[event].indexOf(cb);\n\n            this._events[event].splice(index, 1);\n          } else {\n            this._events[event] = [];\n          }\n        }\n      };\n\n      EventBus.prototype.emit = function (event) {\n        var _this = this;\n\n        var args = [];\n\n        for (var _i = 1; _i < arguments.length; _i++) {\n          args[_i - 1] = arguments[_i];\n        }\n\n        var events = this._events[event] || [];\n        var index = 0;\n        var length = events.length;\n        var results = [];\n\n        var callMethod = function () {\n          var eventCb = events[index++];\n\n          if (eventCb) {\n            var result = eventCb.call.apply(eventCb, __spreadArray([_this._ctx], args));\n            return result && result.then ? result : Promise.resolve(result);\n          }\n        };\n\n        return new Promise(function (res) {\n          var checkAndCall = function () {\n            if (index < length) {\n              callMethod().then(function (result) {\n                results.push(result);\n                checkAndCall();\n              });\n            } else {\n              res(results);\n            }\n          };\n\n          checkAndCall();\n        });\n      };\n\n      EventBus.prototype.destroy = function () {\n        this._events = null;\n        this._ctx = null;\n      };\n\n      return EventBus;\n    }(); // CONCATENATED MODULE: ./src/main/connection_helper.ts\n\n\n    var connection_helper_ConnectionHelper =\n    /** @class */\n    function () {\n      function ConnectionHelper(worker) {\n        this.isConOpened_ = false;\n        this.isDbIdle_ = true;\n        this.requestQueue_ = [];\n        this.isCodeExecuting_ = false;\n        this.inactivityTimer_ = -1000;\n        this.middlewares = [];\n        this.eventBus_ = new EventBus(this); // these apis have special permissions. These apis dont wait for database open.\n\n        this.whiteListApi_ = [API.InitDb, API.OpenDb, API.Get, API.Set, API.ChangeLogStatus, API.Terminate, API.DropDb];\n        this.isWorker = true;\n        this.logger = new LogHelper(null);\n\n        if (worker) {\n          this.worker_ = worker;\n          this.worker_.onmessage = this.onMessageFromWorker_.bind(this);\n        } else {\n          this.isWorker = false;\n          this.initQueryManager_();\n        }\n      }\n\n      Object.defineProperty(ConnectionHelper.prototype, \"jsstoreWorker\", {\n        get: function () {\n          return this.$worker || self['JsStoreWorker'];\n        },\n        enumerable: false,\n        configurable: true\n      });\n\n      ConnectionHelper.prototype.initQueryManager_ = function () {\n        var workerRef = this.jsstoreWorker;\n\n        if (workerRef) {\n          this.queryManager = new workerRef.QueryManager(this.processFinishedQuery_.bind(this));\n        }\n      };\n\n      ConnectionHelper.prototype.onMessageFromWorker_ = function (msg) {\n        this.processFinishedQuery_(msg.data);\n      };\n\n      ConnectionHelper.prototype.processFinishedQuery_ = function (message) {\n        var finishedRequest = this.requestQueue_.shift();\n\n        if (finishedRequest) {\n          this.logger.log(\"request \" + finishedRequest.name + \" finished\");\n\n          if (message.error) {\n            finishedRequest.onError(message.error);\n          } else {\n            switch (finishedRequest.name) {\n              case API.OpenDb:\n              case API.InitDb:\n                this.isConOpened_ = true;\n                break;\n\n              case API.Terminate:\n                this.isConOpened_ = false;\n\n                if (this.isWorker === true) {\n                  this.worker_.terminate();\n                }\n\n              case API.DropDb:\n                this.isConOpened_ = false;\n                this.requestQueue_ = [];\n                this.isDbIdle_ = true;\n                break;\n\n              case API.CloseDb:\n                if (this.requestQueue_.length > 0) {\n                  this.openDb_();\n                } else {\n                  this.isDbIdle_ = true;\n                  this.eventBus_.emit(EVENT.RequestQueueEmpty, []);\n                }\n\n                break;\n            }\n\n            finishedRequest.onSuccess(message.result);\n          }\n\n          this.isCodeExecuting_ = false;\n          this.executeQry_();\n        }\n      };\n\n      ConnectionHelper.prototype.openDb_ = function () {\n        this.prcoessExecutionOfQry_({\n          name: API.OpenDb,\n          query: {\n            name: this.database.name,\n            version: this.database.version\n          },\n          onSuccess: function () {},\n          onError: function (err) {\n            console.error(err);\n          }\n        }, 0);\n      };\n\n      ConnectionHelper.prototype.executeMiddleware_ = function (input) {\n        var _this = this;\n\n        return promise(function (res) {\n          var index = 0;\n          var lastIndex = _this.middlewares.length - 1;\n\n          var callNextMiddleware = function () {\n            if (index <= lastIndex) {\n              var promiseResult = _this.middlewares[index++](input);\n\n              if (!promiseResult || !promiseResult.then) {\n                promiseResult = promiseResolve(promiseResult);\n              }\n\n              promiseResult.then(function (_) {\n                callNextMiddleware();\n              });\n            } else {\n              res();\n            }\n          };\n\n          callNextMiddleware();\n        });\n      };\n\n      ConnectionHelper.prototype.callResultMiddleware = function (middlewares, result) {\n        return promise(function (res) {\n          var index = 0;\n          var lastIndex = middlewares.length - 1;\n\n          var callNextMiddleware = function () {\n            if (index <= lastIndex) {\n              var promiseResult = middlewares[index++](result);\n\n              if (!promiseResult.then) {\n                promiseResult = promiseResolve(promiseResult);\n              }\n\n              promiseResult.then(function (modifiedResult) {\n                result = modifiedResult;\n                callNextMiddleware();\n              });\n            } else {\n              res(result);\n            }\n          };\n\n          callNextMiddleware();\n        });\n      };\n\n      ConnectionHelper.prototype.pushApi = function (request) {\n        var _this = this;\n\n        return new Promise(function (resolve, reject) {\n          var middlewares = [];\n\n          request.onResult = function (cb) {\n            middlewares.push(function (result) {\n              return cb(result);\n            });\n          };\n\n          _this.executeMiddleware_(request).then(function () {\n            request.onSuccess = function (result) {\n              _this.callResultMiddleware(middlewares, result).then(function (modifiedResult) {\n                resolve(modifiedResult);\n              }).catch(function (err) {\n                request.onError(err);\n              });\n            };\n\n            request.onError = function (err) {\n              middlewares = [];\n              reject(err);\n            };\n\n            if (_this.requestQueue_.length === 0) {\n              _this.eventBus_.emit(EVENT.RequestQueueFilled, []);\n\n              var isConnectionApi = [API.CloseDb, API.DropDb, API.OpenDb, API.Terminate].indexOf(request.name) >= 0;\n\n              if (!isConnectionApi && _this.isDbIdle_ && _this.isConOpened_) {\n                _this.openDb_();\n              } else {\n                clearTimeout(_this.inactivityTimer_);\n              }\n            }\n\n            _this.prcoessExecutionOfQry_(request);\n          }).catch(reject);\n        });\n      };\n\n      ConnectionHelper.prototype.prcoessExecutionOfQry_ = function (request, index) {\n        this.isDbIdle_ = false;\n\n        if (index != null) {\n          this.requestQueue_.splice(index, 0, request);\n        } else {\n          this.requestQueue_.push(request);\n        }\n\n        this.logger.log(\"request pushed: \" + request.name);\n        this.executeQry_();\n      };\n\n      ConnectionHelper.prototype.executeQry_ = function () {\n        var _this = this;\n\n        var requestQueueLength = this.requestQueue_.length;\n\n        if (!this.isCodeExecuting_ && requestQueueLength > 0) {\n          if (this.isConOpened_ === true) {\n            this.sendRequestToWorker_(this.requestQueue_[0]);\n            return;\n          }\n\n          var allowedQueryIndex = this.requestQueue_.findIndex(function (item) {\n            return _this.whiteListApi_.indexOf(item.name) >= 0;\n          }); // shift allowed query to zeroth index\n\n          if (allowedQueryIndex >= 0) {\n            this.requestQueue_.splice(0, 0, this.requestQueue_.splice(allowedQueryIndex, 1)[0]);\n            this.sendRequestToWorker_(this.requestQueue_[0]);\n          }\n        } else if (requestQueueLength === 0 && this.isDbIdle_ === false && this.isConOpened_) {\n          this.inactivityTimer_ = setTimeout(function () {\n            _this.prcoessExecutionOfQry_({\n              name: API.CloseDb,\n              onSuccess: function () {},\n              onError: function (err) {\n                console.error(err);\n              }\n            });\n          }, 100);\n        }\n      };\n\n      ConnectionHelper.prototype.sendRequestToWorker_ = function (request) {\n        this.isCodeExecuting_ = true;\n        this.logger.log(\"request executing: \" + request.name);\n        var requestForWorker = {\n          name: request.name,\n          query: request.query\n        };\n\n        if (this.isWorker === true) {\n          this.worker_.postMessage(requestForWorker);\n        } else {\n          this.queryManager.run(requestForWorker);\n        }\n      };\n\n      return ConnectionHelper;\n    }(); // CONCATENATED MODULE: ./src/main/connection.ts\n\n\n    var __extends = undefined && undefined.__extends || function () {\n      var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n        };\n\n        return extendStatics(d, b);\n      };\n\n      return function (d, b) {\n        if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n\n        function __() {\n          this.constructor = d;\n        }\n\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n\n    var connection_Connection =\n    /** @class */\n    function (_super) {\n      __extends(Connection, _super);\n\n      function Connection(worker) {\n        return _super.call(this, worker) || this;\n      }\n      /**\n       * initiate DataBase\n       *\n       * @param {IDataBase} dataBase\n       * @returns\n       * @memberof Connection\n       */\n\n\n      Connection.prototype.initDb = function (dataBase) {\n        var _this = this;\n\n        this.database = dataBase;\n        return this.pushApi({\n          name: API.InitDb,\n          query: dataBase\n        }).then(function (result) {\n          var promiseObj;\n          var db = result.database;\n\n          if (result.isCreated) {\n            if (result.oldVersion) {\n              promiseObj = _this.eventBus_.emit(EVENT.Upgrade, db, result.oldVersion, result.newVersion);\n            } else {\n              promiseObj = _this.eventBus_.emit(EVENT.Create, db);\n            }\n          }\n\n          return (promiseObj || promiseResolve()).then(function (_) {\n            return _this.eventBus_.emit(EVENT.Open, db);\n          }).then(function (_) {\n            return result.isCreated;\n          });\n        });\n      };\n      /**\n       * drop dataBase\n       *\n       * @returns\n       * @memberof Connection\n       */\n\n\n      Connection.prototype.dropDb = function () {\n        return this.pushApi({\n          name: API.DropDb\n        });\n      };\n      /**\n       * select data from table\n       *\n       * @template T\n       * @param {ISelectQuery} query\n       * @returns\n       * @memberof Connection\n       */\n\n\n      Connection.prototype.select = function (query) {\n        return this.pushApi({\n          name: API.Select,\n          query: query\n        });\n      };\n      /**\n       * get no of record from table\n       *\n       * @param {ICountQuery} query\n       * @returns\n       * @memberof Connection\n       */\n\n\n      Connection.prototype.count = function (query) {\n        return this.pushApi({\n          name: API.Count,\n          query: query\n        });\n      };\n      /**\n       * insert data into table\n       *\n       * @template T\n       * @param {IInsertQuery} query\n       * @returns\n       * @memberof Connection\n       */\n\n\n      Connection.prototype.insert = function (query) {\n        return this.pushApi({\n          name: API.Insert,\n          query: query\n        });\n      };\n      /**\n       * update data into table\n       *\n       * @param {IUpdateQuery} query\n       * @returns\n       * @memberof Connection\n       */\n\n\n      Connection.prototype.update = function (query) {\n        return this.pushApi({\n          name: API.Update,\n          query: query\n        });\n      };\n      /**\n       * remove data from table\n       *\n       * @param {IRemoveQuery} query\n       * @returns\n       * @memberof Connection\n       */\n\n\n      Connection.prototype.remove = function (query) {\n        return this.pushApi({\n          name: API.Remove,\n          query: query\n        });\n      };\n      /**\n       * delete all data from table\n       *\n       * @param {string} tableName\n       * @returns\n       * @memberof Connection\n       */\n\n\n      Connection.prototype.clear = function (tableName) {\n        return this.pushApi({\n          name: API.Clear,\n          query: tableName\n        });\n      };\n\n      Object.defineProperty(Connection.prototype, \"logStatus\", {\n        /**\n         * set log status\n         *\n         * @param {boolean} status\n         * @memberof Connection\n         */\n        set: function (status) {\n          this.logger.status = status;\n          this.pushApi({\n            name: API.ChangeLogStatus,\n            query: status\n          });\n        },\n        enumerable: false,\n        configurable: true\n      });\n      /**\n       * open database\n       *\n       * @param {string} dbName\n       * @returns\n       * @memberof Connection\n       */\n\n      Connection.prototype.openDb = function (dbName, version) {\n        var _this = this;\n\n        return this.pushApi({\n          name: API.OpenDb,\n          query: {\n            version: version,\n            name: dbName\n          }\n        }).then(function (dataBase) {\n          _this.database = dataBase;\n          return dataBase;\n        });\n      };\n      /**\n       * returns list of database created\n       *\n       * @returns\n       * @memberof Connection\n       */\n\n\n      Connection.prototype.getDbList = function () {\n        console.warn(\"Api getDbList is recommended to use for debugging only. Do not use in code.\");\n        return indexedDB.databases();\n      };\n      /**\n       * get the value from keystore table\n       *\n       * @template T\n       * @param {string} key\n       * @returns\n       * @memberof Connection\n       */\n\n\n      Connection.prototype.get = function (key) {\n        return this.pushApi({\n          name: API.Get,\n          query: key\n        });\n      };\n      /**\n       * set the value in keystore table\n       *\n       * @param {string} key\n       * @param {*} value\n       * @returns\n       * @memberof Connection\n       */\n\n\n      Connection.prototype.set = function (key, value) {\n        return this.pushApi({\n          name: API.Set,\n          query: {\n            key: key,\n            value: value\n          }\n        });\n      };\n      /**\n       * terminate the connection\n       *\n       * @returns\n       * @memberof Connection\n       */\n\n\n      Connection.prototype.terminate = function () {\n        return this.pushApi({\n          name: API.Terminate\n        });\n      };\n      /**\n       * execute transaction\n       *\n       * @template T\n       * @param {ITranscationQuery} query\n       * @returns\n       * @memberof Connection\n       */\n\n\n      Connection.prototype.transaction = function (query) {\n        return this.pushApi({\n          name: API.Transaction,\n          query: query\n        });\n      };\n\n      Connection.prototype.on = function (event, eventCallBack) {\n        this.eventBus_.on(event, eventCallBack);\n      };\n\n      Connection.prototype.off = function (event, eventCallBack) {\n        this.eventBus_.off(event, eventCallBack);\n      };\n\n      Connection.prototype.union = function (query) {\n        return this.pushApi({\n          name: API.Union,\n          query: query\n        });\n      };\n\n      Connection.prototype.intersect = function (query) {\n        return this.pushApi({\n          name: API.Intersect,\n          query: query\n        });\n      };\n\n      Connection.prototype.addPlugin = function (plugin, params) {\n        return plugin.setup(this, params);\n      };\n\n      Connection.prototype.addMiddleware = function (middleware, forWorker) {\n        if (forWorker) {\n          return this.pushApi({\n            name: API.Middleware,\n            query: middleware\n          });\n        }\n\n        this.middlewares.push(middleware);\n        return Promise.resolve();\n      };\n      /**\n       * import scripts in jsstore web worker.\n       * Scripts method can be called using transaction api.\n       *\n       * @param {...string[]} urls\n       * @returns\n       * @memberof Connection\n       */\n\n\n      Connection.prototype.importScripts = function () {\n        var urls = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          urls[_i] = arguments[_i];\n        }\n\n        return this.pushApi({\n          name: API.ImportScripts,\n          query: urls\n        });\n      };\n\n      return Connection;\n    }(connection_helper_ConnectionHelper); // CONCATENATED MODULE: ./src/common/utils/promise_all.ts\n\n\n    var promiseAll = function (promises) {\n      return Promise.all(promises);\n    }; // CONCATENATED MODULE: ./src/common/utils/for_obj.ts\n\n\n    var forObj = function (obj, cb) {\n      for (var key in obj) {\n        cb(key, obj[key]);\n      }\n    }; // CONCATENATED MODULE: ./src/common/utils/index.ts\n    // CONCATENATED MODULE: ./src/common/index.ts\n    // CONCATENATED MODULE: ./src/main/index.ts\n\n    /***/\n\n  }\n  /******/\n\n});","map":{"version":3,"mappings":";;;;;;;;;;;AAAA;;;AACA;;;;AAEA;;;;AACA;;;;AAEA;;;AACA;;AACA;;AACA;;AACA;;;;;AACA;;AACAA,iBADA;;;AAEAC,cAFA;;;AAGAC;;;AAHA;;;;AAMA;;;;AACAC;;;;AAEA;;;;AACAC;;;;AAEA;;;;AACA;;AACA;;;;;;AAGA;;;;;AACAC;;;;AAEA;;;;AACAA;;;;AAEA;;;;AACAA;;AACA;;AACAC;AAA0CC,wBAA1C;AAA0CC;AAA1C;;AACA;;;AACA,GAJA;;;;AAMA;;;;;AACAH;;AACA;;AACAC;AAAwDG;AAAxD;;AACA;;;;AACAH;AAAiDG;AAAjD;;AACA,GALA;;;;AAOA;;;AACA;;;AACA;;;AACA;;;AACA;;;;;AACAJ;;AACA;;;AACA;;;AACA;;;AACA;;;AACAA;;;;AACAC;AAAyCC,sBAAzC;AAAyCE;AAAzC;;;AACA;AAAgH;AAAqB,KAArI,CAAqIC,IAArI,CAAqI,IAArI,EAAqIC,GAArI;;;AACA;;AACA,GATA;;;;AAWA;;;;;AACAN;;AACA;;AACA;AAA2B;AAA4B,KADvD;;AAEA;AAAiC;AAAe,KAFhD;;;AAGAA;;;;AACA;;AACA,GANA;;;;AAQA;;;;;AACAA;AAAsD;AAA+D,GAArH;;;;AAEA;;;;;AACAA;;;;;;AAGA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/EA;AAAA;AAAA;AAOI,yBAAYO,IAAZ,EAA8BC,IAA9B,EAAmC;AAC/B,aAAKD,IAAL,GAAYA,IAAZ;AACA,aAAKE,KAAL,GAAaD,IAAb;AACA,aAAKE,OAAL,GAAe,KAAKC,MAAL,EAAf;AACH;;AAEDC;AACI,cAAM,IAAN;AACH,OAFD;;AAIAA,0CAAIC,GAAJ,EAAO;AACH,YAAI,KAAKC,MAAT,EAAiB;AACbC,iBAAO,CAACC,GAAR,CAAYH,GAAZ;AACH;AACJ,OAJD;;AAMAD;AACIG,eAAO,CAACE,KAAR,CAAc,KAAKd,GAAL,EAAd;AACH,OAFD;;AAIAS;AACIG,eAAO,CAACG,IAAR,CAAa,KAAKf,GAAL,EAAb;AACH,OAFD;;AAIAS;AACI,eAAO;AACHF,iBAAO,EAAE,KAAKA,OADX;AAEHH,cAAI,EAAE,KAAKA;AAFR,SAAP;AAIH,OALD;;AAOQK,mCAAR;AACI,YAAIO,MAAJ;;AACA,gBAAQ,KAAKZ,IAAb;AACI;AACIY,kBAAM,GAAG,KAAKT,OAAd;AACA;AAHR;;AAKA,eAAOS,MAAP;AACH,OARO;;AASZ;AAAC,KA/CD;;;ACHA,QAAYC,UAAZ;;AAAA,eAAYA,UAAZ,EAAsB;AAClBA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACH,KA/BD,EAAYA,UAAU,KAAVA,UAAU,MAAtB;;AAiCA,QAAYC,aAAZ;;AAAA,eAAYA,aAAZ,EAAyB;AACrBA;AACAA;AACAA;AACH,KAJD,EAAYA,aAAa,KAAbA,aAAa,MAAzB;;AAMA,QAAYC,SAAZ;;AAAA,eAAYA,SAAZ,EAAqB;AACjBA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACH,KARD,EAAYA,SAAS,KAATA,SAAS,MAArB;;AAUA,QAAYC,GAAZ;;AAAA,eAAYA,GAAZ,EAAe;AACXA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACH,KApBD,EAAYA,GAAG,KAAHA,GAAG,MAAf;;AAsBA,QAAYC,KAAZ;;AAAA,eAAYA,KAAZ,EAAiB;AACbA;AACAA;AACAA;AACAA;AACAA;AACH,KAND,EAAYA,KAAK,KAALA,KAAK,MAAjB;;AAQA,QAAYC,YAAZ;;AAAA,eAAYA,YAAZ,EAAwB;AACpBA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACH,KAxBD,EAAYA,YAAY,KAAZA,YAAY,MAAxB;;AA0BA,QAAYC,QAAZ;;AAAA,eAAYA,QAAZ,EAAoB;AAChBA;AACAA;AACH,KAHD,EAAYA,QAAQ,KAARA,QAAQ,MAApB;;AAKA,QAAYC,SAAZ;;AAAA,eAAYA,SAAZ,EAAqB;AACjBA;AACAA;AACAA;AACH,KAJD,EAAYA,SAAS,KAATA,SAAS,MAArB;;AAMA,QAAYC,iBAAZ;;AAAA,eAAYA,iBAAZ,EAA6B;AACzBA;AACAA;AACAA;AACAA;AACAA;AACH,KAND,EAAYA,iBAAiB,KAAjBA,iBAAiB,MAA7B;;;ACpHO,QAAMC,OAAO,GAAG,UAAIC,EAAJ,EAA0B;AAC7C,aAAO,IAAIC,OAAJ,CAAeD,EAAf,CAAP;AACH,KAFM;;;ACAA,QAAME,cAAc,GAAG,UAAC5B,KAAD,EAAO;AACjC,aAAO2B,OAAO,CAACE,OAAR,CAAgB7B,KAAhB,CAAP;AACH,KAFM;;;;;;;;;ACAP;AAAA;AAAA;AAEI,wBAAY8B,GAAZ,EAAgB;AAMR,uBAEJ,EAFI;AALJ,aAAKC,IAAL,GAAYD,GAAZ;AACH;;AAQDE,wCAAGC,KAAH,EAAkBP,EAAlB,EAA8B;AAC1B,YAAI,KAAKQ,OAAL,CAAaD,KAAb,KAAuB,IAA3B,EAAiC;AAC7B,eAAKC,OAAL,CAAaD,KAAb,IAAsB,EAAtB;AACH;;AACD,aAAKC,OAAL,CAAaD,KAAb,EAAoBE,IAApB,CAAyBT,EAAzB;;AACA,eAAO,IAAP;AACH,OAND;;AAQAM,yCAAIC,KAAJ,EAAmBP,EAAnB,EAA+B;AAC3B,YAAI,KAAKQ,OAAL,CAAaD,KAAb,CAAJ,EAAyB;AACrB,cAAIP,EAAJ,EAAQ;AACJ,gBAAMU,KAAK,GAAG,KAAKF,OAAL,CAAaD,KAAb,EAAoBI,OAApB,CAA4BX,EAA5B,CAAd;;AACA,iBAAKQ,OAAL,CAAaD,KAAb,EAAoBK,MAApB,CAA2BF,KAA3B,EAAkC,CAAlC;AACH,WAHD,MAIK;AACD,iBAAKF,OAAL,CAAaD,KAAb,IAAsB,EAAtB;AACH;AACJ;AACJ,OAVD;;AAYAD,0CAAKC,KAAL,EAAkB;AAAlB;;AAAoB;;aAAA,yCAAO;AAAPM;;;AAChB,YAAMC,MAAM,GAAG,KAAKN,OAAL,CAAaD,KAAb,KAAuB,EAAtC;AACA,YAAIG,KAAK,GAAG,CAAZ;AACA,YAAMK,MAAM,GAAGD,MAAM,CAACC,MAAtB;AACA,YAAMC,OAAO,GAAG,EAAhB;;AACA,YAAMC,UAAU,GAAG;AACf,cAAMC,OAAO,GAAGJ,MAAM,CAACJ,KAAK,EAAN,CAAtB;;AACA,cAAIQ,OAAJ,EAAa;AACT,gBAAMC,MAAM,GAAGD,OAAO,CAACE,IAAR,CAAYC,KAAZ,UAAOC,eAAMC,KAAI,CAAClB,IAAX,GAAoBQ,IAApB,CAAP,CAAf;AACA,mBAAOM,MAAM,IAAIA,MAAM,CAACK,IAAjB,GAAwBL,MAAxB,GAAiClB,OAAO,CAACE,OAAR,CAAgBgB,MAAhB,CAAxC;AACH;AACJ,SAND;;AAQA,eAAO,IAAIlB,OAAJ,CAAmB,UAACwB,GAAD,EAAI;AAC1B,cAAMC,YAAY,GAAG;AACjB,gBAAIhB,KAAK,GAAGK,MAAZ,EAAoB;AAChBE,wBAAU,GAAGO,IAAb,CAAkB,kBAAM;AACpBR,uBAAO,CAACP,IAAR,CAAaU,MAAb;AACAO,4BAAY;AACf,eAHD;AAIH,aALD,MAMK;AACDD,iBAAG,CAACT,OAAD,CAAH;AACH;AACJ,WAVD;;AAWAU,sBAAY;AACf,SAbM,CAAP;AAeH,OA5BD;;AA8BApB;AACI,aAAKE,OAAL,GAAe,IAAf;AACA,aAAKH,IAAL,GAAY,IAAZ;AACH,OAHD;;AAIJ;AAAC,KAlED;;;ACSA;AAAA;AAAA;AAqCE,gCAAYsB,MAAZ,EAA2B;AAlCnB,4BAAe,KAAf;AACA,yBAAY,IAAZ;AACA,6BAAoC,EAApC;AACA,gCAAmB,KAAnB;AAEA,gCAAmB,CAAC,IAApB;AAEE,2BAA6B,EAA7B;AAEA,yBAAsB,IAAIrB,QAAJ,CAAa,IAAb,CAAtB,CAyBiB,CAvB3B;;AACQ,6BAAgB,CACtBb,GAAG,CAACmC,MADkB,EAEtBnC,GAAG,CAACoC,MAFkB,EAGtBpC,GAAG,CAACqC,GAHkB,EAItBrC,GAAG,CAACsC,GAJkB,EAKtBtC,GAAG,CAACuC,eALkB,EAMtBvC,GAAG,CAACwC,SANkB,EAOtBxC,GAAG,CAACyC,MAPkB,CAAhB;AAYR,wBAAW,IAAX;AAEU,sBAAS,IAAIpD,SAAJ,CAAc,IAAd,CAAT;;AASR,YAAI6C,MAAJ,EAAY;AACV,eAAKQ,OAAL,GAAeR,MAAf;AACA,eAAKQ,OAAL,CAAaC,SAAb,GAAyB,KAAKC,oBAAL,CAA0B9D,IAA1B,CAA+B,IAA/B,CAAzB;AACD,SAHD,MAGO;AACL,eAAK+D,QAAL,GAAgB,KAAhB;AACA,eAAKC,iBAAL;AACD;AACF;;AAZDpE,4BAAYqE,0BAAZ,EAAY,eAAZ,EAAyB;aAAzB;AACE,iBAAO,KAAKC,OAAL,IAAgBC,IAAI,CAAC,eAAD,CAA3B;AACD,SAFwB;yBAAA;;AAAA,OAAzB;;AAcQF,qDAAR;AACE,YAAMG,SAAS,GAAG,KAAKC,aAAvB;;AACA,YAAID,SAAJ,EAAe;AACb,eAAKE,YAAL,GAAoB,IAAIF,SAAS,CAACG,YAAd,CAA2B,KAAKC,qBAAL,CAA2BxE,IAA3B,CAAgC,IAAhC,CAA3B,CAApB;AACD;AACF,OALO;;AAOAiE,wDAAR,UAA6BzD,GAA7B,EAAgC;AAC9B,aAAKgE,qBAAL,CAA2BhE,GAAG,CAACiE,IAA/B;AACD,OAFO;;AAIAR,yDAAR,UAA8B5D,OAA9B,EAAsD;AAEpD,YAAMqE,eAAe,GAAqB,KAAKC,aAAL,CAAmBC,KAAnB,EAA1C;;AACA,YAAIF,eAAJ,EAAqB;AACnB,eAAKG,MAAL,CAAYlE,GAAZ,CAAgB,aAAW+D,eAAe,CAACI,IAA3B,GAA+B,WAA/C;;AACA,cAAIzE,OAAO,CAACO,KAAZ,EAAmB;AACjB8D,2BAAe,CAACK,OAAhB,CAAwB1E,OAAO,CAACO,KAAhC;AACD,WAFD,MAEO;AACL,oBAAQ8D,eAAe,CAACI,IAAxB;AACE,mBAAK5D,GAAG,CAACoC,MAAT;AACA,mBAAKpC,GAAG,CAACmC,MAAT;AACE,qBAAK2B,YAAL,GAAoB,IAApB;AAA0B;;AAC5B,mBAAK9D,GAAG,CAACwC,SAAT;AACE,qBAAKsB,YAAL,GAAoB,KAApB;;AACA,oBAAI,KAAKjB,QAAL,KAAkB,IAAtB,EAA4B;AAC1B,uBAAKH,OAAL,CAAaqB,SAAb;AACD;;AACH,mBAAK/D,GAAG,CAACyC,MAAT;AACE,qBAAKqB,YAAL,GAAoB,KAApB;AACA,qBAAKL,aAAL,GAAqB,EAArB;AACA,qBAAKO,SAAL,GAAiB,IAAjB;AACA;;AACF,mBAAKhE,GAAG,CAACiE,OAAT;AACE,oBAAI,KAAKR,aAAL,CAAmBnC,MAAnB,GAA4B,CAAhC,EAAmC;AACjC,uBAAK4C,OAAL;AACD,iBAFD,MAGK;AACH,uBAAKF,SAAL,GAAiB,IAAjB;AACA,uBAAKG,SAAL,CAAeC,IAAf,CAAoBnE,KAAK,CAACoE,iBAA1B,EAA6C,EAA7C;AACD;;AACD;AAtBJ;;AAwBAb,2BAAe,CAACc,SAAhB,CAA0BnF,OAAO,CAACuC,MAAlC;AACD;;AACD,eAAK6C,gBAAL,GAAwB,KAAxB;AACA,eAAKC,WAAL;AACD;AACF,OArCO;;AAuCAzB,2CAAR;AACE,aAAK0B,sBAAL,CAA4B;AAC1Bb,cAAI,EAAE5D,GAAG,CAACoC,MADgB;AAE1BsC,eAAK,EAAE;AACLd,gBAAI,EAAE,KAAKe,QAAL,CAAcf,IADf;AAELgB,mBAAO,EAAE,KAAKD,QAAL,CAAcC;AAFlB,WAFmB;AAM1BN,mBAAS,EAAE,aAEV,CARyB;AAS1BT,iBAAO,EAAE,UAAUgB,GAAV,EAAa;AACpBrF,mBAAO,CAACE,KAAR,CAAcmF,GAAd;AACD;AAXyB,SAA5B,EAYG,CAZH;AAaD,OAdO;;AAgBA9B,sDAAR,UAA2B+B,KAA3B,EAAkD;AAAlD;;AACE,eAAOxE,OAAO,CAAO,UAAC0B,GAAD,EAAI;AACvB,cAAIf,KAAK,GAAG,CAAZ;AACA,cAAM8D,SAAS,GAAGjD,KAAI,CAACkD,WAAL,CAAiB1D,MAAjB,GAA0B,CAA5C;;AACA,cAAM2D,kBAAkB,GAAG;AACzB,gBAAIhE,KAAK,IAAI8D,SAAb,EAAwB;AACtB,kBAAIG,aAAa,GAAGpD,KAAI,CAACkD,WAAL,CAAiB/D,KAAK,EAAtB,EAA0B6D,KAA1B,CAApB;;AACA,kBAAI,CAACI,aAAD,IAAkB,CAACA,aAAa,CAACnD,IAArC,EAA2C;AACzCmD,6BAAa,GAAGzE,cAAc,CAACyE,aAAD,CAA9B;AACD;;AACDA,2BAAa,CAACnD,IAAd,CAAmB,aAAC;AAClBkD,kCAAkB;AACnB,eAFD;AAGD,aARD,MASK;AACHjD,iBAAG;AACJ;AACF,WAbD;;AAcAiD,4BAAkB;AACnB,SAlBa,CAAd;AAmBD,OApBO;;AAsBAlC,wDAAR,UAA6BiC,WAA7B,EAAiDtD,MAAjD,EAAuD;AACrD,eAAOpB,OAAO,CAAM,UAAC0B,GAAD,EAAI;AACtB,cAAIf,KAAK,GAAG,CAAZ;AACA,cAAM8D,SAAS,GAAGC,WAAW,CAAC1D,MAAZ,GAAqB,CAAvC;;AACA,cAAM2D,kBAAkB,GAAG;AACzB,gBAAIhE,KAAK,IAAI8D,SAAb,EAAwB;AACtB,kBAAIG,aAAa,GAAGF,WAAW,CAAC/D,KAAK,EAAN,CAAX,CAAqBS,MAArB,CAApB;;AACA,kBAAI,CAACwD,aAAa,CAACnD,IAAnB,EAAyB;AACvBmD,6BAAa,GAAGzE,cAAc,CAACyE,aAAD,CAA9B;AACD;;AACDA,2BAAa,CAACnD,IAAd,CAAmB,0BAAc;AAC/BL,sBAAM,GAAGyD,cAAT;AACAF,kCAAkB;AACnB,eAHD;AAID,aATD,MAUK;AACHjD,iBAAG,CAACN,MAAD,CAAH;AACD;AACF,WAdD;;AAeAuD,4BAAkB;AACnB,SAnBa,CAAd;AAoBD,OArBO;;AAuBElC,2CAAV,UAAqBqC,OAArB,EAA8C;AAA9C;;AACE,eAAO,IAAI5E,OAAJ,CAAY,UAACE,OAAD,EAAU2E,MAAV,EAAgB;AACjC,cAAIL,WAAW,GAAG,EAAlB;;AACAI,iBAAO,CAACE,QAAR,GAAmB,UAAC/E,EAAD,EAAG;AACpByE,uBAAW,CAAChE,IAAZ,CAAiB,UAACU,MAAD,EAAO;AACtB,qBAAOnB,EAAE,CAACmB,MAAD,CAAT;AACD,aAFD;AAGD,WAJD;;AAKAI,eAAI,CAACyD,kBAAL,CAAwBH,OAAxB,EAAiCrD,IAAjC,CAAsC;AACpCqD,mBAAO,CAACd,SAAR,GAAoB,UAAC5C,MAAD,EAAO;AACzBI,mBAAI,CAAC0D,oBAAL,CAA0BR,WAA1B,EAAuCtD,MAAvC,EAA+CK,IAA/C,CAAoD,0BAAc;AAChErB,uBAAO,CAACyE,cAAD,CAAP;AACD,eAFD,EAEGM,KAFH,CAES,eAAG;AACVL,uBAAO,CAACvB,OAAR,CAAgBgB,GAAhB;AACD,eAJD;AAKD,aAND;;AAOAO,mBAAO,CAACvB,OAAR,GAAkB,UAACgB,GAAD,EAAI;AACpBG,yBAAW,GAAG,EAAd;AACAK,oBAAM,CAACR,GAAD,CAAN;AACD,aAHD;;AAIA,gBAAI/C,KAAI,CAAC2B,aAAL,CAAmBnC,MAAnB,KAA8B,CAAlC,EAAqC;AACnCQ,mBAAI,CAACqC,SAAL,CAAeC,IAAf,CAAoBnE,KAAK,CAACyF,kBAA1B,EAA8C,EAA9C;;AACA,kBAAMC,eAAe,GAAG,CAAC3F,GAAG,CAACiE,OAAL,EAAcjE,GAAG,CAACyC,MAAlB,EAA0BzC,GAAG,CAACoC,MAA9B,EAAsCpC,GAAG,CAACwC,SAA1C,EAAqDtB,OAArD,CAA6DkE,OAAO,CAACxB,IAArE,KAA8E,CAAtG;;AACA,kBAAI,CAAC+B,eAAD,IAAoB7D,KAAI,CAACkC,SAAzB,IAAsClC,KAAI,CAACgC,YAA/C,EAA6D;AAC3DhC,qBAAI,CAACoC,OAAL;AACD,eAFD,MAGK;AACH0B,4BAAY,CAAC9D,KAAI,CAAC+D,gBAAN,CAAZ;AACD;AACF;;AACD/D,iBAAI,CAAC2C,sBAAL,CAA4BW,OAA5B;AACD,WAvBD,EAuBGK,KAvBH,CAuBSJ,MAvBT;AAwBD,SA/BM,CAAP;AAgCD,OAjCS;;AAmCFtC,0DAAR,UAA+BqC,OAA/B,EAA0DnE,KAA1D,EAAwE;AACtE,aAAK+C,SAAL,GAAiB,KAAjB;;AACA,YAAI/C,KAAK,IAAI,IAAb,EAAmB;AACjB,eAAKwC,aAAL,CAAmBtC,MAAnB,CAA0BF,KAA1B,EAAiC,CAAjC,EAAoCmE,OAApC;AACD,SAFD,MAGK;AACH,eAAK3B,aAAL,CAAmBzC,IAAnB,CAAwBoE,OAAxB;AACD;;AACD,aAAKzB,MAAL,CAAYlE,GAAZ,CAAgB,qBAAqB2F,OAAO,CAACxB,IAA7C;AACA,aAAKY,WAAL;AACD,OAVO;;AAYAzB,+CAAR;AAAA;;AACE,YAAM+C,kBAAkB,GAAG,KAAKrC,aAAL,CAAmBnC,MAA9C;;AACA,YAAI,CAAC,KAAKiD,gBAAN,IAA0BuB,kBAAkB,GAAG,CAAnD,EAAsD;AACpD,cAAI,KAAKhC,YAAL,KAAsB,IAA1B,EAAgC;AAC9B,iBAAKiC,oBAAL,CAA0B,KAAKtC,aAAL,CAAmB,CAAnB,CAA1B;AACA;AACD;;AAED,cAAMuC,iBAAiB,GAAG,KAAKvC,aAAL,CAAmBwC,SAAnB,CACxB,gBAAI;AAAI,wBAAI,CAACC,aAAL,CAAmBhF,OAAnB,CAA2BiF,IAAI,CAACvC,IAAhC,KAAyC,CAAzC;AAA0C,WAD1B,CAA1B,CANoD,CAUpD;;AACA,cAAIoC,iBAAiB,IAAI,CAAzB,EAA4B;AAC1B,iBAAKvC,aAAL,CAAmBtC,MAAnB,CACE,CADF,EAEE,CAFF,EAGE,KAAKsC,aAAL,CAAmBtC,MAAnB,CAA0B6E,iBAA1B,EAA6C,CAA7C,EAAgD,CAAhD,CAHF;AAKA,iBAAKD,oBAAL,CAA0B,KAAKtC,aAAL,CAAmB,CAAnB,CAA1B;AACD;AACF,SAnBD,MAoBK,IAAIqC,kBAAkB,KAAK,CAAvB,IAA4B,KAAK9B,SAAL,KAAmB,KAA/C,IAAwD,KAAKF,YAAjE,EAA+E;AAClF,eAAK+B,gBAAL,GAAwBO,UAAU,CAAC;AACjCtE,iBAAI,CAAC2C,sBAAL,CAA4B;AAC1Bb,kBAAI,EAAE5D,GAAG,CAACiE,OADgB;AAE1BK,uBAAS,EAAE,aAEV,CAJyB;AAK1BT,qBAAO,EAAE,UAAUgB,GAAV,EAAa;AACpBrF,uBAAO,CAACE,KAAR,CAAcmF,GAAd;AACD;AAPyB,aAA5B;AASD,WAViC,EAU/B,GAV+B,CAAlC;AAWD;AACF,OAnCO;;AAqCA9B,wDAAR,UAA6BqC,OAA7B,EAAsD;AACpD,aAAKb,gBAAL,GAAwB,IAAxB;AACA,aAAKZ,MAAL,CAAYlE,GAAZ,CAAgB,wBAAwB2F,OAAO,CAACxB,IAAhD;AACA,YAAMyC,gBAAgB,GAAG;AACvBzC,cAAI,EAAEwB,OAAO,CAACxB,IADS;AAEvBc,eAAK,EAAEU,OAAO,CAACV;AAFQ,SAAzB;;AAIA,YAAI,KAAK7B,QAAL,KAAkB,IAAtB,EAA4B;AAC1B,eAAKH,OAAL,CAAa4D,WAAb,CAAyBD,gBAAzB;AACD,SAFD,MAGK;AACH,eAAKjD,YAAL,CAAkBmD,GAAlB,CAAsBF,gBAAtB;AACD;AACF,OAbO;;AAcV;AAAC,KAhQD;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAgCG;;AAE5B,0BAAYtE,MAAZ,EAA2B;eACvBuE,kBAAMvE,MAAN,KAAa;AAChB;AAED;;;;;;;;;AAOAwE,8CAAOC,QAAP,EAA0B;AAA1B;;AACI,aAAKhC,QAAL,GAAgBgC,QAAhB;AACA,eAAO,KAAKC,OAAL,CAAa;AAChBhD,cAAI,EAAE5D,GAAG,CAACmC,MADM;AAEhBuC,eAAK,EAAEiC;AAFS,SAAb,EAGJ5E,IAHI,CAGC,UAACL,MAAD,EAAqB;AACzB,cAAImF,UAAJ;AACA,cAAMC,EAAE,GAAGpF,MAAM,CAACiD,QAAlB;;AACA,cAAIjD,MAAM,CAACqF,SAAX,EAAsB;AAClB,gBAAIrF,MAAM,CAACsF,UAAX,EAAuB;AACnBH,wBAAU,GAAG/E,KAAI,CAACqC,SAAL,CAAeC,IAAf,CAAoBnE,KAAK,CAACgH,OAA1B,EAAmCH,EAAnC,EAAuCpF,MAAM,CAACsF,UAA9C,EAA0DtF,MAAM,CAACwF,UAAjE,CAAb;AACH,aAFD,MAGK;AACDL,wBAAU,GAAG/E,KAAI,CAACqC,SAAL,CAAeC,IAAf,CAAoBnE,KAAK,CAACkH,MAA1B,EAAkCL,EAAlC,CAAb;AACH;AACJ;;AACD,iBAAO,CAACD,UAAU,IAAIpG,cAAc,EAA7B,EAAiCsB,IAAjC,CAAsC,aAAC;AAC1C,mBAAOD,KAAI,CAACqC,SAAL,CAAeC,IAAf,CAAoBnE,KAAK,CAACmH,IAA1B,EAAgCN,EAAhC,CAAP;AACH,WAFM,EAEJ/E,IAFI,CAEC,aAAC;AACL,mBAAOL,MAAM,CAACqF,SAAd;AACH,WAJM,CAAP;AAKH,SAnBM,CAAP;AAoBH,OAtBD;AAwBA;;;;;;;;AAMAL;AACI,eAAO,KAAKE,OAAL,CAAmB;AACtBhD,cAAI,EAAE5D,GAAG,CAACyC;AADY,SAAnB,CAAP;AAGH,OAJD;AAMA;;;;;;;;;;AAQAiE,8CAAUhC,KAAV,EAA6B;AACzB,eAAO,KAAKkC,OAAL,CAAkB;AACrBhD,cAAI,EAAE5D,GAAG,CAACqH,MADW;AAErB3C,eAAK,EAAEA;AAFc,SAAlB,CAAP;AAIH,OALD;AAOA;;;;;;;;;AAOAgC,6CAAMhC,KAAN,EAAwB;AACpB,eAAO,KAAKkC,OAAL,CAAqB;AACxBhD,cAAI,EAAE5D,GAAG,CAACsH,KADc;AAExB5C,eAAK,EAAEA;AAFiB,SAArB,CAAP;AAIH,OALD;AAOA;;;;;;;;;;AAQAgC,8CAAUhC,KAAV,EAA6B;AACzB,eAAO,KAAKkC,OAAL,CAA2B;AAC9BhD,cAAI,EAAE5D,GAAG,CAACuH,MADoB;AAE9B7C,eAAK,EAAEA;AAFuB,SAA3B,CAAP;AAIH,OALD;AAOA;;;;;;;;;AAOAgC,8CAAOhC,KAAP,EAA0B;AACtB,eAAO,KAAKkC,OAAL,CAAqB;AACxBhD,cAAI,EAAE5D,GAAG,CAACwH,MADc;AAExB9C,eAAK,EAAEA;AAFiB,SAArB,CAAP;AAIH,OALD;AAOA;;;;;;;;;AAOAgC,8CAAOhC,KAAP,EAA0B;AACtB,eAAO,KAAKkC,OAAL,CAAqB;AACxBhD,cAAI,EAAE5D,GAAG,CAACyH,MADc;AAExB/C,eAAK,EAAEA;AAFiB,SAArB,CAAP;AAIH,OALD;AAOA;;;;;;;;;AAOAgC,6CAAMgB,SAAN,EAAuB;AACnB,eAAO,KAAKd,OAAL,CAAmB;AACtBhD,cAAI,EAAE5D,GAAG,CAAC2H,KADY;AAEtBjD,eAAK,EAAEgD;AAFe,SAAnB,CAAP;AAIH,OALD;;AAaAhJ,4BAAIgI,oBAAJ,EAAI,WAAJ,EAAa;AANb;;;;;;aAMA,UAAcnH,MAAd,EAA6B;AACzB,eAAKoE,MAAL,CAAYpE,MAAZ,GAAqBA,MAArB;AACA,eAAKqH,OAAL,CAAa;AACThD,gBAAI,EAAE5D,GAAG,CAACuC,eADD;AAETmC,iBAAK,EAAEnF;AAFE,WAAb;AAIH,SANY;yBAAA;;AAAA,OAAb;AAQA;;;;;;;;AAOAmH,8CAAOkB,MAAP,EAAuBhD,OAAvB,EAA+B;AAA/B;;AACI,eAAO,KAAKgC,OAAL,CAAwB;AAC3BhD,cAAI,EAAE5D,GAAG,CAACoC,MADiB;AAE3BsC,eAAK,EAAE;AACHE,mBAAO,EAAEA,OADN;AAEHhB,gBAAI,EAAEgE;AAFH;AAFoB,SAAxB,EAMJ7F,IANI,CAMC,UAAC4E,QAAD,EAAS;AACb7E,eAAI,CAAC6C,QAAL,GAAgBgC,QAAhB;AACA,iBAAOA,QAAP;AACH,SATM,CAAP;AAUH,OAXD;AAaA;;;;;;;;AAMAD;AACIlH,eAAO,CAACG,IAAR,CAAa,6EAAb;AACA,eAAQkI,SAAiB,CAACC,SAAlB,EAAR;AACH,OAHD;AAKA;;;;;;;;;;AAQApB,2CAAO3H,GAAP,EAAkB;AACd,eAAO,KAAK6H,OAAL,CAAgB;AACnBhD,cAAI,EAAE5D,GAAG,CAACqC,GADS;AAEnBqC,eAAK,EAAE3F;AAFY,SAAhB,CAAP;AAIH,OALD;AAOA;;;;;;;;;;AAQA2H,2CAAI3H,GAAJ,EAAiBF,KAAjB,EAA2B;AACvB,eAAO,KAAK+H,OAAL,CAAmB;AACtBhD,cAAI,EAAE5D,GAAG,CAACsC,GADY;AAEtBoC,eAAK,EAAE;AACH3F,eAAG,EAAEA,GADF;AACOF,iBAAK,EAAEA;AADd;AAFe,SAAnB,CAAP;AAMH,OAPD;AASA;;;;;;;;AAMA6H;AACI,eAAO,KAAKE,OAAL,CAAmB;AACtBhD,cAAI,EAAE5D,GAAG,CAACwC;AADY,SAAnB,CAAP;AAGH,OAJD;AAMA;;;;;;;;;;AAQAkE,mDAAehC,KAAf,EAAuC;AACnC,eAAO,KAAKkC,OAAL,CAAgB;AACnBhD,cAAI,EAAE5D,GAAG,CAAC+H,WADS;AAEnBrD,eAAK,EAAEA;AAFY,SAAhB,CAAP;AAIH,OALD;;AAOAgC,0CAAG5F,KAAH,EAAiBkH,aAAjB,EAAwC;AACpC,aAAK7D,SAAL,CAAe8D,EAAf,CAAkBnH,KAAlB,EAAyBkH,aAAzB;AACH,OAFD;;AAIAtB,2CAAI5F,KAAJ,EAAkBkH,aAAlB,EAAyC;AACrC,aAAK7D,SAAL,CAAe+D,GAAf,CAAmBpH,KAAnB,EAA0BkH,aAA1B;AACH,OAFD;;AAIAtB,6CAAShC,KAAT,EAA8B;AAC1B,eAAO,KAAKkC,OAAL,CAAgB;AACnBhD,cAAI,EAAE5D,GAAG,CAACmI,KADS;AAEnBzD,eAAK;AAFc,SAAhB,CAAP;AAIH,OALD;;AAOAgC,iDAAahC,KAAb,EAAmC;AAC/B,eAAO,KAAKkC,OAAL,CAAgB;AACnBhD,cAAI,EAAE5D,GAAG,CAACoI,SADS;AAEnB1D,eAAK;AAFc,SAAhB,CAAP;AAIH,OALD;;AAOAgC,iDAAU2B,MAAV,EAA2BC,MAA3B,EAAkC;AAC9B,eAAOD,MAAM,CAACE,KAAP,CAAa,IAAb,EAAmBD,MAAnB,CAAP;AACH,OAFD;;AAIA5B,qDAAc8B,UAAd,EAAgDC,SAAhD,EAAkE;AAC9D,YAAIA,SAAJ,EAAe;AACX,iBAAO,KAAK7B,OAAL,CAAa;AAChBhD,gBAAI,EAAE5D,GAAG,CAAC0I,UADM;AAEhBhE,iBAAK,EAAE8D;AAFS,WAAb,CAAP;AAIH;;AACD,aAAKxD,WAAL,CAAiBhE,IAAjB,CAAsBwH,UAAtB;AACA,eAAOhI,OAAO,CAACE,OAAR,EAAP;AACH,OATD;AAWA;;;;;;;;;;AAQAgG;AAAc;;aAAA,yCAAiB;AAAjBiC;;;AACV,eAAO,KAAK/B,OAAL,CAAmB;AACtBhD,cAAI,EAAE5D,GAAG,CAAC4I,aADY;AAEtBlE,eAAK,EAAEiE;AAFe,SAAnB,CAAP;AAIH,OALD;;AAMJ;AAAC,KAlSD,CAAgCE,kCAAhC;;;ACPO,QAAMC,UAAU,GAAG,UAAIC,QAAJ,EAAiB;AACvC,aAAOvI,OAAO,CAACwI,GAAR,CAAeD,QAAf,CAAP;AACH,KAFM;;;ACAA,QAAME,MAAM,GAAG,UAACC,GAAD,EAAc3I,EAAd,EAAsC;AACxD,WAAK,IAAMxB,GAAX,IAAkBmK,GAAlB,EAAuB;AACnB3I,UAAE,CAACxB,GAAD,EAAMmK,GAAG,CAACnK,GAAD,CAAT,CAAF;AACH;AACJ,KAJM","names":["i","l","exports","modules","module","__webpack_require__","Object","enumerable","get","value","bind","key","type","info","_info","message","getMsg","LogHelper","msg","status","console","log","error","warn","errMsg","ERROR_TYPE","WORKER_STATUS","DATA_TYPE","API","EVENT","QUERY_OPTION","IDB_MODE","OCCURENCE","CONNECTION_STATUS","promise","cb","Promise","promiseResolve","resolve","ctx","_ctx","EventBus","event","_events","push","index","indexOf","splice","args","events","length","results","callMethod","eventCb","result","call","apply","__spreadArray","_this","then","res","checkAndCall","worker","InitDb","OpenDb","Get","Set","ChangeLogStatus","Terminate","DropDb","worker_","onmessage","onMessageFromWorker_","isWorker","initQueryManager_","ConnectionHelper","$worker","self","workerRef","jsstoreWorker","queryManager","QueryManager","processFinishedQuery_","data","finishedRequest","requestQueue_","shift","logger","name","onError","isConOpened_","terminate","isDbIdle_","CloseDb","openDb_","eventBus_","emit","RequestQueueEmpty","onSuccess","isCodeExecuting_","executeQry_","prcoessExecutionOfQry_","query","database","version","err","input","lastIndex","middlewares","callNextMiddleware","promiseResult","modifiedResult","request","reject","onResult","executeMiddleware_","callResultMiddleware","catch","RequestQueueFilled","isConnectionApi","clearTimeout","inactivityTimer_","requestQueueLength","sendRequestToWorker_","allowedQueryIndex","findIndex","whiteListApi_","item","setTimeout","requestForWorker","postMessage","run","__extends","_super","Connection","dataBase","pushApi","promiseObj","db","isCreated","oldVersion","Upgrade","newVersion","Create","Open","Select","Count","Insert","Update","Remove","tableName","Clear","dbName","indexedDB","databases","Transaction","eventCallBack","on","off","Union","Intersect","plugin","params","setup","middleware","forWorker","Middleware","urls","ImportScripts","connection_helper_ConnectionHelper","promiseAll","promises","all","forObj","obj"],"sources":["webpack://JsStore/webpack/bootstrap","webpack://JsStore/./src/main/log_helper.ts","webpack://JsStore/./src/common/enums.ts","webpack://JsStore/./src/common/utils/promise.ts","webpack://JsStore/./src/common/utils/promise_resolve.ts","webpack://JsStore/./src/main/event_bus.ts","webpack://JsStore/./src/main/connection_helper.ts","webpack://JsStore/./src/main/connection.ts","webpack://JsStore/./src/common/utils/promise_all.ts","webpack://JsStore/./src/common/utils/for_obj.ts"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","\nimport { ERROR_TYPE, IError } from \"../common/index\";\n\nexport class LogHelper implements IError {\n    type: ERROR_TYPE;\n    name: ERROR_TYPE;\n    message: string;\n    private _info: any;\n    status: boolean;\n\n    constructor(type: ERROR_TYPE, info?) {\n        this.type = type;\n        this._info = info;\n        this.message = this.getMsg();\n    }\n\n    throw() {\n        throw this;\n    }\n\n    log(msg) {\n        if (this.status) {\n            console.log(msg);\n        }\n    }\n\n    logError() {\n        console.error(this.get());\n    }\n\n    logWarning() {\n        console.warn(this.get());\n    }\n\n    get() {\n        return {\n            message: this.message,\n            type: this.type\n        } as IError;\n    }\n\n    private getMsg() {\n        let errMsg: string;\n        switch (this.type) {\n            default:\n                errMsg = this.message;\n                break;\n        }\n        return errMsg;\n    }\n}","export enum ERROR_TYPE {\n    InvalidUpdateColumn = \"invalid_update_column\",\n    UndefinedColumn = \"undefined_column\",\n    UndefinedValue = \"undefined_value\",\n    UndefinedColumnName = \"undefined_column_name\",\n    UndefinedDbName = \"undefined_database_name\",\n    UndefinedColumnValue = \"undefined_column_value\",\n    NotArray = \"not_array\",\n    NoValueSupplied = \"no_value_supplied\",\n    ColumnNotExist = \"column_not_exist\",\n    EnableSearchOff = \"enable_search_off\",\n    InvalidOp = \"invalid_operator\",\n    NullValue = \"null_value\",\n    WrongDataType = \"wrong_data_type\",\n    TableNotExist = \"table_not_exist\",\n    DbNotExist = \"db_not_exist\",\n    ConnectionAborted = \"connection_aborted\",\n    ConnectionClosed = \"connection_closed\",\n    NotObject = \"not_object\",\n    InvalidConfig = \"invalid_config\",\n    DbBlocked = \"Db_blocked\",\n    IndexedDbNotSupported = \"indexeddb_not_supported\",\n    NullValueInWhere = \"null_value_in_where\",\n    InvalidJoinQuery = 'invalid_join_query',\n    InvalidOrderQuery = 'invalid_order_query',\n    InvalidQuery = 'invalid_query',\n    InvalidGroupQuery = 'invalid_group_query',\n    ImportScriptsFailed = 'import_scripts_failed',\n    MethodNotExist = 'method_not_exist',\n    Unknown = \"unknown\",\n    InvalidMiddleware = \"invalid_middleware\"\n}\n\nexport enum WORKER_STATUS {\n    Registered = \"registerd\",\n    Failed = \"failed\",\n    NotStarted = \"not_started\"\n}\n\nexport enum DATA_TYPE {\n    String = \"string\",\n    Object = \"object\",\n    Array = \"array\",\n    Number = \"number\",\n    Boolean = \"boolean\",\n    Null = \"null\",\n    DateTime = \"date_time\"\n}\n\nexport enum API {\n    InitDb = \"init_db\",\n    Get = \"get\",\n    Set = \"set\",\n    Select = \"select\",\n    Insert = \"insert\",\n    Update = \"update\",\n    Remove = \"remove\",\n    OpenDb = \"open_db\",\n    Clear = \"clear\",\n    DropDb = \"drop_db\",\n    Count = \"count\",\n    ChangeLogStatus = \"change_log_status\",\n    Terminate = \"terminate\",\n    Transaction = \"transaction\",\n    CloseDb = \"close_db\",\n    Union = \"union\",\n    Intersect = \"intersect\",\n    ImportScripts = \"import_scripts\",\n    Middleware = \"middleware\"\n}\n\nexport enum EVENT {\n    RequestQueueEmpty = \"requestQueueEmpty\",\n    RequestQueueFilled = \"requestQueueFilled\",\n    Upgrade = \"upgrade\",\n    Create = \"create\",\n    Open = \"open\"\n}\n\nexport enum QUERY_OPTION {\n    Where = \"where\",\n    Like = 'like',\n    Regex = 'regex',\n    In = 'in',\n    Equal = \"=\",\n    Between = '-',\n    GreaterThan = '>',\n    LessThan = '<',\n    GreaterThanEqualTo = \">=\",\n    LessThanEqualTo = \"<=\",\n    NotEqualTo = \"!=\",\n    Aggregate = \"aggregate\",\n    Max = \"max\",\n    Min = \"min\",\n    Avg = \"avg\",\n    Count = \"count\",\n    Sum = \"sum\",\n    Or = \"or\",\n    Skip = \"skip\",\n    Limit = \"limit\",\n    And = \"and\",\n    IgnoreCase = \"ignoreCase\",\n    Then = \"then\"\n}\n\nexport enum IDB_MODE {\n    ReadOnly = \"readonly\",\n    ReadWrite = \"readwrite\"\n}\n\nexport enum OCCURENCE {\n    First = 'f',\n    Last = 'l',\n    Any = 'a'\n}\n\nexport enum CONNECTION_STATUS {\n    Connected = \"connected\",\n    Closed = \"closed\",\n    NotStarted = \"not_started\",\n    UnableToStart = \"unable_to_start\",\n    ClosedByJsStore = \"closed_by_jsstore\"\n}","export const promise = <T>(cb: (res, rej?) => any) => {\n    return new Promise<T>(cb);\n}","export const promiseResolve = (value?) => {\n    return Promise.resolve(value);\n}","export class EventBus {\n\n    constructor(ctx?) {\n        this._ctx = ctx;\n    }\n\n    private _ctx;\n\n    private _events: {\n        [key: string]: Function[]\n    } = {};\n\n    on(event: string, cb: Function) {\n        if (this._events[event] == null) {\n            this._events[event] = [];\n        }\n        this._events[event].push(cb);\n        return this;\n    }\n\n    off(event: string, cb: Function) {\n        if (this._events[event]) {\n            if (cb) {\n                const index = this._events[event].indexOf(cb);\n                this._events[event].splice(index, 1);\n            }\n            else {\n                this._events[event] = [];\n            }\n        }\n    }\n\n    emit(event: string, ...args) {\n        const events = this._events[event] || [];\n        let index = 0;\n        const length = events.length;\n        const results = [];\n        const callMethod = () => {\n            const eventCb = events[index++];\n            if (eventCb) {\n                const result = eventCb.call(this._ctx, ...args);\n                return result && result.then ? result : Promise.resolve(result);\n            }\n        };\n\n        return new Promise<any[]>((res) => {\n            const checkAndCall = () => {\n                if (index < length) {\n                    callMethod().then(result => {\n                        results.push(result);\n                        checkAndCall();\n                    });\n                }\n                else {\n                    res(results);\n                }\n            };\n            checkAndCall();\n        });\n\n    }\n\n    destroy() {\n        this._events = null;\n        this._ctx = null;\n    }\n}","import { LogHelper } from \"./log_helper\";\nimport {\n  WebWorkerRequest, EventQueue, API, WebWorkerResult,\n  EVENT, promise, IDataBase, IDbInfo, TMiddleware,\n  promiseResolve\n} from \"../common\";\nimport { EventBus } from \"./event_bus\";\n\ndeclare var JsStoreWorker;\nexport class ConnectionHelper {\n  protected database: IDataBase;\n  private worker_: Worker;\n  private isConOpened_ = false;\n  private isDbIdle_ = true;\n  private requestQueue_: WebWorkerRequest[] = [];\n  private isCodeExecuting_ = false;\n\n  private inactivityTimer_ = -1000;\n\n  protected middlewares: TMiddleware[] = [];\n\n  protected eventBus_: EventBus = new EventBus(this);\n\n  // these apis have special permissions. These apis dont wait for database open.\n  private whiteListApi_ = [\n    API.InitDb,\n    API.OpenDb,\n    API.Get,\n    API.Set,\n    API.ChangeLogStatus,\n    API.Terminate,\n    API.DropDb\n  ];\n\n  private queryManager;\n\n  isWorker = true;\n\n  protected logger = new LogHelper(null);\n\n  private $worker;\n\n  private get jsstoreWorker() {\n    return this.$worker || self['JsStoreWorker'];\n  }\n\n  constructor(worker?: Worker) {\n    if (worker) {\n      this.worker_ = worker;\n      this.worker_.onmessage = this.onMessageFromWorker_.bind(this);\n    } else {\n      this.isWorker = false;\n      this.initQueryManager_();\n    }\n  }\n\n  private initQueryManager_() {\n    const workerRef = this.jsstoreWorker;\n    if (workerRef) {\n      this.queryManager = new workerRef.QueryManager(this.processFinishedQuery_.bind(this));\n    }\n  }\n\n  private onMessageFromWorker_(msg) {\n    this.processFinishedQuery_(msg.data);\n  }\n\n  private processFinishedQuery_(message: WebWorkerResult) {\n\n    const finishedRequest: WebWorkerRequest = this.requestQueue_.shift();\n    if (finishedRequest) {\n      this.logger.log(`request ${finishedRequest.name} finished`);\n      if (message.error) {\n        finishedRequest.onError(message.error);\n      } else {\n        switch (finishedRequest.name) {\n          case API.OpenDb:\n          case API.InitDb:\n            this.isConOpened_ = true; break;\n          case API.Terminate:\n            this.isConOpened_ = false;\n            if (this.isWorker === true) {\n              this.worker_.terminate();\n            }\n          case API.DropDb:\n            this.isConOpened_ = false;\n            this.requestQueue_ = [];\n            this.isDbIdle_ = true;\n            break;\n          case API.CloseDb:\n            if (this.requestQueue_.length > 0) {\n              this.openDb_();\n            }\n            else {\n              this.isDbIdle_ = true;\n              this.eventBus_.emit(EVENT.RequestQueueEmpty, []);\n            }\n            break;\n        }\n        finishedRequest.onSuccess(message.result);\n      }\n      this.isCodeExecuting_ = false;\n      this.executeQry_();\n    }\n  }\n\n  private openDb_() {\n    this.prcoessExecutionOfQry_({\n      name: API.OpenDb,\n      query: {\n        name: this.database.name,\n        version: this.database.version\n      } as IDbInfo,\n      onSuccess: function () {\n\n      },\n      onError: function (err) {\n        console.error(err);\n      }\n    }, 0);\n  }\n\n  private executeMiddleware_(input: WebWorkerRequest) {\n    return promise<void>((res) => {\n      let index = 0;\n      const lastIndex = this.middlewares.length - 1;\n      const callNextMiddleware = () => {\n        if (index <= lastIndex) {\n          let promiseResult = this.middlewares[index++](input);\n          if (!promiseResult || !promiseResult.then) {\n            promiseResult = promiseResolve(promiseResult);\n          }\n          promiseResult.then(_ => {\n            callNextMiddleware();\n          });\n        }\n        else {\n          res();\n        }\n      };\n      callNextMiddleware();\n    });\n  }\n\n  private callResultMiddleware(middlewares: any[], result) {\n    return promise<any>((res) => {\n      let index = 0;\n      const lastIndex = middlewares.length - 1;\n      const callNextMiddleware = () => {\n        if (index <= lastIndex) {\n          let promiseResult = middlewares[index++](result);\n          if (!promiseResult.then) {\n            promiseResult = promiseResolve(promiseResult);\n          }\n          promiseResult.then(modifiedResult => {\n            result = modifiedResult;\n            callNextMiddleware();\n          });\n        }\n        else {\n          res(result);\n        }\n      };\n      callNextMiddleware();\n    });\n  }\n\n  protected pushApi<T>(request: WebWorkerRequest): Promise<T> {\n    return new Promise((resolve, reject) => {\n      let middlewares = [];\n      request.onResult = (cb) => {\n        middlewares.push((result) => {\n          return cb(result);\n        });\n      };\n      this.executeMiddleware_(request).then(() => {\n        request.onSuccess = (result) => {\n          this.callResultMiddleware(middlewares, result).then(modifiedResult => {\n            resolve(modifiedResult);\n          }).catch(err => {\n            request.onError(err);\n          });\n        };\n        request.onError = (err) => {\n          middlewares = [];\n          reject(err);\n        };\n        if (this.requestQueue_.length === 0) {\n          this.eventBus_.emit(EVENT.RequestQueueFilled, []);\n          const isConnectionApi = [API.CloseDb, API.DropDb, API.OpenDb, API.Terminate].indexOf(request.name) >= 0;\n          if (!isConnectionApi && this.isDbIdle_ && this.isConOpened_) {\n            this.openDb_();\n          }\n          else {\n            clearTimeout(this.inactivityTimer_);\n          }\n        }\n        this.prcoessExecutionOfQry_(request);\n      }).catch(reject);\n    });\n  }\n\n  private prcoessExecutionOfQry_(request: WebWorkerRequest, index?: number) {\n    this.isDbIdle_ = false;\n    if (index != null) {\n      this.requestQueue_.splice(index, 0, request);\n    }\n    else {\n      this.requestQueue_.push(request);\n    }\n    this.logger.log(\"request pushed: \" + request.name);\n    this.executeQry_();\n  }\n\n  private executeQry_() {\n    const requestQueueLength = this.requestQueue_.length;\n    if (!this.isCodeExecuting_ && requestQueueLength > 0) {\n      if (this.isConOpened_ === true) {\n        this.sendRequestToWorker_(this.requestQueue_[0]);\n        return;\n      }\n\n      const allowedQueryIndex = this.requestQueue_.findIndex(\n        item => this.whiteListApi_.indexOf(item.name) >= 0\n      );\n\n      // shift allowed query to zeroth index\n      if (allowedQueryIndex >= 0) {\n        this.requestQueue_.splice(\n          0,\n          0,\n          this.requestQueue_.splice(allowedQueryIndex, 1)[0]\n        );\n        this.sendRequestToWorker_(this.requestQueue_[0]);\n      }\n    }\n    else if (requestQueueLength === 0 && this.isDbIdle_ === false && this.isConOpened_) {\n      this.inactivityTimer_ = setTimeout(() => {\n        this.prcoessExecutionOfQry_({\n          name: API.CloseDb,\n          onSuccess: function () {\n\n          },\n          onError: function (err) {\n            console.error(err);\n          }\n        });\n      }, 100) as any;\n    }\n  }\n\n  private sendRequestToWorker_(request: WebWorkerRequest) {\n    this.isCodeExecuting_ = true;\n    this.logger.log(\"request executing: \" + request.name);\n    const requestForWorker = {\n      name: request.name,\n      query: request.query\n    } as WebWorkerRequest;\n    if (this.isWorker === true) {\n      this.worker_.postMessage(requestForWorker);\n    }\n    else {\n      this.queryManager.run(requestForWorker);\n    }\n  }\n}\n","import { ConnectionHelper } from \"./connection_helper\";\nimport {\n    ISelectQuery, ICountQuery, IInsertQuery, SetQuery,\n    IUpdateQuery, IRemoveQuery, ITranscationQuery,\n    API, IDataBase, EVENT, IPlugin, IIntersectQuery, IDbInfo, TMiddleware, promiseResolve, InitDbResult\n} from \"../common\";\n\nexport class Connection extends ConnectionHelper {\n\n    constructor(worker?: Worker) {\n        super(worker);\n    }\n\n    /**\n     * initiate DataBase\n     *\n     * @param {IDataBase} dataBase\n     * @returns\n     * @memberof Connection\n     */\n    initDb(dataBase: IDataBase) {\n        this.database = dataBase;\n        return this.pushApi({\n            name: API.InitDb,\n            query: dataBase\n        }).then((result: InitDbResult) => {\n            let promiseObj: Promise<any>;\n            const db = result.database;\n            if (result.isCreated) {\n                if (result.oldVersion) {\n                    promiseObj = this.eventBus_.emit(EVENT.Upgrade, db, result.oldVersion, result.newVersion);\n                }\n                else {\n                    promiseObj = this.eventBus_.emit(EVENT.Create, db);\n                }\n            }\n            return (promiseObj || promiseResolve()).then(_ => {\n                return this.eventBus_.emit(EVENT.Open, db);\n            }).then(_ => {\n                return result.isCreated;\n            });\n        });\n    }\n\n    /**\n     * drop dataBase\n     *\n     * @returns\n     * @memberof Connection\n     */\n    dropDb() {\n        return this.pushApi<void>({\n            name: API.DropDb\n        });\n    }\n\n    /**\n     * select data from table\n     *\n     * @template T\n     * @param {ISelectQuery} query\n     * @returns\n     * @memberof Connection\n     */\n    select<T>(query: ISelectQuery) {\n        return this.pushApi<T[]>({\n            name: API.Select,\n            query: query\n        });\n    }\n\n    /**\n     * get no of record from table\n     *\n     * @param {ICountQuery} query\n     * @returns\n     * @memberof Connection\n     */\n    count(query: ICountQuery) {\n        return this.pushApi<number>({\n            name: API.Count,\n            query: query\n        });\n    }\n\n    /**\n     * insert data into table\n     *\n     * @template T\n     * @param {IInsertQuery} query\n     * @returns\n     * @memberof Connection\n     */\n    insert<T>(query: IInsertQuery) {\n        return this.pushApi<number | T[]>({\n            name: API.Insert,\n            query: query\n        });\n    }\n\n    /**\n     * update data into table\n     *\n     * @param {IUpdateQuery} query\n     * @returns\n     * @memberof Connection\n     */\n    update(query: IUpdateQuery) {\n        return this.pushApi<number>({\n            name: API.Update,\n            query: query\n        });\n    }\n\n    /**\n     * remove data from table\n     *\n     * @param {IRemoveQuery} query\n     * @returns\n     * @memberof Connection\n     */\n    remove(query: IRemoveQuery) {\n        return this.pushApi<number>({\n            name: API.Remove,\n            query: query\n        });\n    }\n\n    /**\n     * delete all data from table\n     *\n     * @param {string} tableName\n     * @returns\n     * @memberof Connection\n     */\n    clear(tableName: string) {\n        return this.pushApi<void>({\n            name: API.Clear,\n            query: tableName\n        });\n    }\n\n    /**\n     * set log status\n     *\n     * @param {boolean} status\n     * @memberof Connection\n     */\n    set logStatus(status: boolean) {\n        this.logger.status = status;\n        this.pushApi({\n            name: API.ChangeLogStatus,\n            query: status\n        });\n    }\n\n    /**\n     * open database\n     *\n     * @param {string} dbName\n     * @returns\n     * @memberof Connection\n     */\n    openDb(dbName: string, version?) {\n        return this.pushApi<IDataBase>({\n            name: API.OpenDb,\n            query: {\n                version: version,\n                name: dbName\n            } as IDbInfo\n        }).then((dataBase) => {\n            this.database = dataBase;\n            return dataBase;\n        });\n    }\n\n    /**\n     * returns list of database created\n     *\n     * @returns\n     * @memberof Connection\n     */\n    getDbList(): Promise<[IDbInfo]> {\n        console.warn(\"Api getDbList is recommended to use for debugging only. Do not use in code.\");\n        return (indexedDB as any).databases();\n    }\n\n    /**\n     * get the value from keystore table\n     *\n     * @template T\n     * @param {string} key\n     * @returns\n     * @memberof Connection\n     */\n    get<T>(key: string) {\n        return this.pushApi<T>({\n            name: API.Get,\n            query: key\n        });\n    }\n\n    /**\n     * set the value in keystore table \n     *\n     * @param {string} key\n     * @param {*} value\n     * @returns\n     * @memberof Connection\n     */\n    set(key: string, value: any) {\n        return this.pushApi<void>({\n            name: API.Set,\n            query: {\n                key: key, value: value\n            } as SetQuery\n        });\n    }\n\n    /**\n     * terminate the connection\n     *\n     * @returns\n     * @memberof Connection\n     */\n    terminate() {\n        return this.pushApi<void>({\n            name: API.Terminate\n        });\n    }\n\n    /**\n     * execute transaction\n     *\n     * @template T\n     * @param {ITranscationQuery} query\n     * @returns\n     * @memberof Connection\n     */\n    transaction<T>(query: ITranscationQuery) {\n        return this.pushApi<T>({\n            name: API.Transaction,\n            query: query\n        });\n    }\n\n    on(event: EVENT, eventCallBack: Function) {\n        this.eventBus_.on(event, eventCallBack);\n    }\n\n    off(event: EVENT, eventCallBack: Function) {\n        this.eventBus_.off(event, eventCallBack);\n    }\n\n    union<T>(query: ISelectQuery[]) {\n        return this.pushApi<T>({\n            name: API.Union,\n            query\n        });\n    }\n\n    intersect<T>(query: IIntersectQuery) {\n        return this.pushApi<T>({\n            name: API.Intersect,\n            query\n        });\n    }\n\n    addPlugin(plugin: IPlugin, params?) {\n        return plugin.setup(this, params);\n    }\n\n    addMiddleware(middleware: TMiddleware | string, forWorker: boolean) {\n        if (forWorker) {\n            return this.pushApi({\n                name: API.Middleware,\n                query: middleware\n            });\n        }\n        this.middlewares.push(middleware as TMiddleware);\n        return Promise.resolve();\n    }\n\n    /**\n     * import scripts in jsstore web worker. \n     * Scripts method can be called using transaction api.\n     * \n     * @param {...string[]} urls\n     * @returns\n     * @memberof Connection\n     */\n    importScripts(...urls: string[]) {\n        return this.pushApi<void>({\n            name: API.ImportScripts,\n            query: urls\n        });\n    }\n}","export const promiseAll = <T>(promises: any) => {\n    return Promise.all<T>(promises);\n};","export const forObj = (obj: object, cb: (key, value) => void) => {\n    for (const key in obj) {\n        cb(key, obj[key]);\n    }\n}"]},"metadata":{},"sourceType":"script"}